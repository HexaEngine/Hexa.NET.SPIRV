// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.SPIRV.Core;

namespace Hexa.NET.SPIRVReflect
{
	public unsafe partial class SPIRVReflect
	{
		internal static FunctionTable funcTable;

		/// <summary>
		/// Initializes the function table, automatically called. Do not call manually, only after <see cref="FreeApi"/>.
		/// </summary>
		public static void InitApi()
		{
			funcTable = new FunctionTable(LibraryLoader.LoadLibrary(GetLibraryName, null), 45);
			funcTable.Load(0, "spvReflectCreateShaderModule");
			funcTable.Load(1, "spvReflectCreateShaderModule2");
			funcTable.Load(2, "spvReflectGetShaderModule");
			funcTable.Load(3, "spvReflectDestroyShaderModule");
			funcTable.Load(4, "spvReflectGetCodeSize");
			funcTable.Load(5, "spvReflectGetCode");
			funcTable.Load(6, "spvReflectGetEntryPoint");
			funcTable.Load(7, "spvReflectEnumerateDescriptorBindings");
			funcTable.Load(8, "spvReflectEnumerateEntryPointDescriptorBindings");
			funcTable.Load(9, "spvReflectEnumerateDescriptorSets");
			funcTable.Load(10, "spvReflectEnumerateEntryPointDescriptorSets");
			funcTable.Load(11, "spvReflectEnumerateInterfaceVariables");
			funcTable.Load(12, "spvReflectEnumerateEntryPointInterfaceVariables");
			funcTable.Load(13, "spvReflectEnumerateInputVariables");
			funcTable.Load(14, "spvReflectEnumerateEntryPointInputVariables");
			funcTable.Load(15, "spvReflectEnumerateOutputVariables");
			funcTable.Load(16, "spvReflectEnumerateEntryPointOutputVariables");
			funcTable.Load(17, "spvReflectEnumeratePushConstantBlocks");
			funcTable.Load(18, "spvReflectEnumeratePushConstants");
			funcTable.Load(19, "spvReflectEnumerateEntryPointPushConstantBlocks");
			funcTable.Load(20, "spvReflectEnumerateSpecializationConstants");
			funcTable.Load(21, "spvReflectGetDescriptorBinding");
			funcTable.Load(22, "spvReflectGetEntryPointDescriptorBinding");
			funcTable.Load(23, "spvReflectGetDescriptorSet");
			funcTable.Load(24, "spvReflectGetEntryPointDescriptorSet");
			funcTable.Load(25, "spvReflectGetInputVariableByLocation");
			funcTable.Load(26, "spvReflectGetInputVariable");
			funcTable.Load(27, "spvReflectGetEntryPointInputVariableByLocation");
			funcTable.Load(28, "spvReflectGetInputVariableBySemantic");
			funcTable.Load(29, "spvReflectGetEntryPointInputVariableBySemantic");
			funcTable.Load(30, "spvReflectGetOutputVariableByLocation");
			funcTable.Load(31, "spvReflectGetOutputVariable");
			funcTable.Load(32, "spvReflectGetEntryPointOutputVariableByLocation");
			funcTable.Load(33, "spvReflectGetOutputVariableBySemantic");
			funcTable.Load(34, "spvReflectGetEntryPointOutputVariableBySemantic");
			funcTable.Load(35, "spvReflectGetPushConstantBlock");
			funcTable.Load(36, "spvReflectGetPushConstant");
			funcTable.Load(37, "spvReflectGetEntryPointPushConstantBlock");
			funcTable.Load(38, "spvReflectChangeDescriptorBindingNumbers");
			funcTable.Load(39, "spvReflectChangeDescriptorBindingNumber");
			funcTable.Load(40, "spvReflectChangeDescriptorSetNumber");
			funcTable.Load(41, "spvReflectChangeInputVariableLocation");
			funcTable.Load(42, "spvReflectChangeOutputVariableLocation");
			funcTable.Load(43, "spvReflectSourceLanguage");
			funcTable.Load(44, "spvReflectBlockVariableTypeName");
		}

		public static void FreeApi()
		{
			funcTable.Free();
		}
	}
}
