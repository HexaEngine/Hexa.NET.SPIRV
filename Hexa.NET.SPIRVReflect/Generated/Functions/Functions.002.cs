// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.SPIRV.Core;

namespace Hexa.NET.SPIRVReflect
{
	public unsafe partial class SPIRVReflect
	{

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, pCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, pCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, pStr0, pCount, ppBlocks);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, ppBlocks);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, entryPoint, (uint*)ppCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, ppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, pStr0, (uint*)ppCount, ppBlocks);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, ppBlocks);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
			{
				SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, entryPoint, pCount, (SpvReflectBlockVariable**)pppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
			{
				SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, pStr0, pCount, (SpvReflectBlockVariable**)pppBlocks);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
					{
						SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectBlockVariable**)pppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
					{
						SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectBlockVariable**)pppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, (SpvReflectBlockVariable**)pppBlocks);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
					{
						SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
					{
						SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
					{
						SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, pStr0, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
						{
							SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
						{
							SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
					{
						SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateSpecializationConstantsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant * *")] SpvReflectSpecializationConstant** ppConstants)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint*, SpvReflectSpecializationConstant**, SpvReflectResult>)funcTable[20])(pModule, pCount, ppConstants);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, SpvReflectResult>)funcTable[20])((nint)pModule, (nint)pCount, (nint)ppConstants);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant * *")] SpvReflectSpecializationConstant** ppConstants)
		{
			SpvReflectResult ret = EnumerateSpecializationConstantsNative(pModule, pCount, ppConstants);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant * *")] SpvReflectSpecializationConstant** ppConstants)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateSpecializationConstantsNative((SpvReflectShaderModule*)ppModule, pCount, ppConstants);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant * *")] SpvReflectSpecializationConstant** ppConstants)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateSpecializationConstantsNative(pModule, (uint*)ppCount, ppConstants);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant * *")] SpvReflectSpecializationConstant** ppConstants)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateSpecializationConstantsNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, ppConstants);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant * *")] ref SpvReflectSpecializationConstant* ppConstants)
		{
			fixed (SpvReflectSpecializationConstant** pppConstants = &ppConstants)
			{
				SpvReflectResult ret = EnumerateSpecializationConstantsNative(pModule, pCount, (SpvReflectSpecializationConstant**)pppConstants);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant * *")] ref SpvReflectSpecializationConstant* ppConstants)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectSpecializationConstant** pppConstants = &ppConstants)
				{
					SpvReflectResult ret = EnumerateSpecializationConstantsNative((SpvReflectShaderModule*)ppModule, pCount, (SpvReflectSpecializationConstant**)pppConstants);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant * *")] ref SpvReflectSpecializationConstant* ppConstants)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectSpecializationConstant** pppConstants = &ppConstants)
				{
					SpvReflectResult ret = EnumerateSpecializationConstantsNative(pModule, (uint*)ppCount, (SpvReflectSpecializationConstant**)pppConstants);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant * *")] ref SpvReflectSpecializationConstant* ppConstants)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectSpecializationConstant** pppConstants = &ppConstants)
					{
						SpvReflectResult ret = EnumerateSpecializationConstantsNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, (SpvReflectSpecializationConstant**)pppConstants);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectDescriptorBinding* GetDescriptorBindingNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint, uint, SpvReflectResult*, SpvReflectDescriptorBinding*>)funcTable[21])(pModule, bindingNumber, setNumber, pResult);
			#else
			return (SpvReflectDescriptorBinding*)((delegate* unmanaged[Cdecl]<nint, uint, uint, nint, nint>)funcTable[21])((nint)pModule, bindingNumber, setNumber, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectDescriptorBinding* ret = GetDescriptorBindingNative(pModule, bindingNumber, setNumber, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectDescriptorBinding* ret = GetDescriptorBindingNative((SpvReflectShaderModule*)ppModule, bindingNumber, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorBinding* ret = GetDescriptorBindingNative(pModule, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorBinding* ret = GetDescriptorBindingNative((SpvReflectShaderModule*)ppModule, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectDescriptorBinding* GetEntryPointDescriptorBindingNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint, uint, SpvReflectResult*, SpvReflectDescriptorBinding*>)funcTable[22])(pModule, entryPoint, bindingNumber, setNumber, pResult);
			#else
			return (SpvReflectDescriptorBinding*)((delegate* unmanaged[Cdecl]<nint, nint, uint, uint, nint, nint>)funcTable[22])((nint)pModule, (nint)entryPoint, bindingNumber, setNumber, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative(pModule, entryPoint, bindingNumber, setNumber, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative((SpvReflectShaderModule*)ppModule, entryPoint, bindingNumber, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative(pModule, (byte*)pentryPoint, bindingNumber, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative(pModule, (byte*)pentryPoint, bindingNumber, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative(pModule, pStr0, bindingNumber, setNumber, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, bindingNumber, setNumber, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, bindingNumber, setNumber, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative((SpvReflectShaderModule*)ppModule, pStr0, bindingNumber, setNumber, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative(pModule, entryPoint, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative((SpvReflectShaderModule*)ppModule, entryPoint, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative(pModule, (byte*)pentryPoint, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative(pModule, (byte*)pentryPoint, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative(pModule, pStr0, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")]
		public static SpvReflectDescriptorBinding* GetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorBinding* ret = GetEntryPointDescriptorBindingNative((SpvReflectShaderModule*)ppModule, pStr0, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectDescriptorSet* GetDescriptorSetNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint, SpvReflectResult*, SpvReflectDescriptorSet*>)funcTable[23])(pModule, setNumber, pResult);
			#else
			return (SpvReflectDescriptorSet*)((delegate* unmanaged[Cdecl]<nint, uint, nint, nint>)funcTable[23])((nint)pModule, setNumber, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectDescriptorSet* ret = GetDescriptorSetNative(pModule, setNumber, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectDescriptorSet* ret = GetDescriptorSetNative((SpvReflectShaderModule*)ppModule, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorSet* ret = GetDescriptorSetNative(pModule, setNumber, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorSet* ret = GetDescriptorSetNative((SpvReflectShaderModule*)ppModule, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectDescriptorSet* GetEntryPointDescriptorSetNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint, SpvReflectResult*, SpvReflectDescriptorSet*>)funcTable[24])(pModule, entryPoint, setNumber, pResult);
			#else
			return (SpvReflectDescriptorSet*)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, nint>)funcTable[24])((nint)pModule, (nint)entryPoint, setNumber, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative(pModule, entryPoint, setNumber, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative((SpvReflectShaderModule*)ppModule, entryPoint, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative(pModule, (byte*)pentryPoint, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative(pModule, (byte*)pentryPoint, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative(pModule, pStr0, setNumber, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, setNumber, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, setNumber, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative((SpvReflectShaderModule*)ppModule, pStr0, setNumber, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative(pModule, entryPoint, setNumber, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative((SpvReflectShaderModule*)ppModule, entryPoint, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative(pModule, (byte*)pentryPoint, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative(pModule, (byte*)pentryPoint, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative(pModule, pStr0, setNumber, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, setNumber, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, setNumber, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")]
		public static SpvReflectDescriptorSet* GetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorSet* ret = GetEntryPointDescriptorSetNative((SpvReflectShaderModule*)ppModule, pStr0, setNumber, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetInputVariableByLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[25])(pModule, location, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, uint, nint, nint>)funcTable[25])((nint)pModule, location, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetInputVariableByLocationNative(pModule, location, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetInputVariableByLocationNative(pModule, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetInputVariableNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[26])(pModule, location, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, uint, nint, nint>)funcTable[26])((nint)pModule, location, (nint)pResult);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetInputVariableNative(pModule, location, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetInputVariableNative((SpvReflectShaderModule*)ppModule, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetInputVariableNative(pModule, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetInputVariableNative((SpvReflectShaderModule*)ppModule, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[27])(pModule, entryPoint, location, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, nint>)funcTable[27])((nint)pModule, (nint)entryPoint, location, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative(pModule, entryPoint, location, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, entryPoint, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative(pModule, (byte*)pentryPoint, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative(pModule, (byte*)pentryPoint, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative(pModule, pStr0, location, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, location, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, location, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, pStr0, location, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative(pModule, entryPoint, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, entryPoint, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative(pModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative(pModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative(pModule, pStr0, location, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableByLocationNative((SpvReflectShaderModule*)ppModule, pStr0, location, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetInputVariableBySemanticNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[28])(pModule, semantic, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint>)funcTable[28])((nint)pModule, (nint)semantic, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative(pModule, semantic, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, semantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative(pModule, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = semantic)
			{
				SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative(pModule, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative(pModule, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = &semantic)
				{
					SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = semantic)
				{
					SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (semantic != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative(pModule, semantic, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative(pModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative(pModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative(pModule, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = &semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (semantic != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemanticNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, byte*, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[29])(pModule, entryPoint, semantic, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint>)funcTable[29])((nint)pModule, (nint)entryPoint, (nint)semantic, (nint)pResult);
			#endif
		}
	}
}
