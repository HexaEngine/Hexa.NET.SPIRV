// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.SPIRV.Core;

namespace Hexa.NET.SPIRVReflect
{
	public unsafe partial class SPIRVReflect
	{

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, entryPoint, semantic, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, semantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, pStr0, semantic, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, semantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, semantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, semantic, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = semantic)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, entryPoint, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = &semantic)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = semantic)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (semantic != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, pStr0, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (byte* psemantic = &semantic)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (byte* psemantic = semantic)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (semantic != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, pStr0, pStr1, pResult);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (byte* psemantic = &semantic)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (byte* psemantic = semantic)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (semantic != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, pStr1, pResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, entryPoint, semantic, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, pStr0, semantic, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, semantic, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, entryPoint, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = &semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (semantic != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, pStr0, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (byte* psemantic = &semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (byte* psemantic = semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (semantic != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative(pModule, pStr0, pStr1, (SpvReflectResult*)ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (byte* psemantic = &semantic)
					{
						fixed (SpvReflectResult* ppResult = &pResult)
						{
							SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (byte* psemantic = semantic)
					{
						fixed (SpvReflectResult* ppResult = &pResult)
						{
							SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (semantic != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointInputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, pStr1, (SpvReflectResult*)ppResult);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetOutputVariableByLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[30])(pModule, location, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, uint, nint, nint>)funcTable[30])((nint)pModule, location, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetOutputVariableByLocationNative(pModule, location, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetOutputVariableByLocationNative(pModule, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetOutputVariableNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[31])(pModule, location, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, uint, nint, nint>)funcTable[31])((nint)pModule, location, (nint)pResult);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetOutputVariableNative(pModule, location, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetOutputVariableNative((SpvReflectShaderModule*)ppModule, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetOutputVariableNative(pModule, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariable")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetOutputVariableNative((SpvReflectShaderModule*)ppModule, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[32])(pModule, entryPoint, location, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, nint>)funcTable[32])((nint)pModule, (nint)entryPoint, location, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative(pModule, entryPoint, location, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, entryPoint, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative(pModule, (byte*)pentryPoint, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative(pModule, (byte*)pentryPoint, location, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative(pModule, pStr0, location, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, location, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, location, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, pStr0, location, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative(pModule, entryPoint, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, entryPoint, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative(pModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative(pModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative(pModule, pStr0, location, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableByLocationNative((SpvReflectShaderModule*)ppModule, pStr0, location, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetOutputVariableBySemanticNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[33])(pModule, semantic, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint>)funcTable[33])((nint)pModule, (nint)semantic, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative(pModule, semantic, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, semantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative(pModule, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = semantic)
			{
				SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative(pModule, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative(pModule, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = &semantic)
				{
					SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = semantic)
				{
					SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (semantic != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative(pModule, semantic, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative(pModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative(pModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative(pModule, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = &semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (semantic != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemanticNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, byte*, SpvReflectResult*, SpvReflectInterfaceVariable*>)funcTable[34])(pModule, entryPoint, semantic, pResult);
			#else
			return (SpvReflectInterfaceVariable*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint>)funcTable[34])((nint)pModule, (nint)entryPoint, (nint)semantic, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, semantic, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, semantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, pStr0, semantic, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, semantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, semantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, semantic, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = semantic)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = &semantic)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = semantic)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (semantic != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, pStr0, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (byte* psemantic = &semantic)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (byte* psemantic = semantic)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (semantic != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, pStr0, pStr1, pResult);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (byte* psemantic = &semantic)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (byte* psemantic = semantic)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (semantic != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, pStr1, pResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, semantic, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, pStr0, semantic, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, semantic, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = &semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* psemantic = semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}
	}
}
