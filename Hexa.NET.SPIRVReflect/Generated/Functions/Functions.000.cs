// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.SPIRV.Core;

namespace Hexa.NET.SPIRVReflect
{
	public unsafe partial class SPIRVReflect
	{
		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult CreateShaderModuleNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "void const *")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, void*, SpvReflectShaderModule*, SpvReflectResult>)funcTable[0])(size, pCode, pModule);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nuint, nint, nint, SpvReflectResult>)funcTable[0])(size, (nint)pCode, (nint)pModule);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult CreateShaderModule([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "void const *")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule)
		{
			SpvReflectResult ret = CreateShaderModuleNative(size, pCode, pModule);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult CreateShaderModule([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "void const *")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = CreateShaderModuleNative(size, pCode, (SpvReflectShaderModule*)ppModule);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule2")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult CreateShaderModule2Native([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SpvReflectModuleFlags")] SpvReflectModuleFlags flags, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "void const *")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectModuleFlags, nuint, void*, SpvReflectShaderModule*, SpvReflectResult>)funcTable[1])(flags, size, pCode, pModule);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<SpvReflectModuleFlags, nuint, nint, nint, SpvReflectResult>)funcTable[1])(flags, size, (nint)pCode, (nint)pModule);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule2")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult CreateShaderModule2([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SpvReflectModuleFlags")] SpvReflectModuleFlags flags, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "void const *")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule)
		{
			SpvReflectResult ret = CreateShaderModule2Native(flags, size, pCode, pModule);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule2")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult CreateShaderModule2([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SpvReflectModuleFlags")] SpvReflectModuleFlags flags, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "void const *")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = CreateShaderModule2Native(flags, size, pCode, (SpvReflectShaderModule*)ppModule);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult GetShaderModuleNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "void const *")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, void*, SpvReflectShaderModule*, SpvReflectResult>)funcTable[2])(size, pCode, pModule);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nuint, nint, nint, SpvReflectResult>)funcTable[2])(size, (nint)pCode, (nint)pModule);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult GetShaderModule([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "void const *")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule)
		{
			SpvReflectResult ret = GetShaderModuleNative(size, pCode, pModule);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult GetShaderModule([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "void const *")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = GetShaderModuleNative(size, pCode, (SpvReflectShaderModule*)ppModule);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectDestroyShaderModule")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyShaderModuleNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, void>)funcTable[3])(pModule);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[3])((nint)pModule);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectDestroyShaderModule")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyShaderModule([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule)
		{
			DestroyShaderModuleNative(pModule);
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectDestroyShaderModule")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyShaderModule([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				DestroyShaderModuleNative((SpvReflectShaderModule*)ppModule);
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetCodeSize")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetCodeSizeNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint>)funcTable[4])(pModule);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)funcTable[4])((nint)pModule);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetCodeSize")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint GetCodeSize([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule)
		{
			uint ret = GetCodeSizeNative(pModule);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetCodeSize")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint GetCodeSize([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				uint ret = GetCodeSizeNative((SpvReflectShaderModule*)ppModule);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetCode")]
		[return: NativeName(NativeNameType.Type, "uint32_t const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint* GetCodeNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint*>)funcTable[5])(pModule);
			#else
			return (uint*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[5])((nint)pModule);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetCode")]
		[return: NativeName(NativeNameType.Type, "uint32_t const *")]
		public static uint* GetCode([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule)
		{
			uint* ret = GetCodeNative(pModule);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetCode")]
		[return: NativeName(NativeNameType.Type, "uint32_t const *")]
		public static uint* GetCode([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				uint* ret = GetCodeNative((SpvReflectShaderModule*)ppModule);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "SpvReflectEntryPoint const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectEntryPoint* GetEntryPointNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, SpvReflectEntryPoint*>)funcTable[6])(pModule, entryPoint);
			#else
			return (SpvReflectEntryPoint*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[6])((nint)pModule, (nint)entryPoint);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "SpvReflectEntryPoint const *")]
		public static SpvReflectEntryPoint* GetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint)
		{
			SpvReflectEntryPoint* ret = GetEntryPointNative(pModule, entryPoint);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "SpvReflectEntryPoint const *")]
		public static SpvReflectEntryPoint* GetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectEntryPoint* ret = GetEntryPointNative((SpvReflectShaderModule*)ppModule, entryPoint);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "SpvReflectEntryPoint const *")]
		public static SpvReflectEntryPoint* GetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectEntryPoint* ret = GetEntryPointNative(pModule, (byte*)pentryPoint);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "SpvReflectEntryPoint const *")]
		public static SpvReflectEntryPoint* GetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectEntryPoint* ret = GetEntryPointNative(pModule, (byte*)pentryPoint);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "SpvReflectEntryPoint const *")]
		public static SpvReflectEntryPoint* GetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectEntryPoint* ret = GetEntryPointNative(pModule, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "SpvReflectEntryPoint const *")]
		public static SpvReflectEntryPoint* GetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectEntryPoint* ret = GetEntryPointNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "SpvReflectEntryPoint const *")]
		public static SpvReflectEntryPoint* GetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectEntryPoint* ret = GetEntryPointNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "SpvReflectEntryPoint const *")]
		public static SpvReflectEntryPoint* GetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectEntryPoint* ret = GetEntryPointNative((SpvReflectShaderModule*)ppModule, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateDescriptorBindingsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint*, SpvReflectDescriptorBinding**, SpvReflectResult>)funcTable[7])(pModule, pCount, ppBindings);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, SpvReflectResult>)funcTable[7])((nint)pModule, (nint)pCount, (nint)ppBindings);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			SpvReflectResult ret = EnumerateDescriptorBindingsNative(pModule, pCount, ppBindings);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, pCount, ppBindings);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateDescriptorBindingsNative(pModule, (uint*)ppCount, ppBindings);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, ppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
			{
				SpvReflectResult ret = EnumerateDescriptorBindingsNative(pModule, pCount, (SpvReflectDescriptorBinding**)pppBindings);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = EnumerateDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, pCount, (SpvReflectDescriptorBinding**)pppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = EnumerateDescriptorBindingsNative(pModule, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
					{
						SpvReflectResult ret = EnumerateDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateEntryPointDescriptorBindingsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint*, SpvReflectDescriptorBinding**, SpvReflectResult>)funcTable[8])(pModule, entryPoint, pCount, ppBindings);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, SpvReflectResult>)funcTable[8])((nint)pModule, (nint)entryPoint, (nint)pCount, (nint)ppBindings);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, entryPoint, pCount, ppBindings);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, ppBindings);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, pCount, ppBindings);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, pCount, ppBindings);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, pStr0, pCount, ppBindings);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, ppBindings);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, entryPoint, (uint*)ppCount, ppBindings);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, ppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, pStr0, (uint*)ppCount, ppBindings);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppBindings);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppBindings);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, ppBindings);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, entryPoint, pCount, (SpvReflectDescriptorBinding**)pppBindings);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, (SpvReflectDescriptorBinding**)pppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorBinding**)pppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorBinding**)pppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, pStr0, pCount, (SpvReflectDescriptorBinding**)pppBindings);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorBinding**)pppBindings);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorBinding**)pppBindings);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, (SpvReflectDescriptorBinding**)pppBindings);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative(pModule, pStr0, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
						{
							SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
						{
							SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding * *")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorBindingsNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateDescriptorSetsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint*, SpvReflectDescriptorSet**, SpvReflectResult>)funcTable[9])(pModule, pCount, ppSets);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, SpvReflectResult>)funcTable[9])((nint)pModule, (nint)pCount, (nint)ppSets);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			SpvReflectResult ret = EnumerateDescriptorSetsNative(pModule, pCount, ppSets);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateDescriptorSetsNative((SpvReflectShaderModule*)ppModule, pCount, ppSets);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateDescriptorSetsNative(pModule, (uint*)ppCount, ppSets);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, ppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
			{
				SpvReflectResult ret = EnumerateDescriptorSetsNative(pModule, pCount, (SpvReflectDescriptorSet**)pppSets);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = EnumerateDescriptorSetsNative((SpvReflectShaderModule*)ppModule, pCount, (SpvReflectDescriptorSet**)pppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = EnumerateDescriptorSetsNative(pModule, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
					{
						SpvReflectResult ret = EnumerateDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateEntryPointDescriptorSetsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint*, SpvReflectDescriptorSet**, SpvReflectResult>)funcTable[10])(pModule, entryPoint, pCount, ppSets);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, SpvReflectResult>)funcTable[10])((nint)pModule, (nint)entryPoint, (nint)pCount, (nint)ppSets);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, entryPoint, pCount, ppSets);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, ppSets);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, pCount, ppSets);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, pCount, ppSets);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, pStr0, pCount, ppSets);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, ppSets);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, entryPoint, (uint*)ppCount, ppSets);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, ppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, pStr0, (uint*)ppCount, ppSets);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppSets);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppSets);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, ppSets);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, entryPoint, pCount, (SpvReflectDescriptorSet**)pppSets);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, (SpvReflectDescriptorSet**)pppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorSet**)pppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorSet**)pppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
			{
				SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, pStr0, pCount, (SpvReflectDescriptorSet**)pppSets);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorSet**)pppSets);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorSet**)pppSets);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, (SpvReflectDescriptorSet**)pppSets);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative(pModule, pStr0, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
						{
							SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
						{
							SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet * *")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
					{
						SpvReflectResult ret = EnumerateEntryPointDescriptorSetsNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateInterfaceVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint*, SpvReflectInterfaceVariable**, SpvReflectResult>)funcTable[11])(pModule, pCount, ppVariables);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, SpvReflectResult>)funcTable[11])((nint)pModule, (nint)pCount, (nint)ppVariables);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = EnumerateInterfaceVariablesNative(pModule, pCount, ppVariables);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateInterfaceVariablesNative(pModule, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = EnumerateInterfaceVariablesNative(pModule, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateInterfaceVariablesNative(pModule, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateEntryPointInterfaceVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint*, SpvReflectInterfaceVariable**, SpvReflectResult>)funcTable[12])(pModule, entryPoint, pCount, ppVariables);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, SpvReflectResult>)funcTable[12])((nint)pModule, (nint)entryPoint, (nint)pCount, (nint)ppVariables);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, entryPoint, pCount, ppVariables);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, pStr0, pCount, ppVariables);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, ppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, entryPoint, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}
	}
}
