// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.SPIRV.Core;

namespace Hexa.NET.SPIRVReflect
{
	public unsafe partial class SPIRVReflect
	{

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, pStr0, (uint*)ppCount, ppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, ppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, entryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, pStr0, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative(pModule, pStr0, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
						{
							SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
						{
							SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInterfaceVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateInputVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint*, SpvReflectInterfaceVariable**, SpvReflectResult>)funcTable[13])(pModule, pCount, ppVariables);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, SpvReflectResult>)funcTable[13])((nint)pModule, (nint)pCount, (nint)ppVariables);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = EnumerateInputVariablesNative(pModule, pCount, ppVariables);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateInputVariablesNative((SpvReflectShaderModule*)ppModule, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateInputVariablesNative(pModule, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateInputVariablesNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = EnumerateInputVariablesNative(pModule, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateInputVariablesNative((SpvReflectShaderModule*)ppModule, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateInputVariablesNative(pModule, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateInputVariablesNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateEntryPointInputVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint*, SpvReflectInterfaceVariable**, SpvReflectResult>)funcTable[14])(pModule, entryPoint, pCount, ppVariables);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, SpvReflectResult>)funcTable[14])((nint)pModule, (nint)entryPoint, (nint)pCount, (nint)ppVariables);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, entryPoint, pCount, ppVariables);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, pStr0, pCount, ppVariables);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, ppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, entryPoint, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, pStr0, (uint*)ppCount, ppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, ppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, entryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, pStr0, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointInputVariablesNative(pModule, pStr0, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
						{
							SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
						{
							SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointInputVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateOutputVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint*, SpvReflectInterfaceVariable**, SpvReflectResult>)funcTable[15])(pModule, pCount, ppVariables);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, SpvReflectResult>)funcTable[15])((nint)pModule, (nint)pCount, (nint)ppVariables);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = EnumerateOutputVariablesNative(pModule, pCount, ppVariables);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateOutputVariablesNative((SpvReflectShaderModule*)ppModule, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateOutputVariablesNative(pModule, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateOutputVariablesNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = EnumerateOutputVariablesNative(pModule, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateOutputVariablesNative((SpvReflectShaderModule*)ppModule, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateOutputVariablesNative(pModule, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateOutputVariablesNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateEntryPointOutputVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint*, SpvReflectInterfaceVariable**, SpvReflectResult>)funcTable[16])(pModule, entryPoint, pCount, ppVariables);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, SpvReflectResult>)funcTable[16])((nint)pModule, (nint)entryPoint, (nint)pCount, (nint)ppVariables);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, entryPoint, pCount, ppVariables);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, pStr0, pCount, ppVariables);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, ppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, entryPoint, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, pStr0, (uint*)ppCount, ppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, ppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, entryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, pStr0, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, entryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative(pModule, pStr0, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
						{
							SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (uint* ppCount = &pCount)
					{
						fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
						{
							SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = EnumerateEntryPointOutputVariablesNative((SpvReflectShaderModule*)ppModule, pStr0, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumeratePushConstantBlocksNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint*, SpvReflectBlockVariable**, SpvReflectResult>)funcTable[17])(pModule, pCount, ppBlocks);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, SpvReflectResult>)funcTable[17])((nint)pModule, (nint)pCount, (nint)ppBlocks);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			SpvReflectResult ret = EnumeratePushConstantBlocksNative(pModule, pCount, ppBlocks);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumeratePushConstantBlocksNative((SpvReflectShaderModule*)ppModule, pCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumeratePushConstantBlocksNative(pModule, (uint*)ppCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumeratePushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, ppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
			{
				SpvReflectResult ret = EnumeratePushConstantBlocksNative(pModule, pCount, (SpvReflectBlockVariable**)pppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumeratePushConstantBlocksNative((SpvReflectShaderModule*)ppModule, pCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumeratePushConstantBlocksNative(pModule, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
					{
						SpvReflectResult ret = EnumeratePushConstantBlocksNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumeratePushConstantsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint*, SpvReflectBlockVariable**, SpvReflectResult>)funcTable[18])(pModule, pCount, ppBlocks);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, SpvReflectResult>)funcTable[18])((nint)pModule, (nint)pCount, (nint)ppBlocks);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			SpvReflectResult ret = EnumeratePushConstantsNative(pModule, pCount, ppBlocks);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumeratePushConstantsNative((SpvReflectShaderModule*)ppModule, pCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = EnumeratePushConstantsNative(pModule, (uint*)ppCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = EnumeratePushConstantsNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, ppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
			{
				SpvReflectResult ret = EnumeratePushConstantsNative(pModule, pCount, (SpvReflectBlockVariable**)pppBlocks);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumeratePushConstantsNative((SpvReflectShaderModule*)ppModule, pCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = EnumeratePushConstantsNative(pModule, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
					{
						SpvReflectResult ret = EnumeratePushConstantsNative((SpvReflectShaderModule*)ppModule, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult EnumerateEntryPointPushConstantBlocksNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, uint*, SpvReflectBlockVariable**, SpvReflectResult>)funcTable[19])(pModule, entryPoint, pCount, ppBlocks);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, SpvReflectResult>)funcTable[19])((nint)pModule, (nint)entryPoint, (nint)pCount, (nint)ppBlocks);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative(pModule, entryPoint, pCount, ppBlocks);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult EnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t *")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable * *")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = EnumerateEntryPointPushConstantBlocksNative((SpvReflectShaderModule*)ppModule, entryPoint, pCount, ppBlocks);
				return ret;
			}
		}
	}
}
