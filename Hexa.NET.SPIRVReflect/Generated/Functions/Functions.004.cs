// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.SPIRV.Core;

namespace Hexa.NET.SPIRVReflect
{
	public unsafe partial class SPIRVReflect
	{

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (semantic != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, entryPoint, pStr0, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (byte* psemantic = &semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (byte* psemantic = semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (semantic != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative(pModule, pStr0, pStr1, (SpvReflectResult*)ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (byte* psemantic = &semantic)
					{
						fixed (SpvReflectResult* ppResult = &pResult)
						{
							SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (byte* psemantic = semantic)
					{
						fixed (SpvReflectResult* ppResult = &pResult)
						{
							SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")]
		public static SpvReflectInterfaceVariable* GetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "char const *")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (semantic != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(semantic);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = GetEntryPointOutputVariableBySemanticNative((SpvReflectShaderModule*)ppModule, pStr0, pStr1, (SpvReflectResult*)ppResult);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectBlockVariable* GetPushConstantBlockNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint, SpvReflectResult*, SpvReflectBlockVariable*>)funcTable[35])(pModule, index, pResult);
			#else
			return (SpvReflectBlockVariable*)((delegate* unmanaged[Cdecl]<nint, uint, nint, nint>)funcTable[35])((nint)pModule, index, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectBlockVariable* ret = GetPushConstantBlockNative(pModule, index, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectBlockVariable* ret = GetPushConstantBlockNative((SpvReflectShaderModule*)ppModule, index, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectBlockVariable* ret = GetPushConstantBlockNative(pModule, index, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectBlockVariable* ret = GetPushConstantBlockNative((SpvReflectShaderModule*)ppModule, index, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstant")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectBlockVariable* GetPushConstantNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, uint, SpvReflectResult*, SpvReflectBlockVariable*>)funcTable[36])(pModule, index, pResult);
			#else
			return (SpvReflectBlockVariable*)((delegate* unmanaged[Cdecl]<nint, uint, nint, nint>)funcTable[36])((nint)pModule, index, (nint)pResult);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstant")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetPushConstant([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectBlockVariable* ret = GetPushConstantNative(pModule, index, pResult);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstant")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetPushConstant([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectBlockVariable* ret = GetPushConstantNative((SpvReflectShaderModule*)ppModule, index, pResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstant")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetPushConstant([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectBlockVariable* ret = GetPushConstantNative(pModule, index, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstant")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetPushConstant([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectBlockVariable* ret = GetPushConstantNative((SpvReflectShaderModule*)ppModule, index, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectBlockVariable* GetEntryPointPushConstantBlockNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, byte*, SpvReflectResult*, SpvReflectBlockVariable*>)funcTable[37])(pModule, entryPoint, pResult);
			#else
			return (SpvReflectBlockVariable*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint>)funcTable[37])((nint)pModule, (nint)entryPoint, (nint)pResult);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative(pModule, entryPoint, pResult);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative((SpvReflectShaderModule*)ppModule, entryPoint, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative(pModule, (byte*)pentryPoint, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative(pModule, (byte*)pentryPoint, pResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative(pModule, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, pResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] SpvReflectResult* pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative((SpvReflectShaderModule*)ppModule, pStr0, pResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative(pModule, entryPoint, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative((SpvReflectShaderModule*)ppModule, entryPoint, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative(pModule, (byte*)pentryPoint, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative(pModule, (byte*)pentryPoint, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative(pModule, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = &entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (byte* pentryPoint = entryPoint)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative((SpvReflectShaderModule*)ppModule, (byte*)pentryPoint, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")]
		public static SpvReflectBlockVariable* GetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule const *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "char const *")] string entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult *")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (entryPoint != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectBlockVariable* ret = GetEntryPointPushConstantBlockNative((SpvReflectShaderModule*)ppModule, pStr0, (SpvReflectResult*)ppResult);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumbers")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult ChangeDescriptorBindingNumbersNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] SpvReflectDescriptorBinding* pBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, SpvReflectDescriptorBinding*, uint, uint, SpvReflectResult>)funcTable[38])(pModule, pBinding, newBindingNumber, newSetNumber);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, uint, uint, SpvReflectResult>)funcTable[38])((nint)pModule, (nint)pBinding, newBindingNumber, newSetNumber);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumbers")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorBindingNumbers([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] SpvReflectDescriptorBinding* pBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			SpvReflectResult ret = ChangeDescriptorBindingNumbersNative(pModule, pBinding, newBindingNumber, newSetNumber);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumbers")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorBindingNumbers([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] SpvReflectDescriptorBinding* pBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = ChangeDescriptorBindingNumbersNative((SpvReflectShaderModule*)ppModule, pBinding, newBindingNumber, newSetNumber);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumbers")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorBindingNumbers([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] ref SpvReflectDescriptorBinding pBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			fixed (SpvReflectDescriptorBinding* ppBinding = &pBinding)
			{
				SpvReflectResult ret = ChangeDescriptorBindingNumbersNative(pModule, (SpvReflectDescriptorBinding*)ppBinding, newBindingNumber, newSetNumber);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumbers")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorBindingNumbers([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] ref SpvReflectDescriptorBinding pBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectDescriptorBinding* ppBinding = &pBinding)
				{
					SpvReflectResult ret = ChangeDescriptorBindingNumbersNative((SpvReflectShaderModule*)ppModule, (SpvReflectDescriptorBinding*)ppBinding, newBindingNumber, newSetNumber);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult ChangeDescriptorBindingNumberNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_descriptor_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] SpvReflectDescriptorBinding* pDescriptorBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "optional_new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint optionalNewSetNumber)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, SpvReflectDescriptorBinding*, uint, uint, SpvReflectResult>)funcTable[39])(pModule, pDescriptorBinding, newBindingNumber, optionalNewSetNumber);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, uint, uint, SpvReflectResult>)funcTable[39])((nint)pModule, (nint)pDescriptorBinding, newBindingNumber, optionalNewSetNumber);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorBindingNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_descriptor_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] SpvReflectDescriptorBinding* pDescriptorBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "optional_new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint optionalNewSetNumber)
		{
			SpvReflectResult ret = ChangeDescriptorBindingNumberNative(pModule, pDescriptorBinding, newBindingNumber, optionalNewSetNumber);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorBindingNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_descriptor_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] SpvReflectDescriptorBinding* pDescriptorBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "optional_new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint optionalNewSetNumber)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = ChangeDescriptorBindingNumberNative((SpvReflectShaderModule*)ppModule, pDescriptorBinding, newBindingNumber, optionalNewSetNumber);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorBindingNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_descriptor_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] ref SpvReflectDescriptorBinding pDescriptorBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "optional_new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint optionalNewSetNumber)
		{
			fixed (SpvReflectDescriptorBinding* ppDescriptorBinding = &pDescriptorBinding)
			{
				SpvReflectResult ret = ChangeDescriptorBindingNumberNative(pModule, (SpvReflectDescriptorBinding*)ppDescriptorBinding, newBindingNumber, optionalNewSetNumber);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorBindingNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_descriptor_binding")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding const *")] ref SpvReflectDescriptorBinding pDescriptorBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "optional_new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint optionalNewSetNumber)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectDescriptorBinding* ppDescriptorBinding = &pDescriptorBinding)
				{
					SpvReflectResult ret = ChangeDescriptorBindingNumberNative((SpvReflectShaderModule*)ppModule, (SpvReflectDescriptorBinding*)ppDescriptorBinding, newBindingNumber, optionalNewSetNumber);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorSetNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult ChangeDescriptorSetNumberNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_set")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")] SpvReflectDescriptorSet* pSet, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, SpvReflectDescriptorSet*, uint, SpvReflectResult>)funcTable[40])(pModule, pSet, newSetNumber);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, uint, SpvReflectResult>)funcTable[40])((nint)pModule, (nint)pSet, newSetNumber);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorSetNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorSetNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_set")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")] SpvReflectDescriptorSet* pSet, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			SpvReflectResult ret = ChangeDescriptorSetNumberNative(pModule, pSet, newSetNumber);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorSetNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorSetNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_set")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")] SpvReflectDescriptorSet* pSet, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = ChangeDescriptorSetNumberNative((SpvReflectShaderModule*)ppModule, pSet, newSetNumber);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorSetNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorSetNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_set")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")] ref SpvReflectDescriptorSet pSet, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			fixed (SpvReflectDescriptorSet* ppSet = &pSet)
			{
				SpvReflectResult ret = ChangeDescriptorSetNumberNative(pModule, (SpvReflectDescriptorSet*)ppSet, newSetNumber);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorSetNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeDescriptorSetNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_set")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet const *")] ref SpvReflectDescriptorSet pSet, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectDescriptorSet* ppSet = &pSet)
				{
					SpvReflectResult ret = ChangeDescriptorSetNumberNative((SpvReflectShaderModule*)ppModule, (SpvReflectDescriptorSet*)ppSet, newSetNumber);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeInputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult ChangeInputVariableLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_input_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] SpvReflectInterfaceVariable* pInputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, SpvReflectInterfaceVariable*, uint, SpvReflectResult>)funcTable[41])(pModule, pInputVariable, newLocation);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, uint, SpvReflectResult>)funcTable[41])((nint)pModule, (nint)pInputVariable, newLocation);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeInputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeInputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_input_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] SpvReflectInterfaceVariable* pInputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			SpvReflectResult ret = ChangeInputVariableLocationNative(pModule, pInputVariable, newLocation);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeInputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeInputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_input_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] SpvReflectInterfaceVariable* pInputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = ChangeInputVariableLocationNative((SpvReflectShaderModule*)ppModule, pInputVariable, newLocation);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeInputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeInputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_input_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] ref SpvReflectInterfaceVariable pInputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			fixed (SpvReflectInterfaceVariable* ppInputVariable = &pInputVariable)
			{
				SpvReflectResult ret = ChangeInputVariableLocationNative(pModule, (SpvReflectInterfaceVariable*)ppInputVariable, newLocation);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeInputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeInputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_input_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] ref SpvReflectInterfaceVariable pInputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectInterfaceVariable* ppInputVariable = &pInputVariable)
				{
					SpvReflectResult ret = ChangeInputVariableLocationNative((SpvReflectShaderModule*)ppModule, (SpvReflectInterfaceVariable*)ppInputVariable, newLocation);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeOutputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvReflectResult ChangeOutputVariableLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_output_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] SpvReflectInterfaceVariable* pOutputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectShaderModule*, SpvReflectInterfaceVariable*, uint, SpvReflectResult>)funcTable[42])(pModule, pOutputVariable, newLocation);
			#else
			return (SpvReflectResult)((delegate* unmanaged[Cdecl]<nint, nint, uint, SpvReflectResult>)funcTable[42])((nint)pModule, (nint)pOutputVariable, newLocation);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeOutputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeOutputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_output_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] SpvReflectInterfaceVariable* pOutputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			SpvReflectResult ret = ChangeOutputVariableLocationNative(pModule, pOutputVariable, newLocation);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeOutputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeOutputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_output_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] SpvReflectInterfaceVariable* pOutputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = ChangeOutputVariableLocationNative((SpvReflectShaderModule*)ppModule, pOutputVariable, newLocation);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeOutputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeOutputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_output_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] ref SpvReflectInterfaceVariable pOutputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			fixed (SpvReflectInterfaceVariable* ppOutputVariable = &pOutputVariable)
			{
				SpvReflectResult ret = ChangeOutputVariableLocationNative(pModule, (SpvReflectInterfaceVariable*)ppOutputVariable, newLocation);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeOutputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult ChangeOutputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule *")] ref SpvReflectShaderModule pModule, [NativeName(NativeNameType.Param, "p_output_variable")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable const *")] ref SpvReflectInterfaceVariable pOutputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				fixed (SpvReflectInterfaceVariable* ppOutputVariable = &pOutputVariable)
				{
					SpvReflectResult ret = ChangeOutputVariableLocationNative((SpvReflectShaderModule*)ppModule, (SpvReflectInterfaceVariable*)ppOutputVariable, newLocation);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectSourceLanguage")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* SourceLanguageNative([NativeName(NativeNameType.Param, "source_lang")] [NativeName(NativeNameType.Type, "SpvSourceLanguage")] SpvSourceLanguage sourceLang)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvSourceLanguage, byte*>)funcTable[43])(sourceLang);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvSourceLanguage, nint>)funcTable[43])(sourceLang);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectSourceLanguage")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* SourceLanguage([NativeName(NativeNameType.Param, "source_lang")] [NativeName(NativeNameType.Type, "SpvSourceLanguage")] SpvSourceLanguage sourceLang)
		{
			byte* ret = SourceLanguageNative(sourceLang);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectSourceLanguage")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string SourceLanguageS([NativeName(NativeNameType.Param, "source_lang")] [NativeName(NativeNameType.Type, "SpvSourceLanguage")] SpvSourceLanguage sourceLang)
		{
			string ret = Utils.DecodeStringUTF8(SourceLanguageNative(sourceLang));
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectBlockVariableTypeName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* BlockVariableTypeNameNative([NativeName(NativeNameType.Param, "p_var")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")] SpvReflectBlockVariable* pVar)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvReflectBlockVariable*, byte*>)funcTable[44])(pVar);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[44])((nint)pVar);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectBlockVariableTypeName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* BlockVariableTypeName([NativeName(NativeNameType.Param, "p_var")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")] SpvReflectBlockVariable* pVar)
		{
			byte* ret = BlockVariableTypeNameNative(pVar);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectBlockVariableTypeName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string BlockVariableTypeNameS([NativeName(NativeNameType.Param, "p_var")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")] SpvReflectBlockVariable* pVar)
		{
			string ret = Utils.DecodeStringUTF8(BlockVariableTypeNameNative(pVar));
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectBlockVariableTypeName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* BlockVariableTypeName([NativeName(NativeNameType.Param, "p_var")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")] ref SpvReflectBlockVariable pVar)
		{
			fixed (SpvReflectBlockVariable* ppVar = &pVar)
			{
				byte* ret = BlockVariableTypeNameNative((SpvReflectBlockVariable*)ppVar);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <br/>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectBlockVariableTypeName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string BlockVariableTypeNameS([NativeName(NativeNameType.Param, "p_var")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable const *")] ref SpvReflectBlockVariable pVar)
		{
			fixed (SpvReflectBlockVariable* ppVar = &pVar)
			{
				string ret = Utils.DecodeStringUTF8(BlockVariableTypeNameNative((SpvReflectBlockVariable*)ppVar));
				return ret;
			}
		}

	}
}
