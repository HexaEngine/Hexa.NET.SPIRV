// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.SPIRV.Core;

namespace Hexa.NET.SPIRVReflect
{
	/// <summary>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectInterfaceVariable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectInterfaceVariable
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.StructOrClass, "SpvReflectInterfaceVariable::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct WordOffsetUnion
		{
			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "location")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Location;


			/// <summary>
			/// To be documented.
			/// </summary>
			public unsafe WordOffsetUnion(uint location = default)
			{
				Location = location;
			}


		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "spirv_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpirvId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* Name;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "location")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Location;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "component")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Component;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "storage_class")]
		[NativeName(NativeNameType.Type, "SpvStorageClass")]
		public SpvStorageClass StorageClass;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "semantic")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* Semantic;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "decoration_flags")]
		[NativeName(NativeNameType.Type, "SpvReflectDecorationFlags")]
		public SpvReflectDecorationFlags DecorationFlags;

		/// <summary>
		/// The builtin id (SpvBuiltIn) if the variable is a builtin, and -1 otherwise.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "built_in")]
		[NativeName(NativeNameType.Type, "int")]
		public int BuiltIn;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "numeric")]
		[NativeName(NativeNameType.Type, "SpvReflectNumericTraits")]
		public SpvReflectNumericTraits Numeric;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "array")]
		[NativeName(NativeNameType.Type, "SpvReflectArrayTraits")]
		public SpvReflectArrayTraits Array;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "member_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemberCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "members")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable *")]
		public unsafe SpvReflectInterfaceVariable* Members;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "SpvReflectFormat")]
		public SpvReflectFormat Format;

		/// <summary>
		/// NOTE: SPIR-V shares type references for variables<br/>
		/// that have the same underlying type. This means<br/>
		/// that the same type name will appear for multiple<br/>
		/// variables.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type_description")]
		[NativeName(NativeNameType.Type, "SpvReflectTypeDescription *")]
		public unsafe SpvReflectTypeDescription* TypeDescription;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "word_offset")]
		[NativeName(NativeNameType.Type, "")]
		public WordOffsetUnion WordOffset;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe SpvReflectInterfaceVariable(uint spirvId = default, byte* name = default, uint location = default, uint component = default, SpvStorageClass storageClass = default, byte* semantic = default, SpvReflectDecorationFlags decorationFlags = default, int builtIn = default, SpvReflectNumericTraits numeric = default, SpvReflectArrayTraits array = default, uint memberCount = default, SpvReflectInterfaceVariable* members = default, SpvReflectFormat format = default, SpvReflectTypeDescription* typeDescription = default, WordOffsetUnion wordOffset = default)
		{
			SpirvId = spirvId;
			Name = name;
			Location = location;
			Component = component;
			StorageClass = storageClass;
			Semantic = semantic;
			DecorationFlags = decorationFlags;
			BuiltIn = builtIn;
			Numeric = numeric;
			Array = array;
			MemberCount = memberCount;
			Members = members;
			Format = format;
			TypeDescription = typeDescription;
			WordOffset = wordOffset;
		}


	}

}
