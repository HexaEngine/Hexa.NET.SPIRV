// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.SPIRV.Core;

namespace Hexa.NET.SPIRVReflect
{
	/// <summary>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectShaderModule")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectShaderModule
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.StructOrClass, "SpvReflectShaderModule::Internal")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct InternalUnion
		{
			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "module_flags")]
			[NativeName(NativeNameType.Type, "SpvReflectModuleFlags")]
			public SpvReflectModuleFlags ModuleFlags;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "spirv_size")]
			[NativeName(NativeNameType.Type, "size_t")]
			public nuint SpirvSize;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "spirv_code")]
			[NativeName(NativeNameType.Type, "uint32_t *")]
			public unsafe uint* SpirvCode;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "spirv_word_count")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint SpirvWordCount;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "type_description_count")]
			[NativeName(NativeNameType.Type, "size_t")]
			public nuint TypeDescriptionCount;

			/// <summary>
			/// To be documented.
			/// </summary>
			[NativeName(NativeNameType.Field, "type_descriptions")]
			[NativeName(NativeNameType.Type, "SpvReflectTypeDescription *")]
			public unsafe SpvReflectTypeDescription* TypeDescriptions;


			/// <summary>
			/// To be documented.
			/// </summary>
			public unsafe InternalUnion(SpvReflectModuleFlags moduleFlags = default, nuint spirvSize = default, uint* spirvCode = default, uint spirvWordCount = default, nuint typeDescriptionCount = default, SpvReflectTypeDescription* typeDescriptions = default)
			{
				ModuleFlags = moduleFlags;
				SpirvSize = spirvSize;
				SpirvCode = spirvCode;
				SpirvWordCount = spirvWordCount;
				TypeDescriptionCount = typeDescriptionCount;
				TypeDescriptions = typeDescriptions;
			}


		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "generator")]
		[NativeName(NativeNameType.Type, "SpvReflectGenerator")]
		public SpvReflectGenerator Generator;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "entry_point_name")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* EntryPointName;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "entry_point_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EntryPointId;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "entry_point_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EntryPointCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "entry_points")]
		[NativeName(NativeNameType.Type, "SpvReflectEntryPoint *")]
		public unsafe SpvReflectEntryPoint* EntryPoints;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "source_language")]
		[NativeName(NativeNameType.Type, "SpvSourceLanguage")]
		public SpvSourceLanguage SourceLanguage;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "source_language_version")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SourceLanguageVersion;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "source_file")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* SourceFile;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "source_source")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* SourceSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "capability_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CapabilityCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "capabilities")]
		[NativeName(NativeNameType.Type, "SpvReflectCapability *")]
		public unsafe SpvReflectCapability* Capabilities;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "spirv_execution_model")]
		[NativeName(NativeNameType.Type, "SpvExecutionModel")]
		public SpvExecutionModel SpirvExecutionModel;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "shader_stage")]
		[NativeName(NativeNameType.Type, "SpvReflectShaderStageFlagBits")]
		public SpvReflectShaderStageFlags ShaderStage;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "descriptor_binding_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorBindingCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "descriptor_bindings")]
		[NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding *")]
		public unsafe SpvReflectDescriptorBinding* DescriptorBindings;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "descriptor_set_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorSetCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "descriptor_sets")]
		[NativeName(NativeNameType.Type, "SpvReflectDescriptorSet[64]")]
		public SpvReflectDescriptorSet DescriptorSets_0;
		public SpvReflectDescriptorSet DescriptorSets_1;
		public SpvReflectDescriptorSet DescriptorSets_2;
		public SpvReflectDescriptorSet DescriptorSets_3;
		public SpvReflectDescriptorSet DescriptorSets_4;
		public SpvReflectDescriptorSet DescriptorSets_5;
		public SpvReflectDescriptorSet DescriptorSets_6;
		public SpvReflectDescriptorSet DescriptorSets_7;
		public SpvReflectDescriptorSet DescriptorSets_8;
		public SpvReflectDescriptorSet DescriptorSets_9;
		public SpvReflectDescriptorSet DescriptorSets_10;
		public SpvReflectDescriptorSet DescriptorSets_11;
		public SpvReflectDescriptorSet DescriptorSets_12;
		public SpvReflectDescriptorSet DescriptorSets_13;
		public SpvReflectDescriptorSet DescriptorSets_14;
		public SpvReflectDescriptorSet DescriptorSets_15;
		public SpvReflectDescriptorSet DescriptorSets_16;
		public SpvReflectDescriptorSet DescriptorSets_17;
		public SpvReflectDescriptorSet DescriptorSets_18;
		public SpvReflectDescriptorSet DescriptorSets_19;
		public SpvReflectDescriptorSet DescriptorSets_20;
		public SpvReflectDescriptorSet DescriptorSets_21;
		public SpvReflectDescriptorSet DescriptorSets_22;
		public SpvReflectDescriptorSet DescriptorSets_23;
		public SpvReflectDescriptorSet DescriptorSets_24;
		public SpvReflectDescriptorSet DescriptorSets_25;
		public SpvReflectDescriptorSet DescriptorSets_26;
		public SpvReflectDescriptorSet DescriptorSets_27;
		public SpvReflectDescriptorSet DescriptorSets_28;
		public SpvReflectDescriptorSet DescriptorSets_29;
		public SpvReflectDescriptorSet DescriptorSets_30;
		public SpvReflectDescriptorSet DescriptorSets_31;
		public SpvReflectDescriptorSet DescriptorSets_32;
		public SpvReflectDescriptorSet DescriptorSets_33;
		public SpvReflectDescriptorSet DescriptorSets_34;
		public SpvReflectDescriptorSet DescriptorSets_35;
		public SpvReflectDescriptorSet DescriptorSets_36;
		public SpvReflectDescriptorSet DescriptorSets_37;
		public SpvReflectDescriptorSet DescriptorSets_38;
		public SpvReflectDescriptorSet DescriptorSets_39;
		public SpvReflectDescriptorSet DescriptorSets_40;
		public SpvReflectDescriptorSet DescriptorSets_41;
		public SpvReflectDescriptorSet DescriptorSets_42;
		public SpvReflectDescriptorSet DescriptorSets_43;
		public SpvReflectDescriptorSet DescriptorSets_44;
		public SpvReflectDescriptorSet DescriptorSets_45;
		public SpvReflectDescriptorSet DescriptorSets_46;
		public SpvReflectDescriptorSet DescriptorSets_47;
		public SpvReflectDescriptorSet DescriptorSets_48;
		public SpvReflectDescriptorSet DescriptorSets_49;
		public SpvReflectDescriptorSet DescriptorSets_50;
		public SpvReflectDescriptorSet DescriptorSets_51;
		public SpvReflectDescriptorSet DescriptorSets_52;
		public SpvReflectDescriptorSet DescriptorSets_53;
		public SpvReflectDescriptorSet DescriptorSets_54;
		public SpvReflectDescriptorSet DescriptorSets_55;
		public SpvReflectDescriptorSet DescriptorSets_56;
		public SpvReflectDescriptorSet DescriptorSets_57;
		public SpvReflectDescriptorSet DescriptorSets_58;
		public SpvReflectDescriptorSet DescriptorSets_59;
		public SpvReflectDescriptorSet DescriptorSets_60;
		public SpvReflectDescriptorSet DescriptorSets_61;
		public SpvReflectDescriptorSet DescriptorSets_62;
		public SpvReflectDescriptorSet DescriptorSets_63;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "input_variable_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InputVariableCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "input_variables")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")]
		public unsafe SpvReflectInterfaceVariable** InputVariables;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "output_variable_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OutputVariableCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "output_variables")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable * *")]
		public unsafe SpvReflectInterfaceVariable** OutputVariables;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interface_variable_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InterfaceVariableCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interface_variables")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable *")]
		public unsafe SpvReflectInterfaceVariable* InterfaceVariables;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "push_constant_block_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PushConstantBlockCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "push_constant_blocks")]
		[NativeName(NativeNameType.Type, "SpvReflectBlockVariable *")]
		public unsafe SpvReflectBlockVariable* PushConstantBlocks;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "spec_constant_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpecConstantCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "spec_constants")]
		[NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant *")]
		public unsafe SpvReflectSpecializationConstant* SpecConstants;

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Field, "_internal")]
		[NativeName(NativeNameType.Type, "Internal *")]
		public unsafe InternalUnion* Internal;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe SpvReflectShaderModule(SpvReflectGenerator generator = default, byte* entryPointName = default, uint entryPointId = default, uint entryPointCount = default, SpvReflectEntryPoint* entryPoints = default, SpvSourceLanguage sourceLanguage = default, uint sourceLanguageVersion = default, byte* sourceFile = default, byte* sourceSource = default, uint capabilityCount = default, SpvReflectCapability* capabilities = default, SpvExecutionModel spirvExecutionModel = default, SpvReflectShaderStageFlags shaderStage = default, uint descriptorBindingCount = default, SpvReflectDescriptorBinding* descriptorBindings = default, uint descriptorSetCount = default, SpvReflectDescriptorSet* descriptorSets = default, uint inputVariableCount = default, SpvReflectInterfaceVariable** inputVariables = default, uint outputVariableCount = default, SpvReflectInterfaceVariable** outputVariables = default, uint interfaceVariableCount = default, SpvReflectInterfaceVariable* interfaceVariables = default, uint pushConstantBlockCount = default, SpvReflectBlockVariable* pushConstantBlocks = default, uint specConstantCount = default, SpvReflectSpecializationConstant* specConstants = default, InternalUnion* @internal = default)
		{
			Generator = generator;
			EntryPointName = entryPointName;
			EntryPointId = entryPointId;
			EntryPointCount = entryPointCount;
			EntryPoints = entryPoints;
			SourceLanguage = sourceLanguage;
			SourceLanguageVersion = sourceLanguageVersion;
			SourceFile = sourceFile;
			SourceSource = sourceSource;
			CapabilityCount = capabilityCount;
			Capabilities = capabilities;
			SpirvExecutionModel = spirvExecutionModel;
			ShaderStage = shaderStage;
			DescriptorBindingCount = descriptorBindingCount;
			DescriptorBindings = descriptorBindings;
			DescriptorSetCount = descriptorSetCount;
			if (descriptorSets != default(SpvReflectDescriptorSet*))
			{
				DescriptorSets_0 = descriptorSets[0];
				DescriptorSets_1 = descriptorSets[1];
				DescriptorSets_2 = descriptorSets[2];
				DescriptorSets_3 = descriptorSets[3];
				DescriptorSets_4 = descriptorSets[4];
				DescriptorSets_5 = descriptorSets[5];
				DescriptorSets_6 = descriptorSets[6];
				DescriptorSets_7 = descriptorSets[7];
				DescriptorSets_8 = descriptorSets[8];
				DescriptorSets_9 = descriptorSets[9];
				DescriptorSets_10 = descriptorSets[10];
				DescriptorSets_11 = descriptorSets[11];
				DescriptorSets_12 = descriptorSets[12];
				DescriptorSets_13 = descriptorSets[13];
				DescriptorSets_14 = descriptorSets[14];
				DescriptorSets_15 = descriptorSets[15];
				DescriptorSets_16 = descriptorSets[16];
				DescriptorSets_17 = descriptorSets[17];
				DescriptorSets_18 = descriptorSets[18];
				DescriptorSets_19 = descriptorSets[19];
				DescriptorSets_20 = descriptorSets[20];
				DescriptorSets_21 = descriptorSets[21];
				DescriptorSets_22 = descriptorSets[22];
				DescriptorSets_23 = descriptorSets[23];
				DescriptorSets_24 = descriptorSets[24];
				DescriptorSets_25 = descriptorSets[25];
				DescriptorSets_26 = descriptorSets[26];
				DescriptorSets_27 = descriptorSets[27];
				DescriptorSets_28 = descriptorSets[28];
				DescriptorSets_29 = descriptorSets[29];
				DescriptorSets_30 = descriptorSets[30];
				DescriptorSets_31 = descriptorSets[31];
				DescriptorSets_32 = descriptorSets[32];
				DescriptorSets_33 = descriptorSets[33];
				DescriptorSets_34 = descriptorSets[34];
				DescriptorSets_35 = descriptorSets[35];
				DescriptorSets_36 = descriptorSets[36];
				DescriptorSets_37 = descriptorSets[37];
				DescriptorSets_38 = descriptorSets[38];
				DescriptorSets_39 = descriptorSets[39];
				DescriptorSets_40 = descriptorSets[40];
				DescriptorSets_41 = descriptorSets[41];
				DescriptorSets_42 = descriptorSets[42];
				DescriptorSets_43 = descriptorSets[43];
				DescriptorSets_44 = descriptorSets[44];
				DescriptorSets_45 = descriptorSets[45];
				DescriptorSets_46 = descriptorSets[46];
				DescriptorSets_47 = descriptorSets[47];
				DescriptorSets_48 = descriptorSets[48];
				DescriptorSets_49 = descriptorSets[49];
				DescriptorSets_50 = descriptorSets[50];
				DescriptorSets_51 = descriptorSets[51];
				DescriptorSets_52 = descriptorSets[52];
				DescriptorSets_53 = descriptorSets[53];
				DescriptorSets_54 = descriptorSets[54];
				DescriptorSets_55 = descriptorSets[55];
				DescriptorSets_56 = descriptorSets[56];
				DescriptorSets_57 = descriptorSets[57];
				DescriptorSets_58 = descriptorSets[58];
				DescriptorSets_59 = descriptorSets[59];
				DescriptorSets_60 = descriptorSets[60];
				DescriptorSets_61 = descriptorSets[61];
				DescriptorSets_62 = descriptorSets[62];
				DescriptorSets_63 = descriptorSets[63];
			}
			InputVariableCount = inputVariableCount;
			InputVariables = inputVariables;
			OutputVariableCount = outputVariableCount;
			OutputVariables = outputVariables;
			InterfaceVariableCount = interfaceVariableCount;
			InterfaceVariables = interfaceVariables;
			PushConstantBlockCount = pushConstantBlockCount;
			PushConstantBlocks = pushConstantBlocks;
			SpecConstantCount = specConstantCount;
			SpecConstants = specConstants;
			Internal = @internal;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe SpvReflectShaderModule(SpvReflectGenerator generator = default, byte* entryPointName = default, uint entryPointId = default, uint entryPointCount = default, SpvReflectEntryPoint* entryPoints = default, SpvSourceLanguage sourceLanguage = default, uint sourceLanguageVersion = default, byte* sourceFile = default, byte* sourceSource = default, uint capabilityCount = default, SpvReflectCapability* capabilities = default, SpvExecutionModel spirvExecutionModel = default, SpvReflectShaderStageFlags shaderStage = default, uint descriptorBindingCount = default, SpvReflectDescriptorBinding* descriptorBindings = default, uint descriptorSetCount = default, Span<SpvReflectDescriptorSet> descriptorSets = default, uint inputVariableCount = default, SpvReflectInterfaceVariable** inputVariables = default, uint outputVariableCount = default, SpvReflectInterfaceVariable** outputVariables = default, uint interfaceVariableCount = default, SpvReflectInterfaceVariable* interfaceVariables = default, uint pushConstantBlockCount = default, SpvReflectBlockVariable* pushConstantBlocks = default, uint specConstantCount = default, SpvReflectSpecializationConstant* specConstants = default, InternalUnion* @internal = default)
		{
			Generator = generator;
			EntryPointName = entryPointName;
			EntryPointId = entryPointId;
			EntryPointCount = entryPointCount;
			EntryPoints = entryPoints;
			SourceLanguage = sourceLanguage;
			SourceLanguageVersion = sourceLanguageVersion;
			SourceFile = sourceFile;
			SourceSource = sourceSource;
			CapabilityCount = capabilityCount;
			Capabilities = capabilities;
			SpirvExecutionModel = spirvExecutionModel;
			ShaderStage = shaderStage;
			DescriptorBindingCount = descriptorBindingCount;
			DescriptorBindings = descriptorBindings;
			DescriptorSetCount = descriptorSetCount;
			if (descriptorSets != default(Span<SpvReflectDescriptorSet>))
			{
				DescriptorSets_0 = descriptorSets[0];
				DescriptorSets_1 = descriptorSets[1];
				DescriptorSets_2 = descriptorSets[2];
				DescriptorSets_3 = descriptorSets[3];
				DescriptorSets_4 = descriptorSets[4];
				DescriptorSets_5 = descriptorSets[5];
				DescriptorSets_6 = descriptorSets[6];
				DescriptorSets_7 = descriptorSets[7];
				DescriptorSets_8 = descriptorSets[8];
				DescriptorSets_9 = descriptorSets[9];
				DescriptorSets_10 = descriptorSets[10];
				DescriptorSets_11 = descriptorSets[11];
				DescriptorSets_12 = descriptorSets[12];
				DescriptorSets_13 = descriptorSets[13];
				DescriptorSets_14 = descriptorSets[14];
				DescriptorSets_15 = descriptorSets[15];
				DescriptorSets_16 = descriptorSets[16];
				DescriptorSets_17 = descriptorSets[17];
				DescriptorSets_18 = descriptorSets[18];
				DescriptorSets_19 = descriptorSets[19];
				DescriptorSets_20 = descriptorSets[20];
				DescriptorSets_21 = descriptorSets[21];
				DescriptorSets_22 = descriptorSets[22];
				DescriptorSets_23 = descriptorSets[23];
				DescriptorSets_24 = descriptorSets[24];
				DescriptorSets_25 = descriptorSets[25];
				DescriptorSets_26 = descriptorSets[26];
				DescriptorSets_27 = descriptorSets[27];
				DescriptorSets_28 = descriptorSets[28];
				DescriptorSets_29 = descriptorSets[29];
				DescriptorSets_30 = descriptorSets[30];
				DescriptorSets_31 = descriptorSets[31];
				DescriptorSets_32 = descriptorSets[32];
				DescriptorSets_33 = descriptorSets[33];
				DescriptorSets_34 = descriptorSets[34];
				DescriptorSets_35 = descriptorSets[35];
				DescriptorSets_36 = descriptorSets[36];
				DescriptorSets_37 = descriptorSets[37];
				DescriptorSets_38 = descriptorSets[38];
				DescriptorSets_39 = descriptorSets[39];
				DescriptorSets_40 = descriptorSets[40];
				DescriptorSets_41 = descriptorSets[41];
				DescriptorSets_42 = descriptorSets[42];
				DescriptorSets_43 = descriptorSets[43];
				DescriptorSets_44 = descriptorSets[44];
				DescriptorSets_45 = descriptorSets[45];
				DescriptorSets_46 = descriptorSets[46];
				DescriptorSets_47 = descriptorSets[47];
				DescriptorSets_48 = descriptorSets[48];
				DescriptorSets_49 = descriptorSets[49];
				DescriptorSets_50 = descriptorSets[50];
				DescriptorSets_51 = descriptorSets[51];
				DescriptorSets_52 = descriptorSets[52];
				DescriptorSets_53 = descriptorSets[53];
				DescriptorSets_54 = descriptorSets[54];
				DescriptorSets_55 = descriptorSets[55];
				DescriptorSets_56 = descriptorSets[56];
				DescriptorSets_57 = descriptorSets[57];
				DescriptorSets_58 = descriptorSets[58];
				DescriptorSets_59 = descriptorSets[59];
				DescriptorSets_60 = descriptorSets[60];
				DescriptorSets_61 = descriptorSets[61];
				DescriptorSets_62 = descriptorSets[62];
				DescriptorSets_63 = descriptorSets[63];
			}
			InputVariableCount = inputVariableCount;
			InputVariables = inputVariables;
			OutputVariableCount = outputVariableCount;
			OutputVariables = outputVariables;
			InterfaceVariableCount = interfaceVariableCount;
			InterfaceVariables = interfaceVariables;
			PushConstantBlockCount = pushConstantBlockCount;
			PushConstantBlocks = pushConstantBlocks;
			SpecConstantCount = specConstantCount;
			SpecConstants = specConstants;
			Internal = @internal;
		}


		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		public unsafe Span<SpvReflectDescriptorSet> DescriptorSets
		
		{
			get
			{
				fixed (SpvReflectDescriptorSet* p = &this.DescriptorSets_0)
				{
					return new Span<SpvReflectDescriptorSet>(p, 64);
				}
			}
		}
	}

}
