// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.SPIRV.Core;

namespace Hexa.NET.SPIRVCross
{
	public unsafe partial class SPIRVCross
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ConstantGetScalarI16(SpvcConstant constant, uint column, uint row)
		{
			int ret = ConstantGetScalarI16Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint ConstantGetScalarU8Native(SpvcConstant constant, uint column, uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint>)funcTable[145])(constant, column, row);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint>)funcTable[145])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint ConstantGetScalarU8(SpvcConstant constant, uint column, uint row)
		{
			uint ret = ConstantGetScalarU8Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ConstantGetScalarI8Native(SpvcConstant constant, uint column, uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int>)funcTable[146])(constant, column, row);
			#else
			return (int)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int>)funcTable[146])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ConstantGetScalarI8(SpvcConstant constant, uint column, uint row)
		{
			int ret = ConstantGetScalarI8Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantGetSubconstantsNative(SpvcConstant constant, uint** constituents, nuint* count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint**, nuint*, void>)funcTable[147])(constant, constituents, count);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, nint, nint, void>)funcTable[147])(constant, (nint)constituents, (nint)count);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantGetSubconstants(SpvcConstant constant, uint** constituents, nuint* count)
		{
			ConstantGetSubconstantsNative(constant, constituents, count);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantGetSubconstants(SpvcConstant constant, ref uint* constituents, nuint* count)
		{
			fixed (uint** pconstituents = &constituents)
			{
				ConstantGetSubconstantsNative(constant, (uint**)pconstituents, count);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantGetSubconstants(SpvcConstant constant, uint** constituents, ref nuint count)
		{
			fixed (nuint* pcount = &count)
			{
				ConstantGetSubconstantsNative(constant, constituents, (nuint*)pcount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantGetSubconstants(SpvcConstant constant, ref uint* constituents, ref nuint count)
		{
			fixed (uint** pconstituents = &constituents)
			{
				fixed (nuint* pcount = &count)
				{
					ConstantGetSubconstantsNative(constant, (uint**)pconstituents, (nuint*)pcount);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong ConstantGetScalarU64Native(SpvcConstant constant, uint column, uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ulong>)funcTable[148])(constant, column, row);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ulong>)funcTable[148])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ulong ConstantGetScalarU64(SpvcConstant constant, uint column, uint row)
		{
			ulong ret = ConstantGetScalarU64Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static long ConstantGetScalarI64Native(SpvcConstant constant, uint column, uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, long>)funcTable[149])(constant, column, row);
			#else
			return (long)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, long>)funcTable[149])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static long ConstantGetScalarI64(SpvcConstant constant, uint column, uint row)
		{
			long ret = ConstantGetScalarI64Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint ConstantGetTypeNative(SpvcConstant constant)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint>)funcTable[150])(constant);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcConstant, uint>)funcTable[150])(constant);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint ConstantGetType(SpvcConstant constant)
		{
			uint ret = ConstantGetTypeNative(constant);
			return ret;
		}

		/// <summary>
		/// C implementation of the C++ api.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarFp16Native(SpvcConstant constant, uint column, uint row, ushort value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ushort, void>)funcTable[151])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ushort, void>)funcTable[151])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// C implementation of the C++ api.<br/>
		/// </summary>
		public static void ConstantSetScalarFp16(SpvcConstant constant, uint column, uint row, ushort value)
		{
			ConstantSetScalarFp16Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarFp32Native(SpvcConstant constant, uint column, uint row, float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, float, void>)funcTable[152])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, float, void>)funcTable[152])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarFp32(SpvcConstant constant, uint column, uint row, float value)
		{
			ConstantSetScalarFp32Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarFp64Native(SpvcConstant constant, uint column, uint row, double value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, double, void>)funcTable[153])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, double, void>)funcTable[153])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarFp64(SpvcConstant constant, uint column, uint row, double value)
		{
			ConstantSetScalarFp64Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarU32Native(SpvcConstant constant, uint column, uint row, uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint, void>)funcTable[154])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint, void>)funcTable[154])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarU32(SpvcConstant constant, uint column, uint row, uint value)
		{
			ConstantSetScalarU32Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarI32Native(SpvcConstant constant, uint column, uint row, int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int, void>)funcTable[155])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int, void>)funcTable[155])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarI32(SpvcConstant constant, uint column, uint row, int value)
		{
			ConstantSetScalarI32Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarU64Native(SpvcConstant constant, uint column, uint row, ulong value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ulong, void>)funcTable[156])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ulong, void>)funcTable[156])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarU64(SpvcConstant constant, uint column, uint row, ulong value)
		{
			ConstantSetScalarU64Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarI64Native(SpvcConstant constant, uint column, uint row, long value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, long, void>)funcTable[157])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, long, void>)funcTable[157])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarI64(SpvcConstant constant, uint column, uint row, long value)
		{
			ConstantSetScalarI64Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarU16Native(SpvcConstant constant, uint column, uint row, ushort value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ushort, void>)funcTable[158])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ushort, void>)funcTable[158])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarU16(SpvcConstant constant, uint column, uint row, ushort value)
		{
			ConstantSetScalarU16Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarI16Native(SpvcConstant constant, uint column, uint row, short value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, short, void>)funcTable[159])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, short, void>)funcTable[159])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarI16(SpvcConstant constant, uint column, uint row, short value)
		{
			ConstantSetScalarI16Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarU8Native(SpvcConstant constant, uint column, uint row, byte value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, byte, void>)funcTable[160])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, byte, void>)funcTable[160])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarU8(SpvcConstant constant, uint column, uint row, byte value)
		{
			ConstantSetScalarU8Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarI8Native(SpvcConstant constant, uint column, uint row, byte value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, byte, void>)funcTable[161])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, byte, void>)funcTable[161])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ConstantSetScalarI8(SpvcConstant constant, uint column, uint row, byte value)
		{
			ConstantSetScalarI8Native(constant, column, row, value);
		}

		/// <summary>
		/// Misc reflection<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerGetBinaryOffsetForDecorationNative(SpvcCompiler compiler, uint id, SpvDecoration decoration, uint* wordOffset)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, uint*, byte>)funcTable[162])(compiler, id, decoration, wordOffset);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, nint, byte>)funcTable[162])(compiler, id, decoration, (nint)wordOffset);
			#endif
		}

		/// <summary>
		/// Misc reflection<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		public static bool CompilerGetBinaryOffsetForDecoration(SpvcCompiler compiler, uint id, SpvDecoration decoration, uint* wordOffset)
		{
			byte ret = CompilerGetBinaryOffsetForDecorationNative(compiler, id, decoration, wordOffset);
			return ret != 0;
		}

		/// <summary>
		/// Misc reflection<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		public static bool CompilerGetBinaryOffsetForDecoration(SpvcCompiler compiler, uint id, SpvDecoration decoration, ref uint wordOffset)
		{
			fixed (uint* pwordOffset = &wordOffset)
			{
				byte ret = CompilerGetBinaryOffsetForDecorationNative(compiler, id, decoration, (uint*)pwordOffset);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerBufferIsHlslCounterBufferNative(SpvcCompiler compiler, uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[163])(compiler, id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[163])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool CompilerBufferIsHlslCounterBuffer(SpvcCompiler compiler, uint id)
		{
			byte ret = CompilerBufferIsHlslCounterBufferNative(compiler, id);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerBufferGetHlslCounterBufferNative(SpvcCompiler compiler, uint id, uint* counterId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint*, byte>)funcTable[164])(compiler, id, counterId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint, byte>)funcTable[164])(compiler, id, (nint)counterId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool CompilerBufferGetHlslCounterBuffer(SpvcCompiler compiler, uint id, uint* counterId)
		{
			byte ret = CompilerBufferGetHlslCounterBufferNative(compiler, id, counterId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool CompilerBufferGetHlslCounterBuffer(SpvcCompiler compiler, uint id, ref uint counterId)
		{
			fixed (uint* pcounterId = &counterId)
			{
				byte ret = CompilerBufferGetHlslCounterBufferNative(compiler, id, (uint*)pcounterId);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetDeclaredCapabilitiesNative(SpvcCompiler compiler, SpvCapability** capabilities, nuint* numCapabilities)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvCapability**, nuint*, SpvcResult>)funcTable[165])(compiler, capabilities, numCapabilities);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, SpvcResult>)funcTable[165])(compiler, (nint)capabilities, (nint)numCapabilities);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static SpvcResult CompilerGetDeclaredCapabilities(SpvcCompiler compiler, SpvCapability** capabilities, nuint* numCapabilities)
		{
			SpvcResult ret = CompilerGetDeclaredCapabilitiesNative(compiler, capabilities, numCapabilities);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static SpvcResult CompilerGetDeclaredCapabilities(SpvcCompiler compiler, SpvCapability** capabilities, ref nuint numCapabilities)
		{
			fixed (nuint* pnumCapabilities = &numCapabilities)
			{
				SpvcResult ret = CompilerGetDeclaredCapabilitiesNative(compiler, capabilities, (nuint*)pnumCapabilities);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetDeclaredExtensionsNative(SpvcCompiler compiler, byte*** extensions, nuint* numExtensions)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte***, nuint*, SpvcResult>)funcTable[166])(compiler, extensions, numExtensions);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, SpvcResult>)funcTable[166])(compiler, (nint)extensions, (nint)numExtensions);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static SpvcResult CompilerGetDeclaredExtensions(SpvcCompiler compiler, byte*** extensions, nuint* numExtensions)
		{
			SpvcResult ret = CompilerGetDeclaredExtensionsNative(compiler, extensions, numExtensions);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static SpvcResult CompilerGetDeclaredExtensions(SpvcCompiler compiler, ref byte** extensions, nuint* numExtensions)
		{
			fixed (byte*** pextensions = &extensions)
			{
				SpvcResult ret = CompilerGetDeclaredExtensionsNative(compiler, (byte***)pextensions, numExtensions);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static SpvcResult CompilerGetDeclaredExtensions(SpvcCompiler compiler, byte*** extensions, ref nuint numExtensions)
		{
			fixed (nuint* pnumExtensions = &numExtensions)
			{
				SpvcResult ret = CompilerGetDeclaredExtensionsNative(compiler, extensions, (nuint*)pnumExtensions);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static SpvcResult CompilerGetDeclaredExtensions(SpvcCompiler compiler, ref byte** extensions, ref nuint numExtensions)
		{
			fixed (byte*** pextensions = &extensions)
			{
				fixed (nuint* pnumExtensions = &numExtensions)
				{
					SpvcResult ret = CompilerGetDeclaredExtensionsNative(compiler, (byte***)pextensions, (nuint*)pnumExtensions);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* CompilerGetRemappedDeclaredBlockNameNative(SpvcCompiler compiler, uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte*>)funcTable[167])(compiler, id);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint>)funcTable[167])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static byte* CompilerGetRemappedDeclaredBlockName(SpvcCompiler compiler, uint id)
		{
			byte* ret = CompilerGetRemappedDeclaredBlockNameNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static string CompilerGetRemappedDeclaredBlockNameS(SpvcCompiler compiler, uint id)
		{
			string ret = Utils.DecodeStringUTF8(CompilerGetRemappedDeclaredBlockNameNative(compiler, id));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetBufferBlockDecorationsNative(SpvcCompiler compiler, uint id, SpvDecoration** decorations, nuint* numDecorations)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration**, nuint*, SpvcResult>)funcTable[168])(compiler, id, decorations, numDecorations);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint, nint, SpvcResult>)funcTable[168])(compiler, id, (nint)decorations, (nint)numDecorations);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static SpvcResult CompilerGetBufferBlockDecorations(SpvcCompiler compiler, uint id, SpvDecoration** decorations, nuint* numDecorations)
		{
			SpvcResult ret = CompilerGetBufferBlockDecorationsNative(compiler, id, decorations, numDecorations);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static SpvcResult CompilerGetBufferBlockDecorations(SpvcCompiler compiler, uint id, SpvDecoration** decorations, ref nuint numDecorations)
		{
			fixed (nuint* pnumDecorations = &numDecorations)
			{
				SpvcResult ret = CompilerGetBufferBlockDecorationsNative(compiler, id, decorations, (nuint*)pnumDecorations);
				return ret;
			}
		}

	}
}
