// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SPIRVCross
{
	public unsafe partial class SPIRV
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_array_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerTypeStructMemberArrayStride([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint stride)
		{
			fixed (uint* pstride = &stride)
			{
				SpvcResult ret = CompilerTypeStructMemberArrayStrideNative(compiler, type, index, (uint*)pstride);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_matrix_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerTypeStructMemberMatrixStrideNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* stride)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, uint, uint*, SpvcResult>)funcTable[126])(compiler, type, index, stride);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, uint, nint, SpvcResult>)funcTable[126])(compiler, type, index, (nint)stride);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_matrix_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerTypeStructMemberMatrixStride([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* stride)
		{
			SpvcResult ret = CompilerTypeStructMemberMatrixStrideNative(compiler, type, index, stride);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_matrix_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerTypeStructMemberMatrixStride([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint stride)
		{
			fixed (uint* pstride = &stride)
			{
				SpvcResult ret = CompilerTypeStructMemberMatrixStrideNative(compiler, type, index, (uint*)pstride);
				return ret;
			}
		}

		/// <summary>
		/// Workaround helper functions.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_build_dummy_sampler_for_combined_images")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerBuildDummySamplerForCombinedImagesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id *")] uint* id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint*, SpvcResult>)funcTable[127])(compiler, id);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[127])(compiler, (nint)id);
			#endif
		}

		/// <summary>
		/// Workaround helper functions.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_build_dummy_sampler_for_combined_images")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerBuildDummySamplerForCombinedImages([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id *")] uint* id)
		{
			SpvcResult ret = CompilerBuildDummySamplerForCombinedImagesNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// Workaround helper functions.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_build_dummy_sampler_for_combined_images")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerBuildDummySamplerForCombinedImages([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id *")] ref uint id)
		{
			fixed (uint* pid = &id)
			{
				SpvcResult ret = CompilerBuildDummySamplerForCombinedImagesNative(compiler, (uint*)pid);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_build_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerBuildCombinedImageSamplersNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcResult>)funcTable[128])(compiler);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcResult>)funcTable[128])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_build_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerBuildCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			SpvcResult ret = CompilerBuildCombinedImageSamplersNative(compiler);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetCombinedImageSamplersNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "spvc_combined_image_sampler const * *")] SpvcCombinedImageSampler** samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numSamplers)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcCombinedImageSampler**, nuint*, SpvcResult>)funcTable[129])(compiler, samplers, numSamplers);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, SpvcResult>)funcTable[129])(compiler, (nint)samplers, (nint)numSamplers);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "spvc_combined_image_sampler const * *")] SpvcCombinedImageSampler** samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numSamplers)
		{
			SpvcResult ret = CompilerGetCombinedImageSamplersNative(compiler, samplers, numSamplers);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "spvc_combined_image_sampler const * *")] ref SpvcCombinedImageSampler* samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numSamplers)
		{
			fixed (SpvcCombinedImageSampler** psamplers = &samplers)
			{
				SpvcResult ret = CompilerGetCombinedImageSamplersNative(compiler, (SpvcCombinedImageSampler**)psamplers, numSamplers);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "spvc_combined_image_sampler const * *")] SpvcCombinedImageSampler** samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numSamplers)
		{
			fixed (nuint* pnumSamplers = &numSamplers)
			{
				SpvcResult ret = CompilerGetCombinedImageSamplersNative(compiler, samplers, (nuint*)pnumSamplers);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_combined_image_samplers")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetCombinedImageSamplers([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "samplers")] [NativeName(NativeNameType.Type, "spvc_combined_image_sampler const * *")] ref SpvcCombinedImageSampler* samplers, [NativeName(NativeNameType.Param, "num_samplers")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numSamplers)
		{
			fixed (SpvcCombinedImageSampler** psamplers = &samplers)
			{
				fixed (nuint* pnumSamplers = &numSamplers)
				{
					SpvcResult ret = CompilerGetCombinedImageSamplersNative(compiler, (SpvcCombinedImageSampler**)psamplers, (nuint*)pnumSamplers);
					return ret;
				}
			}
		}

		/// <summary>
		/// Constants<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetSpecializationConstantsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "spvc_specialization_constant const * *")] SpvcSpecializationConstant** constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numConstants)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcSpecializationConstant**, nuint*, SpvcResult>)funcTable[130])(compiler, constants, numConstants);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, SpvcResult>)funcTable[130])(compiler, (nint)constants, (nint)numConstants);
			#endif
		}

		/// <summary>
		/// Constants<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "spvc_specialization_constant const * *")] SpvcSpecializationConstant** constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numConstants)
		{
			SpvcResult ret = CompilerGetSpecializationConstantsNative(compiler, constants, numConstants);
			return ret;
		}

		/// <summary>
		/// Constants<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "spvc_specialization_constant const * *")] ref SpvcSpecializationConstant* constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numConstants)
		{
			fixed (SpvcSpecializationConstant** pconstants = &constants)
			{
				SpvcResult ret = CompilerGetSpecializationConstantsNative(compiler, (SpvcSpecializationConstant**)pconstants, numConstants);
				return ret;
			}
		}

		/// <summary>
		/// Constants<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "spvc_specialization_constant const * *")] SpvcSpecializationConstant** constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numConstants)
		{
			fixed (nuint* pnumConstants = &numConstants)
			{
				SpvcResult ret = CompilerGetSpecializationConstantsNative(compiler, constants, (nuint*)pnumConstants);
				return ret;
			}
		}

		/// <summary>
		/// Constants<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constants")] [NativeName(NativeNameType.Type, "spvc_specialization_constant const * *")] ref SpvcSpecializationConstant* constants, [NativeName(NativeNameType.Param, "num_constants")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numConstants)
		{
			fixed (SpvcSpecializationConstant** pconstants = &constants)
			{
				fixed (nuint* pnumConstants = &numConstants)
				{
					SpvcResult ret = CompilerGetSpecializationConstantsNative(compiler, (SpvcSpecializationConstant**)pconstants, (nuint*)pnumConstants);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_constant_handle")]
		[return: NativeName(NativeNameType.Type, "spvc_constant")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcConstant CompilerGetConstantHandleNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_constant_id")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcConstant>)funcTable[131])(compiler, id);
			#else
			return (SpvcConstant)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcConstant>)funcTable[131])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_constant_handle")]
		[return: NativeName(NativeNameType.Type, "spvc_constant")]
		public static SpvcConstant CompilerGetConstantHandle([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_constant_id")] uint id)
		{
			SpvcConstant ret = CompilerGetConstantHandleNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CompilerGetWorkGroupSizeSpecializationConstantsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* z)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcSpecializationConstant*, SpvcSpecializationConstant*, SpvcSpecializationConstant*, uint>)funcTable[132])(compiler, x, y, z);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, nint, uint>)funcTable[132])(compiler, (nint)x, (nint)y, (nint)z);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint CompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* z)
		{
			uint ret = CompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, x, y, z);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint CompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				uint ret = CompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, (SpvcSpecializationConstant*)px, y, z);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint CompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* z)
		{
			fixed (SpvcSpecializationConstant* py = &y)
			{
				uint ret = CompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, x, (SpvcSpecializationConstant*)py, z);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint CompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				fixed (SpvcSpecializationConstant* py = &y)
				{
					uint ret = CompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, (SpvcSpecializationConstant*)px, (SpvcSpecializationConstant*)py, z);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint CompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* pz = &z)
			{
				uint ret = CompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, x, y, (SpvcSpecializationConstant*)pz);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint CompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				fixed (SpvcSpecializationConstant* pz = &z)
				{
					uint ret = CompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, (SpvcSpecializationConstant*)px, y, (SpvcSpecializationConstant*)pz);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint CompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] SpvcSpecializationConstant* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* py = &y)
			{
				fixed (SpvcSpecializationConstant* pz = &z)
				{
					uint ret = CompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, x, (SpvcSpecializationConstant*)py, (SpvcSpecializationConstant*)pz);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_work_group_size_specialization_constants")]
		[return: NativeName(NativeNameType.Type, "spvc_constant_id")]
		public static uint CompilerGetWorkGroupSizeSpecializationConstants([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "spvc_specialization_constant *")] ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				fixed (SpvcSpecializationConstant* py = &y)
				{
					fixed (SpvcSpecializationConstant* pz = &z)
					{
						uint ret = CompilerGetWorkGroupSizeSpecializationConstantsNative(compiler, (SpvcSpecializationConstant*)px, (SpvcSpecializationConstant*)py, (SpvcSpecializationConstant*)pz);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Buffer ranges<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetActiveBufferRangesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "spvc_buffer_range const * *")] SpvcBufferRange** ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcBufferRange**, nuint*, SpvcResult>)funcTable[133])(compiler, id, ranges, numRanges);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint, nint, SpvcResult>)funcTable[133])(compiler, id, (nint)ranges, (nint)numRanges);
			#endif
		}

		/// <summary>
		/// Buffer ranges<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetActiveBufferRanges([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "spvc_buffer_range const * *")] SpvcBufferRange** ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numRanges)
		{
			SpvcResult ret = CompilerGetActiveBufferRangesNative(compiler, id, ranges, numRanges);
			return ret;
		}

		/// <summary>
		/// Buffer ranges<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetActiveBufferRanges([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "spvc_buffer_range const * *")] ref SpvcBufferRange* ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numRanges)
		{
			fixed (SpvcBufferRange** pranges = &ranges)
			{
				SpvcResult ret = CompilerGetActiveBufferRangesNative(compiler, id, (SpvcBufferRange**)pranges, numRanges);
				return ret;
			}
		}

		/// <summary>
		/// Buffer ranges<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetActiveBufferRanges([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "spvc_buffer_range const * *")] SpvcBufferRange** ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numRanges)
		{
			fixed (nuint* pnumRanges = &numRanges)
			{
				SpvcResult ret = CompilerGetActiveBufferRangesNative(compiler, id, ranges, (nuint*)pnumRanges);
				return ret;
			}
		}

		/// <summary>
		/// Buffer ranges<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_buffer_ranges")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetActiveBufferRanges([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "spvc_buffer_range const * *")] ref SpvcBufferRange* ranges, [NativeName(NativeNameType.Param, "num_ranges")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numRanges)
		{
			fixed (SpvcBufferRange** pranges = &ranges)
			{
				fixed (nuint* pnumRanges = &numRanges)
				{
					SpvcResult ret = CompilerGetActiveBufferRangesNative(compiler, id, (SpvcBufferRange**)pranges, (nuint*)pnumRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// No stdint.h until C99, sigh :(<br/>
		/// For smaller types, the result is sign or zero-extended as appropriate.<br/>
		/// Maps to C++ API.<br/>
		/// TODO: The SPIRConstant query interface and modification interface is not quite complete.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp16")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float ConstantGetScalarFp16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, float>)funcTable[134])(constant, column, row);
			#else
			return (float)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, float>)funcTable[134])(constant, column, row);
			#endif
		}

		/// <summary>
		/// No stdint.h until C99, sigh :(<br/>
		/// For smaller types, the result is sign or zero-extended as appropriate.<br/>
		/// Maps to C++ API.<br/>
		/// TODO: The SPIRConstant query interface and modification interface is not quite complete.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp16")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ConstantGetScalarFp16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			float ret = ConstantGetScalarFp16Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp32")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float ConstantGetScalarFp32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, float>)funcTable[135])(constant, column, row);
			#else
			return (float)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, float>)funcTable[135])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp32")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ConstantGetScalarFp32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			float ret = ConstantGetScalarFp32Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp64")]
		[return: NativeName(NativeNameType.Type, "double")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double ConstantGetScalarFp64Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, double>)funcTable[136])(constant, column, row);
			#else
			return (double)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, double>)funcTable[136])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_fp64")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double ConstantGetScalarFp64([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			double ret = ConstantGetScalarFp64Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u32")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint ConstantGetScalarU32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint>)funcTable[137])(constant, column, row);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint>)funcTable[137])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u32")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ConstantGetScalarU32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			uint ret = ConstantGetScalarU32Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i32")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ConstantGetScalarI32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int>)funcTable[138])(constant, column, row);
			#else
			return (int)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int>)funcTable[138])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i32")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ConstantGetScalarI32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			int ret = ConstantGetScalarI32Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u16")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint ConstantGetScalarU16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint>)funcTable[139])(constant, column, row);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint>)funcTable[139])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u16")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ConstantGetScalarU16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			uint ret = ConstantGetScalarU16Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i16")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ConstantGetScalarI16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int>)funcTable[140])(constant, column, row);
			#else
			return (int)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int>)funcTable[140])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i16")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ConstantGetScalarI16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			int ret = ConstantGetScalarI16Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u8")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint ConstantGetScalarU8Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint>)funcTable[141])(constant, column, row);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint>)funcTable[141])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_u8")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ConstantGetScalarU8([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			uint ret = ConstantGetScalarU8Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i8")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ConstantGetScalarI8Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int>)funcTable[142])(constant, column, row);
			#else
			return (int)((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int>)funcTable[142])(constant, column, row);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_scalar_i8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ConstantGetScalarI8([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row)
		{
			int ret = ConstantGetScalarI8Native(constant, column, row);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantGetSubconstantsNative([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "spvc_constant_id const * *")] uint** constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t *")] nuint* count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint**, nuint*, void>)funcTable[143])(constant, constituents, count);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, nint, nint, void>)funcTable[143])(constant, (nint)constituents, (nint)count);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantGetSubconstants([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "spvc_constant_id const * *")] uint** constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t *")] nuint* count)
		{
			ConstantGetSubconstantsNative(constant, constituents, count);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantGetSubconstants([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "spvc_constant_id const * *")] ref uint* constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t *")] nuint* count)
		{
			fixed (uint** pconstituents = &constituents)
			{
				ConstantGetSubconstantsNative(constant, (uint**)pconstituents, count);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantGetSubconstants([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "spvc_constant_id const * *")] uint** constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint count)
		{
			fixed (nuint* pcount = &count)
			{
				ConstantGetSubconstantsNative(constant, constituents, (nuint*)pcount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_subconstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantGetSubconstants([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "constituents")] [NativeName(NativeNameType.Type, "spvc_constant_id const * *")] ref uint* constituents, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint count)
		{
			fixed (uint** pconstituents = &constituents)
			{
				fixed (nuint* pcount = &count)
				{
					ConstantGetSubconstantsNative(constant, (uint**)pconstituents, (nuint*)pcount);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint ConstantGetTypeNative([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcConstant, uint>)funcTable[144])(constant);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcConstant, uint>)funcTable[144])(constant);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_get_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		public static uint ConstantGetType([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant)
		{
			uint ret = ConstantGetTypeNative(constant);
			return ret;
		}

		/// <summary>
		/// C implementation of the C++ api.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp16")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarFp16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned short")] ushort value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ushort, void>)funcTable[145])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ushort, void>)funcTable[145])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// C implementation of the C++ api.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantSetScalarFp16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned short")] ushort value)
		{
			ConstantSetScalarFp16Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp32")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarFp32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, float, void>)funcTable[146])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, float, void>)funcTable[146])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantSetScalarFp32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			ConstantSetScalarFp32Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp64")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarFp64Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "double")] double value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, double, void>)funcTable[147])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, double, void>)funcTable[147])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_fp64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantSetScalarFp64([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "double")] double value)
		{
			ConstantSetScalarFp64Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u32")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarU32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint, void>)funcTable[148])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, uint, void>)funcTable[148])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantSetScalarU32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value)
		{
			ConstantSetScalarU32Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i32")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarI32Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int, void>)funcTable[149])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, int, void>)funcTable[149])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantSetScalarI32([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			ConstantSetScalarI32Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u16")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarU16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned short")] ushort value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ushort, void>)funcTable[150])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, ushort, void>)funcTable[150])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantSetScalarU16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned short")] ushort value)
		{
			ConstantSetScalarU16Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i16")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarI16Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "short")] short value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, short, void>)funcTable[151])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, short, void>)funcTable[151])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantSetScalarI16([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "short")] short value)
		{
			ConstantSetScalarI16Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u8")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarU8Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned char")] byte value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, byte, void>)funcTable[152])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, byte, void>)funcTable[152])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_u8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantSetScalarU8([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned char")] byte value)
		{
			ConstantSetScalarU8Native(constant, column, row, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i8")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConstantSetScalarI8Native([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char")] byte value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, byte, void>)funcTable[153])(constant, column, row, value);
			#else
			((delegate* unmanaged[Cdecl]<SpvcConstant, uint, uint, byte, void>)funcTable[153])(constant, column, row, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_constant_set_scalar_i8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ConstantSetScalarI8([NativeName(NativeNameType.Param, "constant")] [NativeName(NativeNameType.Type, "spvc_constant")] SpvcConstant constant, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "unsigned int")] uint column, [NativeName(NativeNameType.Param, "row")] [NativeName(NativeNameType.Type, "unsigned int")] uint row, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char")] byte value)
		{
			ConstantSetScalarI8Native(constant, column, row, value);
		}

		/// <summary>
		/// Misc reflection<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_binary_offset_for_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerGetBinaryOffsetForDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "word_offset")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* wordOffset)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, uint*, byte>)funcTable[154])(compiler, id, decoration, wordOffset);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, nint, byte>)funcTable[154])(compiler, id, decoration, (nint)wordOffset);
			#endif
		}

		/// <summary>
		/// Misc reflection<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_binary_offset_for_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerGetBinaryOffsetForDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "word_offset")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* wordOffset)
		{
			byte ret = CompilerGetBinaryOffsetForDecorationNative(compiler, id, decoration, wordOffset);
			return ret != 0;
		}

		/// <summary>
		/// Misc reflection<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_binary_offset_for_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerGetBinaryOffsetForDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "word_offset")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint wordOffset)
		{
			fixed (uint* pwordOffset = &wordOffset)
			{
				byte ret = CompilerGetBinaryOffsetForDecorationNative(compiler, id, decoration, (uint*)pwordOffset);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_is_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerBufferIsHlslCounterBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[155])(compiler, id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[155])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_is_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerBufferIsHlslCounterBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			byte ret = CompilerBufferIsHlslCounterBufferNative(compiler, id);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_get_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerBufferGetHlslCounterBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "counter_id")] [NativeName(NativeNameType.Type, "spvc_variable_id *")] uint* counterId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint*, byte>)funcTable[156])(compiler, id, counterId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint, byte>)funcTable[156])(compiler, id, (nint)counterId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_get_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerBufferGetHlslCounterBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "counter_id")] [NativeName(NativeNameType.Type, "spvc_variable_id *")] uint* counterId)
		{
			byte ret = CompilerBufferGetHlslCounterBufferNative(compiler, id, counterId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_buffer_get_hlsl_counter_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerBufferGetHlslCounterBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "counter_id")] [NativeName(NativeNameType.Type, "spvc_variable_id *")] ref uint counterId)
		{
			fixed (uint* pcounterId = &counterId)
			{
				byte ret = CompilerBufferGetHlslCounterBufferNative(compiler, id, (uint*)pcounterId);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_capabilities")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetDeclaredCapabilitiesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "capabilities")] [NativeName(NativeNameType.Type, "SpvCapability const * *")] SpvCapability** capabilities, [NativeName(NativeNameType.Param, "num_capabilities")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numCapabilities)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvCapability**, nuint*, SpvcResult>)funcTable[157])(compiler, capabilities, numCapabilities);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, SpvcResult>)funcTable[157])(compiler, (nint)capabilities, (nint)numCapabilities);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_capabilities")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredCapabilities([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "capabilities")] [NativeName(NativeNameType.Type, "SpvCapability const * *")] SpvCapability** capabilities, [NativeName(NativeNameType.Param, "num_capabilities")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numCapabilities)
		{
			SpvcResult ret = CompilerGetDeclaredCapabilitiesNative(compiler, capabilities, numCapabilities);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_capabilities")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredCapabilities([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "capabilities")] [NativeName(NativeNameType.Type, "SpvCapability const * *")] SpvCapability** capabilities, [NativeName(NativeNameType.Param, "num_capabilities")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numCapabilities)
		{
			fixed (nuint* pnumCapabilities = &numCapabilities)
			{
				SpvcResult ret = CompilerGetDeclaredCapabilitiesNative(compiler, capabilities, (nuint*)pnumCapabilities);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetDeclaredExtensionsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "char const * * *")] byte*** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numExtensions)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte***, nuint*, SpvcResult>)funcTable[158])(compiler, extensions, numExtensions);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, SpvcResult>)funcTable[158])(compiler, (nint)extensions, (nint)numExtensions);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredExtensions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "char const * * *")] byte*** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numExtensions)
		{
			SpvcResult ret = CompilerGetDeclaredExtensionsNative(compiler, extensions, numExtensions);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredExtensions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "char const * * *")] ref byte** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numExtensions)
		{
			fixed (byte*** pextensions = &extensions)
			{
				SpvcResult ret = CompilerGetDeclaredExtensionsNative(compiler, (byte***)pextensions, numExtensions);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredExtensions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "char const * * *")] byte*** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numExtensions)
		{
			fixed (nuint* pnumExtensions = &numExtensions)
			{
				SpvcResult ret = CompilerGetDeclaredExtensionsNative(compiler, extensions, (nuint*)pnumExtensions);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_extensions")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredExtensions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "extensions")] [NativeName(NativeNameType.Type, "char const * * *")] ref byte** extensions, [NativeName(NativeNameType.Param, "num_extensions")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numExtensions)
		{
			fixed (byte*** pextensions = &extensions)
			{
				fixed (nuint* pnumExtensions = &numExtensions)
				{
					SpvcResult ret = CompilerGetDeclaredExtensionsNative(compiler, (byte***)pextensions, (nuint*)pnumExtensions);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_remapped_declared_block_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* CompilerGetRemappedDeclaredBlockNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte*>)funcTable[159])(compiler, id);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint>)funcTable[159])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_remapped_declared_block_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerGetRemappedDeclaredBlockName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			byte* ret = CompilerGetRemappedDeclaredBlockNameNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_remapped_declared_block_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerGetRemappedDeclaredBlockNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			string ret = Utils.DecodeStringUTF8(CompilerGetRemappedDeclaredBlockNameNative(compiler, id));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_buffer_block_decorations")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetBufferBlockDecorationsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decorations")] [NativeName(NativeNameType.Type, "SpvDecoration const * *")] SpvDecoration** decorations, [NativeName(NativeNameType.Param, "num_decorations")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numDecorations)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration**, nuint*, SpvcResult>)funcTable[160])(compiler, id, decorations, numDecorations);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint, nint, SpvcResult>)funcTable[160])(compiler, id, (nint)decorations, (nint)numDecorations);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_buffer_block_decorations")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetBufferBlockDecorations([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decorations")] [NativeName(NativeNameType.Type, "SpvDecoration const * *")] SpvDecoration** decorations, [NativeName(NativeNameType.Param, "num_decorations")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numDecorations)
		{
			SpvcResult ret = CompilerGetBufferBlockDecorationsNative(compiler, id, decorations, numDecorations);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_buffer_block_decorations")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetBufferBlockDecorations([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "decorations")] [NativeName(NativeNameType.Type, "SpvDecoration const * *")] SpvDecoration** decorations, [NativeName(NativeNameType.Param, "num_decorations")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numDecorations)
		{
			fixed (nuint* pnumDecorations = &numDecorations)
			{
				SpvcResult ret = CompilerGetBufferBlockDecorationsNative(compiler, id, decorations, (nuint*)pnumDecorations);
				return ret;
			}
		}

	}
}
