// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SPIRVCross
{
	public unsafe partial class SPIRV
	{
		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVersionNative([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* patch)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, uint*, uint*, void>)funcTable[0])(major, minor, patch);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[0])((nint)major, (nint)minor, (nint)patch);
			#endif
		}

		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* patch)
		{
			GetVersionNative(major, minor, patch);
		}

		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* patch)
		{
			fixed (uint* pmajor = &major)
			{
				GetVersionNative((uint*)pmajor, minor, patch);
			}
		}

		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* patch)
		{
			fixed (uint* pminor = &minor)
			{
				GetVersionNative(major, (uint*)pminor, patch);
			}
		}

		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* patch)
		{
			fixed (uint* pmajor = &major)
			{
				fixed (uint* pminor = &minor)
				{
					GetVersionNative((uint*)pmajor, (uint*)pminor, patch);
				}
			}
		}

		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint patch)
		{
			fixed (uint* ppatch = &patch)
			{
				GetVersionNative(major, minor, (uint*)ppatch);
			}
		}

		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint patch)
		{
			fixed (uint* pmajor = &major)
			{
				fixed (uint* ppatch = &patch)
				{
					GetVersionNative((uint*)pmajor, minor, (uint*)ppatch);
				}
			}
		}

		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint patch)
		{
			fixed (uint* pminor = &minor)
			{
				fixed (uint* ppatch = &patch)
				{
					GetVersionNative(major, (uint*)pminor, (uint*)ppatch);
				}
			}
		}

		/// <summary>
		/// Gets the SPVC_C_API_VERSION_* used to build this library.<br/>
		/// Can be used to check for ABI mismatch if so-versioning did not catch it.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_version")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetVersion([NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint minor, [NativeName(NativeNameType.Param, "patch")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint patch)
		{
			fixed (uint* pmajor = &major)
			{
				fixed (uint* pminor = &minor)
				{
					fixed (uint* ppatch = &patch)
					{
						GetVersionNative((uint*)pmajor, (uint*)pminor, (uint*)ppatch);
					}
				}
			}
		}

		/// <summary>
		/// Gets a human readable version string to identify which commit a particular binary was created from. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_commit_revision_and_timestamp")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetCommitRevisionAndTimestampNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*>)funcTable[1])();
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1])();
			#endif
		}

		/// <summary>
		/// Gets a human readable version string to identify which commit a particular binary was created from. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_commit_revision_and_timestamp")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetCommitRevisionAndTimestamp()
		{
			byte* ret = GetCommitRevisionAndTimestampNative();
			return ret;
		}

		/// <summary>
		/// Gets a human readable version string to identify which commit a particular binary was created from. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_get_commit_revision_and_timestamp")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetCommitRevisionAndTimestampS()
		{
			string ret = Utils.DecodeStringUTF8(GetCommitRevisionAndTimestampNative());
			return ret;
		}

		/// <summary>
		/// Initializes the vertex attribute struct.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_vertex_attribute_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MslVertexAttributeInitNative([NativeName(NativeNameType.Param, "attr")] [NativeName(NativeNameType.Type, "spvc_msl_vertex_attribute *")] SpvcMslVertexAttribute* attr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcMslVertexAttribute*, void>)funcTable[2])(attr);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[2])((nint)attr);
			#endif
		}

		/// <summary>
		/// Initializes the vertex attribute struct.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_vertex_attribute_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslVertexAttributeInit([NativeName(NativeNameType.Param, "attr")] [NativeName(NativeNameType.Type, "spvc_msl_vertex_attribute *")] SpvcMslVertexAttribute* attr)
		{
			MslVertexAttributeInitNative(attr);
		}

		/// <summary>
		/// Initializes the vertex attribute struct.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_vertex_attribute_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslVertexAttributeInit([NativeName(NativeNameType.Param, "attr")] [NativeName(NativeNameType.Type, "spvc_msl_vertex_attribute *")] ref SpvcMslVertexAttribute attr)
		{
			fixed (SpvcMslVertexAttribute* pattr = &attr)
			{
				MslVertexAttributeInitNative((SpvcMslVertexAttribute*)pattr);
			}
		}

		/// <summary>
		/// Initializes the shader input struct.<br/>
		/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MslShaderInterfaceVarInitNative([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var *")] SpvcMslShaderInterfaceVar* var)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcMslShaderInterfaceVar*, void>)funcTable[3])(var);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[3])((nint)var);
			#endif
		}

		/// <summary>
		/// Initializes the shader input struct.<br/>
		/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslShaderInterfaceVarInit([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var *")] SpvcMslShaderInterfaceVar* var)
		{
			MslShaderInterfaceVarInitNative(var);
		}

		/// <summary>
		/// Initializes the shader input struct.<br/>
		/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslShaderInterfaceVarInit([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var *")] ref SpvcMslShaderInterfaceVar var)
		{
			fixed (SpvcMslShaderInterfaceVar* pvar = &var)
			{
				MslShaderInterfaceVarInitNative((SpvcMslShaderInterfaceVar*)pvar);
			}
		}

		/// <summary>
		/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_input_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MslShaderInputInitNative([NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_input *")] SpvcMslShaderInterfaceVar* input)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcMslShaderInterfaceVar*, void>)funcTable[4])(input);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[4])((nint)input);
			#endif
		}

		/// <summary>
		/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_input_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslShaderInputInit([NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_input *")] SpvcMslShaderInterfaceVar* input)
		{
			MslShaderInputInitNative(input);
		}

		/// <summary>
		/// Deprecated. Use spvc_msl_shader_interface_var_init_2().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_input_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslShaderInputInit([NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_input *")] ref SpvcMslShaderInterfaceVar input)
		{
			fixed (SpvcMslShaderInterfaceVar* pinput = &input)
			{
				MslShaderInputInitNative((SpvcMslShaderInterfaceVar*)pinput);
			}
		}

		/// <summary>
		/// Initializes the shader interface variable struct.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init_2")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MslShaderInterfaceVarInit2Native([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2 *")] SpvcMslShaderInterfaceVar2* var)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcMslShaderInterfaceVar2*, void>)funcTable[5])(var);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[5])((nint)var);
			#endif
		}

		/// <summary>
		/// Initializes the shader interface variable struct.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init_2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslShaderInterfaceVarInit2([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2 *")] SpvcMslShaderInterfaceVar2* var)
		{
			MslShaderInterfaceVarInit2Native(var);
		}

		/// <summary>
		/// Initializes the shader interface variable struct.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_shader_interface_var_init_2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslShaderInterfaceVarInit2([NativeName(NativeNameType.Param, "var")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2 *")] ref SpvcMslShaderInterfaceVar2 var)
		{
			fixed (SpvcMslShaderInterfaceVar2* pvar = &var)
			{
				MslShaderInterfaceVarInit2Native((SpvcMslShaderInterfaceVar2*)pvar);
			}
		}

		/// <summary>
		/// Initializes the resource binding struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MslResourceBindingInitNative([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_msl_resource_binding *")] SpvcMslResourceBinding* binding)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcMslResourceBinding*, void>)funcTable[6])(binding);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[6])((nint)binding);
			#endif
		}

		/// <summary>
		/// Initializes the resource binding struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslResourceBindingInit([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_msl_resource_binding *")] SpvcMslResourceBinding* binding)
		{
			MslResourceBindingInitNative(binding);
		}

		/// <summary>
		/// Initializes the resource binding struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslResourceBindingInit([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_msl_resource_binding *")] ref SpvcMslResourceBinding binding)
		{
			fixed (SpvcMslResourceBinding* pbinding = &binding)
			{
				MslResourceBindingInitNative((SpvcMslResourceBinding*)pbinding);
			}
		}

		/// <summary>
		/// Runtime check for incompatibility. Obsolete. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_get_aux_buffer_struct_version")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint MslGetAuxBufferStructVersionNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)funcTable[7])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)funcTable[7])();
			#endif
		}

		/// <summary>
		/// Runtime check for incompatibility. Obsolete. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_get_aux_buffer_struct_version")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint MslGetAuxBufferStructVersion()
		{
			uint ret = MslGetAuxBufferStructVersionNative();
			return ret;
		}

		/// <summary>
		/// Initializes the constexpr sampler struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_constexpr_sampler_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MslConstexprSamplerInitNative([NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler *")] SpvcMslConstexprSampler* sampler)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcMslConstexprSampler*, void>)funcTable[8])(sampler);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[8])((nint)sampler);
			#endif
		}

		/// <summary>
		/// Initializes the constexpr sampler struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_constexpr_sampler_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslConstexprSamplerInit([NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler *")] SpvcMslConstexprSampler* sampler)
		{
			MslConstexprSamplerInitNative(sampler);
		}

		/// <summary>
		/// Initializes the constexpr sampler struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_constexpr_sampler_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslConstexprSamplerInit([NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler *")] ref SpvcMslConstexprSampler sampler)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				MslConstexprSamplerInitNative((SpvcMslConstexprSampler*)psampler);
			}
		}

		/// <summary>
		/// Initializes the constexpr sampler struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_sampler_ycbcr_conversion_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MslSamplerYcbcrConversionInitNative([NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion *")] SpvcMslSamplerYcbcrConversion* conv)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcMslSamplerYcbcrConversion*, void>)funcTable[9])(conv);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[9])((nint)conv);
			#endif
		}

		/// <summary>
		/// Initializes the constexpr sampler struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_sampler_ycbcr_conversion_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslSamplerYcbcrConversionInit([NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion *")] SpvcMslSamplerYcbcrConversion* conv)
		{
			MslSamplerYcbcrConversionInitNative(conv);
		}

		/// <summary>
		/// Initializes the constexpr sampler struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_msl_sampler_ycbcr_conversion_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MslSamplerYcbcrConversionInit([NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion *")] ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
			{
				MslSamplerYcbcrConversionInitNative((SpvcMslSamplerYcbcrConversion*)pconv);
			}
		}

		/// <summary>
		/// Initializes the resource binding struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_hlsl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void HlslResourceBindingInitNative([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding *")] SpvcHlslResourceBinding* binding)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcHlslResourceBinding*, void>)funcTable[10])(binding);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[10])((nint)binding);
			#endif
		}

		/// <summary>
		/// Initializes the resource binding struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_hlsl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void HlslResourceBindingInit([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding *")] SpvcHlslResourceBinding* binding)
		{
			HlslResourceBindingInitNative(binding);
		}

		/// <summary>
		/// Initializes the resource binding struct.<br/>
		/// The defaults are non-zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_hlsl_resource_binding_init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void HlslResourceBindingInit([NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding *")] ref SpvcHlslResourceBinding binding)
		{
			fixed (SpvcHlslResourceBinding* pbinding = &binding)
			{
				HlslResourceBindingInitNative((SpvcHlslResourceBinding*)pbinding);
			}
		}

		/// <summary>
		/// Context is the highest-level API construct.<br/>
		/// The context owns all memory allocations made by its child object hierarchy, including various non-opaque structs and strings.<br/>
		/// This means that the API user only has to care about one "destroy" call ever when using the C API.<br/>
		/// All pointers handed out by the APIs are only valid as long as the context<br/>
		/// is alive and spvc_context_release_allocations has not been called.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_create")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult ContextCreateNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context *")] SpvcContext* context)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcContext*, SpvcResult>)funcTable[11])(context);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<nint, SpvcResult>)funcTable[11])((nint)context);
			#endif
		}

		/// <summary>
		/// Context is the highest-level API construct.<br/>
		/// The context owns all memory allocations made by its child object hierarchy, including various non-opaque structs and strings.<br/>
		/// This means that the API user only has to care about one "destroy" call ever when using the C API.<br/>
		/// All pointers handed out by the APIs are only valid as long as the context<br/>
		/// is alive and spvc_context_release_allocations has not been called.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_create")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ContextCreate([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context *")] SpvcContext* context)
		{
			SpvcResult ret = ContextCreateNative(context);
			return ret;
		}

		/// <summary>
		/// Context is the highest-level API construct.<br/>
		/// The context owns all memory allocations made by its child object hierarchy, including various non-opaque structs and strings.<br/>
		/// This means that the API user only has to care about one "destroy" call ever when using the C API.<br/>
		/// All pointers handed out by the APIs are only valid as long as the context<br/>
		/// is alive and spvc_context_release_allocations has not been called.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_create")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ContextCreate([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context *")] ref SpvcContext context)
		{
			fixed (SpvcContext* pcontext = &context)
			{
				SpvcResult ret = ContextCreateNative((SpvcContext*)pcontext);
				return ret;
			}
		}

		/// <summary>
		/// Frees all memory allocations and objects associated with the context and its child objects. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ContextDestroyNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcContext, void>)funcTable[12])(context);
			#else
			((delegate* unmanaged[Cdecl]<SpvcContext, void>)funcTable[12])(context);
			#endif
		}

		/// <summary>
		/// Frees all memory allocations and objects associated with the context and its child objects. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ContextDestroy([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			ContextDestroyNative(context);
		}

		/// <summary>
		/// Frees all memory allocations and objects associated with the context and its child objects, but keeps the context alive. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_release_allocations")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ContextReleaseAllocationsNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcContext, void>)funcTable[13])(context);
			#else
			((delegate* unmanaged[Cdecl]<SpvcContext, void>)funcTable[13])(context);
			#endif
		}

		/// <summary>
		/// Frees all memory allocations and objects associated with the context and its child objects, but keeps the context alive. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_release_allocations")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ContextReleaseAllocations([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			ContextReleaseAllocationsNative(context);
		}

		/// <summary>
		/// Get the string for the last error which was logged. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_get_last_error_string")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ContextGetLastErrorStringNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcContext, byte*>)funcTable[14])(context);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvcContext, nint>)funcTable[14])(context);
			#endif
		}

		/// <summary>
		/// Get the string for the last error which was logged. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_get_last_error_string")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* ContextGetLastErrorString([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			byte* ret = ContextGetLastErrorStringNative(context);
			return ret;
		}

		/// <summary>
		/// Get the string for the last error which was logged. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_get_last_error_string")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string ContextGetLastErrorStringS([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context)
		{
			string ret = Utils.DecodeStringUTF8(ContextGetLastErrorStringNative(context));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_set_error_callback")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ContextSetErrorCallbackNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "cb")] [NativeName(NativeNameType.Type, "spvc_error_callback")] SpvcErrorCallback cb, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcContext, delegate*<void*, byte*, void>, void*, void>)funcTable[15])(context, (delegate*<void*, byte*, void>)Utils.GetFunctionPointerForDelegate(cb), userdata);
			#else
			((delegate* unmanaged[Cdecl]<SpvcContext, nint, nint, void>)funcTable[15])(context, (nint)Utils.GetFunctionPointerForDelegate(cb), (nint)userdata);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_set_error_callback")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ContextSetErrorCallback([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "cb")] [NativeName(NativeNameType.Type, "spvc_error_callback")] SpvcErrorCallback cb, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			ContextSetErrorCallbackNative(context, cb, userdata);
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult ContextParseSpirvNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "SpvId const *")] uint* spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] nuint wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir *")] SpvcParsedIr* parsedIr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcContext, uint*, nuint, SpvcParsedIr*, SpvcResult>)funcTable[16])(context, spirv, wordCount, parsedIr);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcContext, nint, nuint, nint, SpvcResult>)funcTable[16])(context, (nint)spirv, wordCount, (nint)parsedIr);
			#endif
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "SpvId const *")] uint* spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] nuint wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir *")] SpvcParsedIr* parsedIr)
		{
			SpvcResult ret = ContextParseSpirvNative(context, spirv, wordCount, parsedIr);
			return ret;
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "SpvId const *")] ref uint spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] nuint wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir *")] SpvcParsedIr* parsedIr)
		{
			fixed (uint* pspirv = &spirv)
			{
				SpvcResult ret = ContextParseSpirvNative(context, (uint*)pspirv, wordCount, parsedIr);
				return ret;
			}
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "SpvId const *")] uint* spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] nuint wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir *")] ref SpvcParsedIr parsedIr)
		{
			fixed (SpvcParsedIr* pparsedIr = &parsedIr)
			{
				SpvcResult ret = ContextParseSpirvNative(context, spirv, wordCount, (SpvcParsedIr*)pparsedIr);
				return ret;
			}
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_parse_spirv")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ContextParseSpirv([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "spirv")] [NativeName(NativeNameType.Type, "SpvId const *")] ref uint spirv, [NativeName(NativeNameType.Param, "word_count")] [NativeName(NativeNameType.Type, "size_t")] nuint wordCount, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir *")] ref SpvcParsedIr parsedIr)
		{
			fixed (uint* pspirv = &spirv)
			{
				fixed (SpvcParsedIr* pparsedIr = &parsedIr)
				{
					SpvcResult ret = ContextParseSpirvNative(context, (uint*)pspirv, wordCount, (SpvcParsedIr*)pparsedIr);
					return ret;
				}
			}
		}

		/// <summary>
		/// Create a compiler backend. Capture mode controls if we construct by copy or move semantics.<br/>
		/// It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_create_compiler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult ContextCreateCompilerNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "backend")] [NativeName(NativeNameType.Type, "spvc_backend")] SpvcBackend backend, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir")] SpvcParsedIr parsedIr, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "spvc_capture_mode")] SpvcCaptureMode mode, [NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler *")] SpvcCompiler* compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcContext, SpvcBackend, SpvcParsedIr, SpvcCaptureMode, SpvcCompiler*, SpvcResult>)funcTable[17])(context, backend, parsedIr, mode, compiler);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcContext, SpvcBackend, SpvcParsedIr, SpvcCaptureMode, nint, SpvcResult>)funcTable[17])(context, backend, parsedIr, mode, (nint)compiler);
			#endif
		}

		/// <summary>
		/// Create a compiler backend. Capture mode controls if we construct by copy or move semantics.<br/>
		/// It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_create_compiler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ContextCreateCompiler([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "backend")] [NativeName(NativeNameType.Type, "spvc_backend")] SpvcBackend backend, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir")] SpvcParsedIr parsedIr, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "spvc_capture_mode")] SpvcCaptureMode mode, [NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler *")] SpvcCompiler* compiler)
		{
			SpvcResult ret = ContextCreateCompilerNative(context, backend, parsedIr, mode, compiler);
			return ret;
		}

		/// <summary>
		/// Create a compiler backend. Capture mode controls if we construct by copy or move semantics.<br/>
		/// It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_context_create_compiler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ContextCreateCompiler([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "spvc_context")] SpvcContext context, [NativeName(NativeNameType.Param, "backend")] [NativeName(NativeNameType.Type, "spvc_backend")] SpvcBackend backend, [NativeName(NativeNameType.Param, "parsed_ir")] [NativeName(NativeNameType.Type, "spvc_parsed_ir")] SpvcParsedIr parsedIr, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "spvc_capture_mode")] SpvcCaptureMode mode, [NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler *")] ref SpvcCompiler compiler)
		{
			fixed (SpvcCompiler* pcompiler = &compiler)
			{
				SpvcResult ret = ContextCreateCompilerNative(context, backend, parsedIr, mode, (SpvcCompiler*)pcompiler);
				return ret;
			}
		}

		/// <summary>
		/// Maps directly to C++ API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_current_id_bound")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CompilerGetCurrentIdBoundNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint>)funcTable[18])(compiler);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint>)funcTable[18])(compiler);
			#endif
		}

		/// <summary>
		/// Maps directly to C++ API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_current_id_bound")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint CompilerGetCurrentIdBound([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			uint ret = CompilerGetCurrentIdBoundNative(compiler);
			return ret;
		}

		/// <summary>
		/// Create compiler options, which will initialize defaults. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerCreateCompilerOptionsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options *")] SpvcCompilerOptions* options)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcCompilerOptions*, SpvcResult>)funcTable[19])(compiler, options);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[19])(compiler, (nint)options);
			#endif
		}

		/// <summary>
		/// Create compiler options, which will initialize defaults. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerCreateCompilerOptions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options *")] SpvcCompilerOptions* options)
		{
			SpvcResult ret = CompilerCreateCompilerOptionsNative(compiler, options);
			return ret;
		}

		/// <summary>
		/// Create compiler options, which will initialize defaults. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerCreateCompilerOptions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options *")] ref SpvcCompilerOptions options)
		{
			fixed (SpvcCompilerOptions* poptions = &options)
			{
				SpvcResult ret = CompilerCreateCompilerOptionsNative(compiler, (SpvcCompilerOptions*)poptions);
				return ret;
			}
		}

		/// <summary>
		/// Override options. Will return error if e.g. MSL options are used for the HLSL backend, etc. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_options_set_bool")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerOptionsSetBoolNative([NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options, [NativeName(NativeNameType.Param, "option")] [NativeName(NativeNameType.Type, "spvc_compiler_option")] SpvcCompilerOption option, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "spvc_bool")] byte value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompilerOptions, SpvcCompilerOption, byte, SpvcResult>)funcTable[20])(options, option, value);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompilerOptions, SpvcCompilerOption, byte, SpvcResult>)funcTable[20])(options, option, value);
			#endif
		}

		/// <summary>
		/// Override options. Will return error if e.g. MSL options are used for the HLSL backend, etc. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_options_set_bool")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerOptionsSetBool([NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options, [NativeName(NativeNameType.Param, "option")] [NativeName(NativeNameType.Type, "spvc_compiler_option")] SpvcCompilerOption option, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "spvc_bool")] bool value)
		{
			SpvcResult ret = CompilerOptionsSetBoolNative(options, option, value ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_options_set_uint")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerOptionsSetUintNative([NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options, [NativeName(NativeNameType.Param, "option")] [NativeName(NativeNameType.Type, "spvc_compiler_option")] SpvcCompilerOption option, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompilerOptions, SpvcCompilerOption, uint, SpvcResult>)funcTable[21])(options, option, value);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompilerOptions, SpvcCompilerOption, uint, SpvcResult>)funcTable[21])(options, option, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_options_set_uint")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerOptionsSetUint([NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options, [NativeName(NativeNameType.Param, "option")] [NativeName(NativeNameType.Type, "spvc_compiler_option")] SpvcCompilerOption option, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value)
		{
			SpvcResult ret = CompilerOptionsSetUintNative(options, option, value);
			return ret;
		}

		/// <summary>
		/// Set compiler options. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_install_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerInstallCompilerOptionsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcCompilerOptions, SpvcResult>)funcTable[22])(compiler, options);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcCompilerOptions, SpvcResult>)funcTable[22])(compiler, options);
			#endif
		}

		/// <summary>
		/// Set compiler options. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_install_compiler_options")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerInstallCompilerOptions([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "options")] [NativeName(NativeNameType.Type, "spvc_compiler_options")] SpvcCompilerOptions options)
		{
			SpvcResult ret = CompilerInstallCompilerOptionsNative(compiler, options);
			return ret;
		}

		/// <summary>
		/// Compile IR into a string. *source is owned by the context, and caller must not free it themselves. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_compile")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerCompileNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "char const * *")] byte** source)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte**, SpvcResult>)funcTable[23])(compiler, source);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[23])(compiler, (nint)source);
			#endif
		}

		/// <summary>
		/// Compile IR into a string. *source is owned by the context, and caller must not free it themselves. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_compile")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerCompile([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "char const * *")] byte** source)
		{
			SpvcResult ret = CompilerCompileNative(compiler, source);
			return ret;
		}

		/// <summary>
		/// Compile IR into a string. *source is owned by the context, and caller must not free it themselves. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_compile")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerCompile([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* source)
		{
			fixed (byte** psource = &source)
			{
				SpvcResult ret = CompilerCompileNative(compiler, (byte**)psource);
				return ret;
			}
		}

		/// <summary>
		/// Maps to C++ API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_add_header_line")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerAddHeaderLineNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "char const *")] byte* line)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte*, SpvcResult>)funcTable[24])(compiler, line);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[24])(compiler, (nint)line);
			#endif
		}

		/// <summary>
		/// Maps to C++ API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_add_header_line")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerAddHeaderLine([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "char const *")] byte* line)
		{
			SpvcResult ret = CompilerAddHeaderLineNative(compiler, line);
			return ret;
		}

		/// <summary>
		/// Maps to C++ API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_add_header_line")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerAddHeaderLine([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "char const *")] ref byte line)
		{
			fixed (byte* pline = &line)
			{
				SpvcResult ret = CompilerAddHeaderLineNative(compiler, (byte*)pline);
				return ret;
			}
		}

		/// <summary>
		/// Maps to C++ API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_add_header_line")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerAddHeaderLine([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> line)
		{
			fixed (byte* pline = line)
			{
				SpvcResult ret = CompilerAddHeaderLineNative(compiler, (byte*)pline);
				return ret;
			}
		}

		/// <summary>
		/// Maps to C++ API. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_add_header_line")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerAddHeaderLine([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "char const *")] string line)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (line != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(line);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(line, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = CompilerAddHeaderLineNative(compiler, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_require_extension")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerRequireExtensionNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "ext")] [NativeName(NativeNameType.Type, "char const *")] byte* ext)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte*, SpvcResult>)funcTable[25])(compiler, ext);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[25])(compiler, (nint)ext);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_require_extension")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRequireExtension([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "ext")] [NativeName(NativeNameType.Type, "char const *")] byte* ext)
		{
			SpvcResult ret = CompilerRequireExtensionNative(compiler, ext);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_require_extension")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRequireExtension([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "ext")] [NativeName(NativeNameType.Type, "char const *")] ref byte ext)
		{
			fixed (byte* pext = &ext)
			{
				SpvcResult ret = CompilerRequireExtensionNative(compiler, (byte*)pext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_require_extension")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRequireExtension([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "ext")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> ext)
		{
			fixed (byte* pext = ext)
			{
				SpvcResult ret = CompilerRequireExtensionNative(compiler, (byte*)pext);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_require_extension")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRequireExtension([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "ext")] [NativeName(NativeNameType.Type, "char const *")] string ext)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (ext != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(ext);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(ext, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = CompilerRequireExtensionNative(compiler, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_flatten_buffer_block")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerFlattenBufferBlockNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcResult>)funcTable[26])(compiler, id);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcResult>)funcTable[26])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_flatten_buffer_block")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerFlattenBufferBlock([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			SpvcResult ret = CompilerFlattenBufferBlockNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_variable_is_depth_or_compare")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerVariableIsDepthOrCompareNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[27])(compiler, id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[27])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_variable_is_depth_or_compare")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerVariableIsDepthOrCompare([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			byte ret = CompilerVariableIsDepthOrCompareNative(compiler, id);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_mask_stage_output_by_location")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMaskStageOutputByLocationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location, [NativeName(NativeNameType.Param, "component")] [NativeName(NativeNameType.Type, "unsigned int")] uint component)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvcResult>)funcTable[28])(compiler, location, component);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvcResult>)funcTable[28])(compiler, location, component);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_mask_stage_output_by_location")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMaskStageOutputByLocation([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location, [NativeName(NativeNameType.Param, "component")] [NativeName(NativeNameType.Type, "unsigned int")] uint component)
		{
			SpvcResult ret = CompilerMaskStageOutputByLocationNative(compiler, location, component);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_mask_stage_output_by_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMaskStageOutputByBuiltinNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "builtin")] [NativeName(NativeNameType.Type, "SpvBuiltIn")] SpvBuiltIn builtin)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvBuiltIn, SpvcResult>)funcTable[29])(compiler, builtin);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvBuiltIn, SpvcResult>)funcTable[29])(compiler, builtin);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_mask_stage_output_by_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMaskStageOutputByBuiltin([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "builtin")] [NativeName(NativeNameType.Type, "SpvBuiltIn")] SpvBuiltIn builtin)
		{
			SpvcResult ret = CompilerMaskStageOutputByBuiltinNative(compiler, builtin);
			return ret;
		}

		/// <summary>
		/// HLSL specifics.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_root_constants_layout")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerHlslSetRootConstantsLayoutNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constant_info")] [NativeName(NativeNameType.Type, "spvc_hlsl_root_constants const *")] SpvcHlslRootConstants* constantInfo, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcHlslRootConstants*, nuint, SpvcResult>)funcTable[30])(compiler, constantInfo, count);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nuint, SpvcResult>)funcTable[30])(compiler, (nint)constantInfo, count);
			#endif
		}

		/// <summary>
		/// HLSL specifics.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_root_constants_layout")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerHlslSetRootConstantsLayout([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constant_info")] [NativeName(NativeNameType.Type, "spvc_hlsl_root_constants const *")] SpvcHlslRootConstants* constantInfo, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			SpvcResult ret = CompilerHlslSetRootConstantsLayoutNative(compiler, constantInfo, count);
			return ret;
		}

		/// <summary>
		/// HLSL specifics.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_root_constants_layout")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerHlslSetRootConstantsLayout([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "constant_info")] [NativeName(NativeNameType.Type, "spvc_hlsl_root_constants const *")] ref SpvcHlslRootConstants constantInfo, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			fixed (SpvcHlslRootConstants* pconstantInfo = &constantInfo)
			{
				SpvcResult ret = CompilerHlslSetRootConstantsLayoutNative(compiler, (SpvcHlslRootConstants*)pconstantInfo, count);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_vertex_attribute_remap")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerHlslAddVertexAttributeRemapNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "remap")] [NativeName(NativeNameType.Type, "spvc_hlsl_vertex_attribute_remap const *")] SpvcHlslVertexAttributeRemap* remap, [NativeName(NativeNameType.Param, "remaps")] [NativeName(NativeNameType.Type, "size_t")] nuint remaps)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcHlslVertexAttributeRemap*, nuint, SpvcResult>)funcTable[31])(compiler, remap, remaps);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nuint, SpvcResult>)funcTable[31])(compiler, (nint)remap, remaps);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_vertex_attribute_remap")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerHlslAddVertexAttributeRemap([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "remap")] [NativeName(NativeNameType.Type, "spvc_hlsl_vertex_attribute_remap const *")] SpvcHlslVertexAttributeRemap* remap, [NativeName(NativeNameType.Param, "remaps")] [NativeName(NativeNameType.Type, "size_t")] nuint remaps)
		{
			SpvcResult ret = CompilerHlslAddVertexAttributeRemapNative(compiler, remap, remaps);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_vertex_attribute_remap")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerHlslAddVertexAttributeRemap([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "remap")] [NativeName(NativeNameType.Type, "spvc_hlsl_vertex_attribute_remap const *")] ref SpvcHlslVertexAttributeRemap remap, [NativeName(NativeNameType.Param, "remaps")] [NativeName(NativeNameType.Type, "size_t")] nuint remaps)
		{
			fixed (SpvcHlslVertexAttributeRemap* premap = &remap)
			{
				SpvcResult ret = CompilerHlslAddVertexAttributeRemapNative(compiler, (SpvcHlslVertexAttributeRemap*)premap, remaps);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_remap_num_workgroups_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_variable_id")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CompilerHlslRemapNumWorkgroupsBuiltinNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint>)funcTable[32])(compiler);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint>)funcTable[32])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_remap_num_workgroups_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_variable_id")]
		public static uint CompilerHlslRemapNumWorkgroupsBuiltin([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			uint ret = CompilerHlslRemapNumWorkgroupsBuiltinNative(compiler);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_resource_binding_flags")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerHlslSetResourceBindingFlagsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "spvc_hlsl_binding_flags")] uint flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcResult>)funcTable[33])(compiler, flags);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcResult>)funcTable[33])(compiler, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_set_resource_binding_flags")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerHlslSetResourceBindingFlags([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "spvc_hlsl_binding_flags")] uint flags)
		{
			SpvcResult ret = CompilerHlslSetResourceBindingFlagsNative(compiler, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerHlslAddResourceBindingNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding const *")] SpvcHlslResourceBinding* binding)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcHlslResourceBinding*, SpvcResult>)funcTable[34])(compiler, binding);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[34])(compiler, (nint)binding);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerHlslAddResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding const *")] SpvcHlslResourceBinding* binding)
		{
			SpvcResult ret = CompilerHlslAddResourceBindingNative(compiler, binding);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerHlslAddResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_hlsl_resource_binding const *")] ref SpvcHlslResourceBinding binding)
		{
			fixed (SpvcHlslResourceBinding* pbinding = &binding)
			{
				SpvcResult ret = CompilerHlslAddResourceBindingNative(compiler, (SpvcHlslResourceBinding*)pbinding);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_is_resource_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerHlslIsResourceUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "unsigned int")] uint set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionModel, uint, uint, byte>)funcTable[35])(compiler, model, set, binding);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionModel, uint, uint, byte>)funcTable[35])(compiler, model, set, binding);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_hlsl_is_resource_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerHlslIsResourceUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "unsigned int")] uint set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding)
		{
			byte ret = CompilerHlslIsResourceUsedNative(compiler, model, set, binding);
			return ret != 0;
		}

		/// <summary>
		/// MSL specifics.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_rasterization_disabled")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslIsRasterizationDisabledNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[36])(compiler);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[36])(compiler);
			#endif
		}

		/// <summary>
		/// MSL specifics.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_rasterization_disabled")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslIsRasterizationDisabled([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = CompilerMslIsRasterizationDisabledNative(compiler);
			return ret != 0;
		}

		/// <summary>
		/// Obsolete. Renamed to needs_swizzle_buffer. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_aux_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslNeedsAuxBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[37])(compiler);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[37])(compiler);
			#endif
		}

		/// <summary>
		/// Obsolete. Renamed to needs_swizzle_buffer. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_aux_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslNeedsAuxBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = CompilerMslNeedsAuxBufferNative(compiler);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_swizzle_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslNeedsSwizzleBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[38])(compiler);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[38])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_swizzle_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslNeedsSwizzleBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = CompilerMslNeedsSwizzleBufferNative(compiler);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_buffer_size_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslNeedsBufferSizeBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[39])(compiler);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[39])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_buffer_size_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslNeedsBufferSizeBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = CompilerMslNeedsBufferSizeBufferNative(compiler);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_output_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslNeedsOutputBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[40])(compiler);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[40])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_output_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslNeedsOutputBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = CompilerMslNeedsOutputBufferNative(compiler);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_patch_output_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslNeedsPatchOutputBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[41])(compiler);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[41])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_patch_output_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslNeedsPatchOutputBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = CompilerMslNeedsPatchOutputBufferNative(compiler);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_input_threadgroup_mem")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslNeedsInputThreadgroupMemNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[42])(compiler);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, byte>)funcTable[42])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_needs_input_threadgroup_mem")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslNeedsInputThreadgroupMem([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte ret = CompilerMslNeedsInputThreadgroupMemNative(compiler);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_vertex_attribute")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslAddVertexAttributeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "spvc_msl_vertex_attribute const *")] SpvcMslVertexAttribute* attrs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcMslVertexAttribute*, SpvcResult>)funcTable[43])(compiler, attrs);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[43])(compiler, (nint)attrs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_vertex_attribute")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddVertexAttribute([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "spvc_msl_vertex_attribute const *")] SpvcMslVertexAttribute* attrs)
		{
			SpvcResult ret = CompilerMslAddVertexAttributeNative(compiler, attrs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_vertex_attribute")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddVertexAttribute([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "spvc_msl_vertex_attribute const *")] ref SpvcMslVertexAttribute attrs)
		{
			fixed (SpvcMslVertexAttribute* pattrs = &attrs)
			{
				SpvcResult ret = CompilerMslAddVertexAttributeNative(compiler, (SpvcMslVertexAttribute*)pattrs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslAddResourceBindingNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_msl_resource_binding const *")] SpvcMslResourceBinding* binding)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcMslResourceBinding*, SpvcResult>)funcTable[44])(compiler, binding);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[44])(compiler, (nint)binding);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_msl_resource_binding const *")] SpvcMslResourceBinding* binding)
		{
			SpvcResult ret = CompilerMslAddResourceBindingNative(compiler, binding);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_resource_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "spvc_msl_resource_binding const *")] ref SpvcMslResourceBinding binding)
		{
			fixed (SpvcMslResourceBinding* pbinding = &binding)
			{
				SpvcResult ret = CompilerMslAddResourceBindingNative(compiler, (SpvcMslResourceBinding*)pbinding);
				return ret;
			}
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_input_2(). <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslAddShaderInputNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var const *")] SpvcMslShaderInterfaceVar* input)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcMslShaderInterfaceVar*, SpvcResult>)funcTable[45])(compiler, input);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[45])(compiler, (nint)input);
			#endif
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_input_2(). <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddShaderInput([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var const *")] SpvcMslShaderInterfaceVar* input)
		{
			SpvcResult ret = CompilerMslAddShaderInputNative(compiler, input);
			return ret;
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_input_2(). <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddShaderInput([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var const *")] ref SpvcMslShaderInterfaceVar input)
		{
			fixed (SpvcMslShaderInterfaceVar* pinput = &input)
			{
				SpvcResult ret = CompilerMslAddShaderInputNative(compiler, (SpvcMslShaderInterfaceVar*)pinput);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslAddShaderInput2Native([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2 const *")] SpvcMslShaderInterfaceVar2* input)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcMslShaderInterfaceVar2*, SpvcResult>)funcTable[46])(compiler, input);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[46])(compiler, (nint)input);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddShaderInput2([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2 const *")] SpvcMslShaderInterfaceVar2* input)
		{
			SpvcResult ret = CompilerMslAddShaderInput2Native(compiler, input);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_input_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddShaderInput2([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "input")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2 const *")] ref SpvcMslShaderInterfaceVar2 input)
		{
			fixed (SpvcMslShaderInterfaceVar2* pinput = &input)
			{
				SpvcResult ret = CompilerMslAddShaderInput2Native(compiler, (SpvcMslShaderInterfaceVar2*)pinput);
				return ret;
			}
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_output_2(). <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslAddShaderOutputNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var const *")] SpvcMslShaderInterfaceVar* output)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcMslShaderInterfaceVar*, SpvcResult>)funcTable[47])(compiler, output);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[47])(compiler, (nint)output);
			#endif
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_output_2(). <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddShaderOutput([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var const *")] SpvcMslShaderInterfaceVar* output)
		{
			SpvcResult ret = CompilerMslAddShaderOutputNative(compiler, output);
			return ret;
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_output_2(). <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddShaderOutput([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var const *")] ref SpvcMslShaderInterfaceVar output)
		{
			fixed (SpvcMslShaderInterfaceVar* poutput = &output)
			{
				SpvcResult ret = CompilerMslAddShaderOutputNative(compiler, (SpvcMslShaderInterfaceVar*)poutput);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslAddShaderOutput2Native([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2 const *")] SpvcMslShaderInterfaceVar2* output)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcMslShaderInterfaceVar2*, SpvcResult>)funcTable[48])(compiler, output);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[48])(compiler, (nint)output);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddShaderOutput2([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2 const *")] SpvcMslShaderInterfaceVar2* output)
		{
			SpvcResult ret = CompilerMslAddShaderOutput2Native(compiler, output);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_shader_output_2")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddShaderOutput2([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "spvc_msl_shader_interface_var_2 const *")] ref SpvcMslShaderInterfaceVar2 output)
		{
			fixed (SpvcMslShaderInterfaceVar2* poutput = &output)
			{
				SpvcResult ret = CompilerMslAddShaderOutput2Native(compiler, (SpvcMslShaderInterfaceVar2*)poutput);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_discrete_descriptor_set")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslAddDiscreteDescriptorSetNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcResult>)funcTable[49])(compiler, descSet);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcResult>)funcTable[49])(compiler, descSet);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_discrete_descriptor_set")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddDiscreteDescriptorSet([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet)
		{
			SpvcResult ret = CompilerMslAddDiscreteDescriptorSetNative(compiler, descSet);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_argument_buffer_device_address_space")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslSetArgumentBufferDeviceAddressSpaceNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "device_address")] [NativeName(NativeNameType.Type, "spvc_bool")] byte deviceAddress)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte, SpvcResult>)funcTable[50])(compiler, descSet, deviceAddress);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte, SpvcResult>)funcTable[50])(compiler, descSet, deviceAddress);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_argument_buffer_device_address_space")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslSetArgumentBufferDeviceAddressSpace([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "device_address")] [NativeName(NativeNameType.Type, "spvc_bool")] bool deviceAddress)
		{
			SpvcResult ret = CompilerMslSetArgumentBufferDeviceAddressSpaceNative(compiler, descSet, deviceAddress ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Obsolete, use is_shader_input_used. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_vertex_attribute_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslIsVertexAttributeUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[51])(compiler, location);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[51])(compiler, location);
			#endif
		}

		/// <summary>
		/// Obsolete, use is_shader_input_used. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_vertex_attribute_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslIsVertexAttributeUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location)
		{
			byte ret = CompilerMslIsVertexAttributeUsedNative(compiler, location);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_shader_input_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslIsShaderInputUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[52])(compiler, location);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[52])(compiler, location);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_shader_input_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslIsShaderInputUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location)
		{
			byte ret = CompilerMslIsShaderInputUsedNative(compiler, location);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_shader_output_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslIsShaderOutputUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[53])(compiler, location);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte>)funcTable[53])(compiler, location);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_shader_output_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslIsShaderOutputUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location)
		{
			byte ret = CompilerMslIsShaderOutputUsedNative(compiler, location);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_resource_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerMslIsResourceUsedNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "unsigned int")] uint set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionModel, uint, uint, byte>)funcTable[54])(compiler, model, set, binding);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionModel, uint, uint, byte>)funcTable[54])(compiler, model, set, binding);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_is_resource_used")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerMslIsResourceUsed([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "unsigned int")] uint set, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding)
		{
			byte ret = CompilerMslIsResourceUsedNative(compiler, model, set, binding);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslRemapConstexprSamplerNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcMslConstexprSampler*, SpvcResult>)funcTable[55])(compiler, id, sampler);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint, SpvcResult>)funcTable[55])(compiler, id, (nint)sampler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSampler([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler)
		{
			SpvcResult ret = CompilerMslRemapConstexprSamplerNative(compiler, id, sampler);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSampler([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] ref SpvcMslConstexprSampler sampler)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = CompilerMslRemapConstexprSamplerNative(compiler, id, (SpvcMslConstexprSampler*)psampler);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslRemapConstexprSamplerByBindingNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvcMslConstexprSampler*, SpvcResult>)funcTable[56])(compiler, descSet, binding, sampler);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, nint, SpvcResult>)funcTable[56])(compiler, descSet, binding, (nint)sampler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerByBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler)
		{
			SpvcResult ret = CompilerMslRemapConstexprSamplerByBindingNative(compiler, descSet, binding, sampler);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerByBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] ref SpvcMslConstexprSampler sampler)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = CompilerMslRemapConstexprSamplerByBindingNative(compiler, descSet, binding, (SpvcMslConstexprSampler*)psampler);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslRemapConstexprSamplerYcbcrNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] SpvcMslSamplerYcbcrConversion* conv)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcMslConstexprSampler*, SpvcMslSamplerYcbcrConversion*, SpvcResult>)funcTable[57])(compiler, id, sampler, conv);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint, nint, SpvcResult>)funcTable[57])(compiler, id, (nint)sampler, (nint)conv);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] SpvcMslSamplerYcbcrConversion* conv)
		{
			SpvcResult ret = CompilerMslRemapConstexprSamplerYcbcrNative(compiler, id, sampler, conv);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] ref SpvcMslConstexprSampler sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] SpvcMslSamplerYcbcrConversion* conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = CompilerMslRemapConstexprSamplerYcbcrNative(compiler, id, (SpvcMslConstexprSampler*)psampler, conv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
			{
				SpvcResult ret = CompilerMslRemapConstexprSamplerYcbcrNative(compiler, id, sampler, (SpvcMslSamplerYcbcrConversion*)pconv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] ref SpvcMslConstexprSampler sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
				{
					SpvcResult ret = CompilerMslRemapConstexprSamplerYcbcrNative(compiler, id, (SpvcMslConstexprSampler*)psampler, (SpvcMslSamplerYcbcrConversion*)pconv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslRemapConstexprSamplerByBindingYcbcrNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] SpvcMslSamplerYcbcrConversion* conv)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvcMslConstexprSampler*, SpvcMslSamplerYcbcrConversion*, SpvcResult>)funcTable[58])(compiler, descSet, binding, sampler, conv);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, nint, nint, SpvcResult>)funcTable[58])(compiler, descSet, binding, (nint)sampler, (nint)conv);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerByBindingYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] SpvcMslSamplerYcbcrConversion* conv)
		{
			SpvcResult ret = CompilerMslRemapConstexprSamplerByBindingYcbcrNative(compiler, descSet, binding, sampler, conv);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerByBindingYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] ref SpvcMslConstexprSampler sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] SpvcMslSamplerYcbcrConversion* conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = CompilerMslRemapConstexprSamplerByBindingYcbcrNative(compiler, descSet, binding, (SpvcMslConstexprSampler*)psampler, conv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerByBindingYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] SpvcMslConstexprSampler* sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
			{
				SpvcResult ret = CompilerMslRemapConstexprSamplerByBindingYcbcrNative(compiler, descSet, binding, sampler, (SpvcMslSamplerYcbcrConversion*)pconv);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslRemapConstexprSamplerByBindingYcbcr([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "sampler")] [NativeName(NativeNameType.Type, "spvc_msl_constexpr_sampler const *")] ref SpvcMslConstexprSampler sampler, [NativeName(NativeNameType.Param, "conv")] [NativeName(NativeNameType.Type, "spvc_msl_sampler_ycbcr_conversion const *")] ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
				{
					SpvcResult ret = CompilerMslRemapConstexprSamplerByBindingYcbcrNative(compiler, descSet, binding, (SpvcMslConstexprSampler*)psampler, (SpvcMslSamplerYcbcrConversion*)pconv);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_fragment_output_components")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslSetFragmentOutputComponentsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "unsigned int")] uint components)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvcResult>)funcTable[59])(compiler, location, components);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvcResult>)funcTable[59])(compiler, location, components);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_fragment_output_components")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslSetFragmentOutputComponents([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "unsigned int")] uint location, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "unsigned int")] uint components)
		{
			SpvcResult ret = CompilerMslSetFragmentOutputComponentsNative(compiler, location, components);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_automatic_resource_binding")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CompilerMslGetAutomaticResourceBindingNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint>)funcTable[60])(compiler, id);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint>)funcTable[60])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_automatic_resource_binding")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint CompilerMslGetAutomaticResourceBinding([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			uint ret = CompilerMslGetAutomaticResourceBindingNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_automatic_resource_binding_secondary")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CompilerMslGetAutomaticResourceBindingSecondaryNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint>)funcTable[61])(compiler, id);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint>)funcTable[61])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_automatic_resource_binding_secondary")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint CompilerMslGetAutomaticResourceBindingSecondary([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_variable_id")] uint id)
		{
			uint ret = CompilerMslGetAutomaticResourceBindingSecondaryNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_dynamic_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslAddDynamicBufferNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, uint, SpvcResult>)funcTable[62])(compiler, descSet, binding, index);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, uint, SpvcResult>)funcTable[62])(compiler, descSet, binding, index);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_dynamic_buffer")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddDynamicBuffer([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			SpvcResult ret = CompilerMslAddDynamicBufferNative(compiler, descSet, binding, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_inline_uniform_block")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslAddInlineUniformBlockNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvcResult>)funcTable[63])(compiler, descSet, binding);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvcResult>)funcTable[63])(compiler, descSet, binding);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_add_inline_uniform_block")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslAddInlineUniformBlock([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "desc_set")] [NativeName(NativeNameType.Type, "unsigned int")] uint descSet, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "unsigned int")] uint binding)
		{
			SpvcResult ret = CompilerMslAddInlineUniformBlockNative(compiler, descSet, binding);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerMslSetCombinedSamplerSuffixNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "char const *")] byte* suffix)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte*, SpvcResult>)funcTable[64])(compiler, suffix);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[64])(compiler, (nint)suffix);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslSetCombinedSamplerSuffix([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "char const *")] byte* suffix)
		{
			SpvcResult ret = CompilerMslSetCombinedSamplerSuffixNative(compiler, suffix);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslSetCombinedSamplerSuffix([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "char const *")] ref byte suffix)
		{
			fixed (byte* psuffix = &suffix)
			{
				SpvcResult ret = CompilerMslSetCombinedSamplerSuffixNative(compiler, (byte*)psuffix);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslSetCombinedSamplerSuffix([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> suffix)
		{
			fixed (byte* psuffix = suffix)
			{
				SpvcResult ret = CompilerMslSetCombinedSamplerSuffixNative(compiler, (byte*)psuffix);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_set_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerMslSetCombinedSamplerSuffix([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "char const *")] string suffix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (suffix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(suffix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(suffix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = CompilerMslSetCombinedSamplerSuffixNative(compiler, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* CompilerMslGetCombinedSamplerSuffixNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte*>)funcTable[65])(compiler);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint>)funcTable[65])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerMslGetCombinedSamplerSuffix([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			byte* ret = CompilerMslGetCombinedSamplerSuffixNative(compiler);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_msl_get_combined_sampler_suffix")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerMslGetCombinedSamplerSuffixS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			string ret = Utils.DecodeStringUTF8(CompilerMslGetCombinedSamplerSuffixNative(compiler));
			return ret;
		}

		/// <summary>
		/// Reflect resources.<br/>
		/// Maps almost 1:1 to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetActiveInterfaceVariablesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set *")] SpvcSet* set)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcSet*, SpvcResult>)funcTable[66])(compiler, set);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[66])(compiler, (nint)set);
			#endif
		}

		/// <summary>
		/// Reflect resources.<br/>
		/// Maps almost 1:1 to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetActiveInterfaceVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set *")] SpvcSet* set)
		{
			SpvcResult ret = CompilerGetActiveInterfaceVariablesNative(compiler, set);
			return ret;
		}

		/// <summary>
		/// Reflect resources.<br/>
		/// Maps almost 1:1 to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_active_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetActiveInterfaceVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set *")] ref SpvcSet set)
		{
			fixed (SpvcSet* pset = &set)
			{
				SpvcResult ret = CompilerGetActiveInterfaceVariablesNative(compiler, (SpvcSet*)pset);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_enabled_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerSetEnabledInterfaceVariablesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet set)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcSet, SpvcResult>)funcTable[67])(compiler, set);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcSet, SpvcResult>)funcTable[67])(compiler, set);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_enabled_interface_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerSetEnabledInterfaceVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet set)
		{
			SpvcResult ret = CompilerSetEnabledInterfaceVariablesNative(compiler, set);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerCreateShaderResourcesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources *")] SpvcResources* resources)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcResources*, SpvcResult>)funcTable[68])(compiler, resources);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcResult>)funcTable[68])(compiler, (nint)resources);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerCreateShaderResources([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources *")] SpvcResources* resources)
		{
			SpvcResult ret = CompilerCreateShaderResourcesNative(compiler, resources);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerCreateShaderResources([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources *")] ref SpvcResources resources)
		{
			fixed (SpvcResources* presources = &resources)
			{
				SpvcResult ret = CompilerCreateShaderResourcesNative(compiler, (SpvcResources*)presources);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources_for_active_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerCreateShaderResourcesForActiveVariablesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources *")] SpvcResources* resources, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet active)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcResources*, SpvcSet, SpvcResult>)funcTable[69])(compiler, resources, active);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvcSet, SpvcResult>)funcTable[69])(compiler, (nint)resources, active);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources_for_active_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerCreateShaderResourcesForActiveVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources *")] SpvcResources* resources, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet active)
		{
			SpvcResult ret = CompilerCreateShaderResourcesForActiveVariablesNative(compiler, resources, active);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_create_shader_resources_for_active_variables")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerCreateShaderResourcesForActiveVariables([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources *")] ref SpvcResources resources, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "spvc_set")] SpvcSet active)
		{
			fixed (SpvcResources* presources = &resources)
			{
				SpvcResult ret = CompilerCreateShaderResourcesForActiveVariablesNative(compiler, (SpvcResources*)presources, active);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult ResourcesGetResourceListForTypeNative([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_resource const * *")] SpvcReflectedResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* resourceSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcResources, SpvcResourceType, SpvcReflectedResource**, nuint*, SpvcResult>)funcTable[70])(resources, type, resourceList, resourceSize);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcResources, SpvcResourceType, nint, nint, SpvcResult>)funcTable[70])(resources, type, (nint)resourceList, (nint)resourceSize);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ResourcesGetResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_resource const * *")] SpvcReflectedResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* resourceSize)
		{
			SpvcResult ret = ResourcesGetResourceListForTypeNative(resources, type, resourceList, resourceSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ResourcesGetResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_resource const * *")] ref SpvcReflectedResource* resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* resourceSize)
		{
			fixed (SpvcReflectedResource** presourceList = &resourceList)
			{
				SpvcResult ret = ResourcesGetResourceListForTypeNative(resources, type, (SpvcReflectedResource**)presourceList, resourceSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ResourcesGetResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_resource const * *")] SpvcReflectedResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint resourceSize)
		{
			fixed (nuint* presourceSize = &resourceSize)
			{
				SpvcResult ret = ResourcesGetResourceListForTypeNative(resources, type, resourceList, (nuint*)presourceSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ResourcesGetResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_resource_type")] SpvcResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_resource const * *")] ref SpvcReflectedResource* resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint resourceSize)
		{
			fixed (SpvcReflectedResource** presourceList = &resourceList)
			{
				fixed (nuint* presourceSize = &resourceSize)
				{
					SpvcResult ret = ResourcesGetResourceListForTypeNative(resources, type, (SpvcReflectedResource**)presourceList, (nuint*)presourceSize);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult ResourcesGetBuiltinResourceListForTypeNative([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_builtin_resource const * *")] SpvcReflectedBuiltinResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* resourceSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcResources, SpvcBuiltinResourceType, SpvcReflectedBuiltinResource**, nuint*, SpvcResult>)funcTable[71])(resources, type, resourceList, resourceSize);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcResources, SpvcBuiltinResourceType, nint, nint, SpvcResult>)funcTable[71])(resources, type, (nint)resourceList, (nint)resourceSize);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ResourcesGetBuiltinResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_builtin_resource const * *")] SpvcReflectedBuiltinResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* resourceSize)
		{
			SpvcResult ret = ResourcesGetBuiltinResourceListForTypeNative(resources, type, resourceList, resourceSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ResourcesGetBuiltinResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_builtin_resource const * *")] ref SpvcReflectedBuiltinResource* resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* resourceSize)
		{
			fixed (SpvcReflectedBuiltinResource** presourceList = &resourceList)
			{
				SpvcResult ret = ResourcesGetBuiltinResourceListForTypeNative(resources, type, (SpvcReflectedBuiltinResource**)presourceList, resourceSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ResourcesGetBuiltinResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_builtin_resource const * *")] SpvcReflectedBuiltinResource** resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint resourceSize)
		{
			fixed (nuint* presourceSize = &resourceSize)
			{
				SpvcResult ret = ResourcesGetBuiltinResourceListForTypeNative(resources, type, resourceList, (nuint*)presourceSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_resources_get_builtin_resource_list_for_type")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult ResourcesGetBuiltinResourceListForType([NativeName(NativeNameType.Param, "resources")] [NativeName(NativeNameType.Type, "spvc_resources")] SpvcResources resources, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_builtin_resource_type")] SpvcBuiltinResourceType type, [NativeName(NativeNameType.Param, "resource_list")] [NativeName(NativeNameType.Type, "spvc_reflected_builtin_resource const * *")] ref SpvcReflectedBuiltinResource* resourceList, [NativeName(NativeNameType.Param, "resource_size")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint resourceSize)
		{
			fixed (SpvcReflectedBuiltinResource** presourceList = &resourceList)
			{
				fixed (nuint* presourceSize = &resourceSize)
				{
					SpvcResult ret = ResourcesGetBuiltinResourceListForTypeNative(resources, type, (SpvcReflectedBuiltinResource**)presourceList, (nuint*)presourceSize);
					return ret;
				}
			}
		}

		/// <summary>
		/// Decorations.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerSetDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "unsigned int")] uint argument)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, uint, void>)funcTable[72])(compiler, id, decoration, argument);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, uint, void>)funcTable[72])(compiler, id, decoration, argument);
			#endif
		}

		/// <summary>
		/// Decorations.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "unsigned int")] uint argument)
		{
			CompilerSetDecorationNative(compiler, id, decoration, argument);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerSetDecorationStringNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] byte* argument)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, byte*, void>)funcTable[73])(compiler, id, decoration, argument);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, nint, void>)funcTable[73])(compiler, id, decoration, (nint)argument);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] byte* argument)
		{
			CompilerSetDecorationStringNative(compiler, id, decoration, argument);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				CompilerSetDecorationStringNative(compiler, id, decoration, (byte*)pargument);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> argument)
		{
			fixed (byte* pargument = argument)
			{
				CompilerSetDecorationStringNative(compiler, id, decoration, (byte*)pargument);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] string argument)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argument != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argument);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argument, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			CompilerSetDecorationStringNative(compiler, id, decoration, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerSetNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] byte* argument)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte*, void>)funcTable[74])(compiler, id, argument);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint, void>)funcTable[74])(compiler, id, (nint)argument);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] byte* argument)
		{
			CompilerSetNameNative(compiler, id, argument);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				CompilerSetNameNative(compiler, id, (byte*)pargument);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> argument)
		{
			fixed (byte* pargument = argument)
			{
				CompilerSetNameNative(compiler, id, (byte*)pargument);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] string argument)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argument != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argument);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argument, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			CompilerSetNameNative(compiler, id, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerSetMemberDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "unsigned int")] uint argument)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, uint, void>)funcTable[75])(compiler, id, memberIndex, decoration, argument);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, uint, void>)funcTable[75])(compiler, id, memberIndex, decoration, argument);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetMemberDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "unsigned int")] uint argument)
		{
			CompilerSetMemberDecorationNative(compiler, id, memberIndex, decoration, argument);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerSetMemberDecorationStringNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] byte* argument)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, byte*, void>)funcTable[76])(compiler, id, memberIndex, decoration, argument);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, nint, void>)funcTable[76])(compiler, id, memberIndex, decoration, (nint)argument);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetMemberDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] byte* argument)
		{
			CompilerSetMemberDecorationStringNative(compiler, id, memberIndex, decoration, argument);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetMemberDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				CompilerSetMemberDecorationStringNative(compiler, id, memberIndex, decoration, (byte*)pargument);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetMemberDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> argument)
		{
			fixed (byte* pargument = argument)
			{
				CompilerSetMemberDecorationStringNative(compiler, id, memberIndex, decoration, (byte*)pargument);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetMemberDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] string argument)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argument != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argument);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argument, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			CompilerSetMemberDecorationStringNative(compiler, id, memberIndex, decoration, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerSetMemberNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] byte* argument)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, byte*, void>)funcTable[77])(compiler, id, memberIndex, argument);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, nint, void>)funcTable[77])(compiler, id, memberIndex, (nint)argument);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetMemberName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] byte* argument)
		{
			CompilerSetMemberNameNative(compiler, id, memberIndex, argument);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetMemberName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				CompilerSetMemberNameNative(compiler, id, memberIndex, (byte*)pargument);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetMemberName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> argument)
		{
			fixed (byte* pargument = argument)
			{
				CompilerSetMemberNameNative(compiler, id, memberIndex, (byte*)pargument);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_member_name")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetMemberName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "argument")] [NativeName(NativeNameType.Type, "char const *")] string argument)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argument != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argument);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argument, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			CompilerSetMemberNameNative(compiler, id, memberIndex, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_unset_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerUnsetDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, void>)funcTable[78])(compiler, id, decoration);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, void>)funcTable[78])(compiler, id, decoration);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_unset_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerUnsetDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			CompilerUnsetDecorationNative(compiler, id, decoration);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_unset_member_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerUnsetMemberDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, void>)funcTable[79])(compiler, id, memberIndex, decoration);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, void>)funcTable[79])(compiler, id, memberIndex, decoration);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_unset_member_decoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerUnsetMemberDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			CompilerUnsetMemberDecorationNative(compiler, id, memberIndex, decoration);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_has_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerHasDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, byte>)funcTable[80])(compiler, id, decoration);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, byte>)funcTable[80])(compiler, id, decoration);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_has_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerHasDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			byte ret = CompilerHasDecorationNative(compiler, id, decoration);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_has_member_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerHasMemberDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, byte>)funcTable[81])(compiler, id, memberIndex, decoration);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, byte>)funcTable[81])(compiler, id, memberIndex, decoration);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_has_member_decoration")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerHasMemberDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			byte ret = CompilerHasMemberDecorationNative(compiler, id, memberIndex, decoration);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* CompilerGetNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, byte*>)funcTable[82])(compiler, id);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, nint>)funcTable[82])(compiler, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerGetName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id)
		{
			byte* ret = CompilerGetNameNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerGetNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id)
		{
			string ret = Utils.DecodeStringUTF8(CompilerGetNameNative(compiler, id));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CompilerGetDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, uint>)funcTable[83])(compiler, id, decoration);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, uint>)funcTable[83])(compiler, id, decoration);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint CompilerGetDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			uint ret = CompilerGetDecorationNative(compiler, id, decoration);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration_string")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* CompilerGetDecorationStringNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, byte*>)funcTable[84])(compiler, id, decoration);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvDecoration, nint>)funcTable[84])(compiler, id, decoration);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration_string")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerGetDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			byte* ret = CompilerGetDecorationStringNative(compiler, id, decoration);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_decoration_string")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerGetDecorationStringS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SpvId")] uint id, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			string ret = Utils.DecodeStringUTF8(CompilerGetDecorationStringNative(compiler, id, decoration));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CompilerGetMemberDecorationNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, uint>)funcTable[85])(compiler, id, memberIndex, decoration);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, uint>)funcTable[85])(compiler, id, memberIndex, decoration);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint CompilerGetMemberDecoration([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			uint ret = CompilerGetMemberDecorationNative(compiler, id, memberIndex, decoration);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* CompilerGetMemberDecorationStringNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, byte*>)funcTable[86])(compiler, id, memberIndex, decoration);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, SpvDecoration, nint>)funcTable[86])(compiler, id, memberIndex, decoration);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerGetMemberDecorationString([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			byte* ret = CompilerGetMemberDecorationStringNative(compiler, id, memberIndex, decoration);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_decoration_string")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerGetMemberDecorationStringS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex, [NativeName(NativeNameType.Param, "decoration")] [NativeName(NativeNameType.Type, "SpvDecoration")] SpvDecoration decoration)
		{
			string ret = Utils.DecodeStringUTF8(CompilerGetMemberDecorationStringNative(compiler, id, memberIndex, decoration));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* CompilerGetMemberNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, byte*>)funcTable[87])(compiler, id, memberIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, uint, nint>)funcTable[87])(compiler, id, memberIndex);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerGetMemberName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex)
		{
			byte* ret = CompilerGetMemberNameNative(compiler, id, memberIndex);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_member_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerGetMemberNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id, [NativeName(NativeNameType.Param, "member_index")] [NativeName(NativeNameType.Type, "unsigned int")] uint memberIndex)
		{
			string ret = Utils.DecodeStringUTF8(CompilerGetMemberNameNative(compiler, id, memberIndex));
			return ret;
		}

		/// <summary>
		/// Entry points.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetEntryPointsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "spvc_entry_point const * *")] SpvcEntryPoint** entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numEntryPoints)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcEntryPoint**, nuint*, SpvcResult>)funcTable[88])(compiler, entryPoints, numEntryPoints);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, SpvcResult>)funcTable[88])(compiler, (nint)entryPoints, (nint)numEntryPoints);
			#endif
		}

		/// <summary>
		/// Entry points.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetEntryPoints([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "spvc_entry_point const * *")] SpvcEntryPoint** entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numEntryPoints)
		{
			SpvcResult ret = CompilerGetEntryPointsNative(compiler, entryPoints, numEntryPoints);
			return ret;
		}

		/// <summary>
		/// Entry points.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetEntryPoints([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "spvc_entry_point const * *")] ref SpvcEntryPoint* entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numEntryPoints)
		{
			fixed (SpvcEntryPoint** pentryPoints = &entryPoints)
			{
				SpvcResult ret = CompilerGetEntryPointsNative(compiler, (SpvcEntryPoint**)pentryPoints, numEntryPoints);
				return ret;
			}
		}

		/// <summary>
		/// Entry points.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetEntryPoints([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "spvc_entry_point const * *")] SpvcEntryPoint** entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numEntryPoints)
		{
			fixed (nuint* pnumEntryPoints = &numEntryPoints)
			{
				SpvcResult ret = CompilerGetEntryPointsNative(compiler, entryPoints, (nuint*)pnumEntryPoints);
				return ret;
			}
		}

		/// <summary>
		/// Entry points.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_entry_points")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetEntryPoints([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "entry_points")] [NativeName(NativeNameType.Type, "spvc_entry_point const * *")] ref SpvcEntryPoint* entryPoints, [NativeName(NativeNameType.Param, "num_entry_points")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numEntryPoints)
		{
			fixed (SpvcEntryPoint** pentryPoints = &entryPoints)
			{
				fixed (nuint* pnumEntryPoints = &numEntryPoints)
				{
					SpvcResult ret = CompilerGetEntryPointsNative(compiler, (SpvcEntryPoint**)pentryPoints, (nuint*)pnumEntryPoints);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerSetEntryPointNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte*, SpvExecutionModel, SpvcResult>)funcTable[89])(compiler, name, model);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvExecutionModel, SpvcResult>)funcTable[89])(compiler, (nint)name, model);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerSetEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			SpvcResult ret = CompilerSetEntryPointNative(compiler, name, model);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerSetEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pname = &name)
			{
				SpvcResult ret = CompilerSetEntryPointNative(compiler, (byte*)pname, model);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerSetEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pname = name)
			{
				SpvcResult ret = CompilerSetEntryPointNative(compiler, (byte*)pname, model);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerSetEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = CompilerSetEntryPointNative(compiler, pStr0, model);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerRenameEntryPointNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] byte* oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] byte* newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte*, byte*, SpvExecutionModel, SpvcResult>)funcTable[90])(compiler, oldName, newName, model);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, SpvExecutionModel, SpvcResult>)funcTable[90])(compiler, (nint)oldName, (nint)newName, model);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] byte* oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] byte* newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			SpvcResult ret = CompilerRenameEntryPointNative(compiler, oldName, newName, model);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] ref byte oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] byte* newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* poldName = &oldName)
			{
				SpvcResult ret = CompilerRenameEntryPointNative(compiler, (byte*)poldName, newName, model);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] byte* newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* poldName = oldName)
			{
				SpvcResult ret = CompilerRenameEntryPointNative(compiler, (byte*)poldName, newName, model);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] string oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] byte* newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (oldName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(oldName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(oldName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = CompilerRenameEntryPointNative(compiler, pStr0, newName, model);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] byte* oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] ref byte newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pnewName = &newName)
			{
				SpvcResult ret = CompilerRenameEntryPointNative(compiler, oldName, (byte*)pnewName, model);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] byte* oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pnewName = newName)
			{
				SpvcResult ret = CompilerRenameEntryPointNative(compiler, oldName, (byte*)pnewName, model);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] byte* oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] string newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (newName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(newName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(newName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvcResult ret = CompilerRenameEntryPointNative(compiler, oldName, pStr0, model);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] ref byte oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] ref byte newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* poldName = &oldName)
			{
				fixed (byte* pnewName = &newName)
				{
					SpvcResult ret = CompilerRenameEntryPointNative(compiler, (byte*)poldName, (byte*)pnewName, model);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* poldName = oldName)
			{
				fixed (byte* pnewName = newName)
				{
					SpvcResult ret = CompilerRenameEntryPointNative(compiler, (byte*)poldName, (byte*)pnewName, model);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_rename_entry_point")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerRenameEntryPoint([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "old_name")] [NativeName(NativeNameType.Type, "char const *")] string oldName, [NativeName(NativeNameType.Param, "new_name")] [NativeName(NativeNameType.Type, "char const *")] string newName, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (oldName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(oldName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(oldName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (newName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(newName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(newName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SpvcResult ret = CompilerRenameEntryPointNative(compiler, pStr0, pStr1, model);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* CompilerGetCleansedEntryPointNameNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, byte*, SpvExecutionModel, byte*>)funcTable[91])(compiler, name, model);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, SpvExecutionModel, nint>)funcTable[91])(compiler, (nint)name, model);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerGetCleansedEntryPointName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* ret = CompilerGetCleansedEntryPointNameNative(compiler, name, model);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerGetCleansedEntryPointNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			string ret = Utils.DecodeStringUTF8(CompilerGetCleansedEntryPointNameNative(compiler, name, model));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerGetCleansedEntryPointName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pname = &name)
			{
				byte* ret = CompilerGetCleansedEntryPointNameNative(compiler, (byte*)pname, model);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerGetCleansedEntryPointNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pname = &name)
			{
				string ret = Utils.DecodeStringUTF8(CompilerGetCleansedEntryPointNameNative(compiler, (byte*)pname, model));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerGetCleansedEntryPointName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pname = name)
			{
				byte* ret = CompilerGetCleansedEntryPointNameNative(compiler, (byte*)pname, model);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerGetCleansedEntryPointNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			fixed (byte* pname = name)
			{
				string ret = Utils.DecodeStringUTF8(CompilerGetCleansedEntryPointNameNative(compiler, (byte*)pname, model));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* CompilerGetCleansedEntryPointName([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = CompilerGetCleansedEntryPointNameNative(compiler, pStr0, model);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_cleansed_entry_point_name")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string CompilerGetCleansedEntryPointNameS([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "model")] [NativeName(NativeNameType.Type, "SpvExecutionModel")] SpvExecutionModel model)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(CompilerGetCleansedEntryPointNameNative(compiler, pStr0, model));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_execution_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerSetExecutionModeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, void>)funcTable[92])(compiler, mode);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, void>)funcTable[92])(compiler, mode);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_execution_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetExecutionMode([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode)
		{
			CompilerSetExecutionModeNative(compiler, mode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_unset_execution_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerUnsetExecutionModeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, void>)funcTable[93])(compiler, mode);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, void>)funcTable[93])(compiler, mode);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_unset_execution_mode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerUnsetExecutionMode([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode)
		{
			CompilerUnsetExecutionModeNative(compiler, mode);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_execution_mode_with_arguments")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerSetExecutionModeWithArgumentsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode, [NativeName(NativeNameType.Param, "arg0")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg0, [NativeName(NativeNameType.Param, "arg1")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg1, [NativeName(NativeNameType.Param, "arg2")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, uint, uint, uint, void>)funcTable[94])(compiler, mode, arg0, arg1, arg2);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, uint, uint, uint, void>)funcTable[94])(compiler, mode, arg0, arg1, arg2);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_set_execution_mode_with_arguments")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerSetExecutionModeWithArguments([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode, [NativeName(NativeNameType.Param, "arg0")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg0, [NativeName(NativeNameType.Param, "arg1")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg1, [NativeName(NativeNameType.Param, "arg2")] [NativeName(NativeNameType.Type, "unsigned int")] uint arg2)
		{
			CompilerSetExecutionModeWithArgumentsNative(compiler, mode, arg0, arg1, arg2);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_modes")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetExecutionModesNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "SpvExecutionMode const * *")] SpvExecutionMode** modes, [NativeName(NativeNameType.Param, "num_modes")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numModes)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode**, nuint*, SpvcResult>)funcTable[95])(compiler, modes, numModes);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, nint, nint, SpvcResult>)funcTable[95])(compiler, (nint)modes, (nint)numModes);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_modes")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetExecutionModes([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "SpvExecutionMode const * *")] SpvExecutionMode** modes, [NativeName(NativeNameType.Param, "num_modes")] [NativeName(NativeNameType.Type, "size_t *")] nuint* numModes)
		{
			SpvcResult ret = CompilerGetExecutionModesNative(compiler, modes, numModes);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_modes")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetExecutionModes([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "SpvExecutionMode const * *")] SpvExecutionMode** modes, [NativeName(NativeNameType.Param, "num_modes")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint numModes)
		{
			fixed (nuint* pnumModes = &numModes)
			{
				SpvcResult ret = CompilerGetExecutionModesNative(compiler, modes, (nuint*)pnumModes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_mode_argument")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CompilerGetExecutionModeArgumentNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, uint>)funcTable[96])(compiler, mode);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, uint>)funcTable[96])(compiler, mode);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_mode_argument")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint CompilerGetExecutionModeArgument([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode)
		{
			uint ret = CompilerGetExecutionModeArgumentNative(compiler, mode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_mode_argument_by_index")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CompilerGetExecutionModeArgumentByIndexNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, uint, uint>)funcTable[97])(compiler, mode, index);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionMode, uint, uint>)funcTable[97])(compiler, mode, index);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_mode_argument_by_index")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint CompilerGetExecutionModeArgumentByIndex([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SpvExecutionMode")] SpvExecutionMode mode, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			uint ret = CompilerGetExecutionModeArgumentByIndexNative(compiler, mode, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_model")]
		[return: NativeName(NativeNameType.Type, "SpvExecutionModel")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvExecutionModel CompilerGetExecutionModelNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionModel>)funcTable[98])(compiler);
			#else
			return (SpvExecutionModel)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvExecutionModel>)funcTable[98])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_execution_model")]
		[return: NativeName(NativeNameType.Type, "SpvExecutionModel")]
		public static SpvExecutionModel CompilerGetExecutionModel([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			SpvExecutionModel ret = CompilerGetExecutionModelNative(compiler);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_update_active_builtins")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompilerUpdateActiveBuiltinsNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SpvcCompiler, void>)funcTable[99])(compiler);
			#else
			((delegate* unmanaged[Cdecl]<SpvcCompiler, void>)funcTable[99])(compiler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_update_active_builtins")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CompilerUpdateActiveBuiltins([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler)
		{
			CompilerUpdateActiveBuiltinsNative(compiler);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_has_active_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CompilerHasActiveBuiltinNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "builtin")] [NativeName(NativeNameType.Type, "SpvBuiltIn")] SpvBuiltIn builtin, [NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "SpvStorageClass")] SpvStorageClass storage)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvBuiltIn, SpvStorageClass, byte>)funcTable[100])(compiler, builtin, storage);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvBuiltIn, SpvStorageClass, byte>)funcTable[100])(compiler, builtin, storage);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_has_active_builtin")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool CompilerHasActiveBuiltin([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "builtin")] [NativeName(NativeNameType.Type, "SpvBuiltIn")] SpvBuiltIn builtin, [NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "SpvStorageClass")] SpvStorageClass storage)
		{
			byte ret = CompilerHasActiveBuiltinNative(compiler, builtin, storage);
			return ret != 0;
		}

		/// <summary>
		/// Type query interface.<br/>
		/// Maps to C++ API, except it's read-only.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_type_handle")]
		[return: NativeName(NativeNameType.Type, "spvc_type")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcType CompilerGetTypeHandleNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcType>)funcTable[101])(compiler, id);
			#else
			return (SpvcType)((delegate* unmanaged[Cdecl]<SpvcCompiler, uint, SpvcType>)funcTable[101])(compiler, id);
			#endif
		}

		/// <summary>
		/// Type query interface.<br/>
		/// Maps to C++ API, except it's read-only.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_type_handle")]
		[return: NativeName(NativeNameType.Type, "spvc_type")]
		public static SpvcType CompilerGetTypeHandle([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "spvc_type_id")] uint id)
		{
			SpvcType ret = CompilerGetTypeHandleNative(compiler, id);
			return ret;
		}

		/// <summary>
		/// Pulls out SPIRType::self. This effectively gives the type ID without array or pointer qualifiers.<br/>
		/// This is necessary when reflecting decoration/name information on members of a struct,<br/>
		/// which are placed in the base type, not the qualified type.<br/>
		/// This is similar to spvc_reflected_resource::base_type_id. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_base_type_id")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TypeGetBaseTypeIdNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[102])(type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[102])(type);
			#endif
		}

		/// <summary>
		/// Pulls out SPIRType::self. This effectively gives the type ID without array or pointer qualifiers.<br/>
		/// This is necessary when reflecting decoration/name information on members of a struct,<br/>
		/// which are placed in the base type, not the qualified type.<br/>
		/// This is similar to spvc_reflected_resource::base_type_id. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_base_type_id")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		public static uint TypeGetBaseTypeId([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = TypeGetBaseTypeIdNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_basetype")]
		[return: NativeName(NativeNameType.Type, "spvc_basetype")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcBasetype TypeGetBasetypeNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, SpvcBasetype>)funcTable[103])(type);
			#else
			return (SpvcBasetype)((delegate* unmanaged[Cdecl]<SpvcType, SpvcBasetype>)funcTable[103])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_basetype")]
		[return: NativeName(NativeNameType.Type, "spvc_basetype")]
		public static SpvcBasetype TypeGetBasetype([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvcBasetype ret = TypeGetBasetypeNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_bit_width")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TypeGetWidthNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[104])(type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[104])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_bit_width")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint TypeGetWidth([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = TypeGetWidthNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_vector_size")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TypeGetVectorSizeNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[105])(type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[105])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_vector_size")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint TypeGetVectorSize([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = TypeGetVectorSizeNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_columns")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TypeGetColumnsNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[106])(type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[106])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_columns")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint TypeGetColumns([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = TypeGetColumnsNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_num_array_dimensions")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TypeGetNumArrayDimensionsNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[107])(type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[107])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_num_array_dimensions")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint TypeGetNumArrayDimensions([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = TypeGetNumArrayDimensionsNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_array_dimension_is_literal")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte TypeArrayDimensionIsLiteralNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "dimension")] [NativeName(NativeNameType.Type, "unsigned int")] uint dimension)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint, byte>)funcTable[108])(type, dimension);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcType, uint, byte>)funcTable[108])(type, dimension);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_array_dimension_is_literal")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool TypeArrayDimensionIsLiteral([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "dimension")] [NativeName(NativeNameType.Type, "unsigned int")] uint dimension)
		{
			byte ret = TypeArrayDimensionIsLiteralNative(type, dimension);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_array_dimension")]
		[return: NativeName(NativeNameType.Type, "SpvId")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TypeGetArrayDimensionNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "dimension")] [NativeName(NativeNameType.Type, "unsigned int")] uint dimension)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint, uint>)funcTable[109])(type, dimension);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcType, uint, uint>)funcTable[109])(type, dimension);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_array_dimension")]
		[return: NativeName(NativeNameType.Type, "SpvId")]
		public static uint TypeGetArrayDimension([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "dimension")] [NativeName(NativeNameType.Type, "unsigned int")] uint dimension)
		{
			uint ret = TypeGetArrayDimensionNative(type, dimension);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_num_member_types")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TypeGetNumMemberTypesNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[110])(type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[110])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_num_member_types")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint TypeGetNumMemberTypes([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = TypeGetNumMemberTypesNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_member_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TypeGetMemberTypeNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint, uint>)funcTable[111])(type, index);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcType, uint, uint>)funcTable[111])(type, index);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_member_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		public static uint TypeGetMemberType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index)
		{
			uint ret = TypeGetMemberTypeNative(type, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_storage_class")]
		[return: NativeName(NativeNameType.Type, "SpvStorageClass")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvStorageClass TypeGetStorageClassNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, SpvStorageClass>)funcTable[112])(type);
			#else
			return (SpvStorageClass)((delegate* unmanaged[Cdecl]<SpvcType, SpvStorageClass>)funcTable[112])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_storage_class")]
		[return: NativeName(NativeNameType.Type, "SpvStorageClass")]
		public static SpvStorageClass TypeGetStorageClass([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvStorageClass ret = TypeGetStorageClassNative(type);
			return ret;
		}

		/// <summary>
		/// Image type query. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_sampled_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TypeGetImageSampledTypeNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[113])(type);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<SpvcType, uint>)funcTable[113])(type);
			#endif
		}

		/// <summary>
		/// Image type query. <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_sampled_type")]
		[return: NativeName(NativeNameType.Type, "spvc_type_id")]
		public static uint TypeGetImageSampledType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			uint ret = TypeGetImageSampledTypeNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_dimension")]
		[return: NativeName(NativeNameType.Type, "SpvDim")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvDim TypeGetImageDimensionNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, SpvDim>)funcTable[114])(type);
			#else
			return (SpvDim)((delegate* unmanaged[Cdecl]<SpvcType, SpvDim>)funcTable[114])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_dimension")]
		[return: NativeName(NativeNameType.Type, "SpvDim")]
		public static SpvDim TypeGetImageDimension([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvDim ret = TypeGetImageDimensionNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_is_depth")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte TypeGetImageIsDepthNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, byte>)funcTable[115])(type);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcType, byte>)funcTable[115])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_is_depth")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool TypeGetImageIsDepth([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			byte ret = TypeGetImageIsDepthNative(type);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_arrayed")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte TypeGetImageArrayedNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, byte>)funcTable[116])(type);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcType, byte>)funcTable[116])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_arrayed")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool TypeGetImageArrayed([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			byte ret = TypeGetImageArrayedNative(type);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_multisampled")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte TypeGetImageMultisampledNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, byte>)funcTable[117])(type);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcType, byte>)funcTable[117])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_multisampled")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool TypeGetImageMultisampled([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			byte ret = TypeGetImageMultisampledNative(type);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_is_storage")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte TypeGetImageIsStorageNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, byte>)funcTable[118])(type);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SpvcType, byte>)funcTable[118])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_is_storage")]
		[return: NativeName(NativeNameType.Type, "spvc_bool")]
		public static bool TypeGetImageIsStorage([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			byte ret = TypeGetImageIsStorageNative(type);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_storage_format")]
		[return: NativeName(NativeNameType.Type, "SpvImageFormat")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvImageFormat TypeGetImageStorageFormatNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, SpvImageFormat>)funcTable[119])(type);
			#else
			return (SpvImageFormat)((delegate* unmanaged[Cdecl]<SpvcType, SpvImageFormat>)funcTable[119])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_storage_format")]
		[return: NativeName(NativeNameType.Type, "SpvImageFormat")]
		public static SpvImageFormat TypeGetImageStorageFormat([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvImageFormat ret = TypeGetImageStorageFormatNative(type);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_access_qualifier")]
		[return: NativeName(NativeNameType.Type, "SpvAccessQualifier")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvAccessQualifier TypeGetImageAccessQualifierNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcType, SpvAccessQualifier>)funcTable[120])(type);
			#else
			return (SpvAccessQualifier)((delegate* unmanaged[Cdecl]<SpvcType, SpvAccessQualifier>)funcTable[120])(type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_type_get_image_access_qualifier")]
		[return: NativeName(NativeNameType.Type, "SpvAccessQualifier")]
		public static SpvAccessQualifier TypeGetImageAccessQualifier([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type)
		{
			SpvAccessQualifier ret = TypeGetImageAccessQualifierNative(type);
			return ret;
		}

		/// <summary>
		/// Buffer layout query.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetDeclaredStructSizeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, nuint*, SpvcResult>)funcTable[121])(compiler, structType, size);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, nint, SpvcResult>)funcTable[121])(compiler, structType, (nint)size);
			#endif
		}

		/// <summary>
		/// Buffer layout query.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredStructSize([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size)
		{
			SpvcResult ret = CompilerGetDeclaredStructSizeNative(compiler, structType, size);
			return ret;
		}

		/// <summary>
		/// Buffer layout query.<br/>
		/// Maps to C++ API.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredStructSize([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = CompilerGetDeclaredStructSizeNative(compiler, structType, (nuint*)psize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size_runtime_array")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetDeclaredStructSizeRuntimeArrayNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "array_size")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, nuint, nuint*, SpvcResult>)funcTable[122])(compiler, structType, arraySize, size);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, nuint, nint, SpvcResult>)funcTable[122])(compiler, structType, arraySize, (nint)size);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size_runtime_array")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredStructSizeRuntimeArray([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "array_size")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size)
		{
			SpvcResult ret = CompilerGetDeclaredStructSizeRuntimeArrayNative(compiler, structType, arraySize, size);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_size_runtime_array")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredStructSizeRuntimeArray([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "struct_type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType structType, [NativeName(NativeNameType.Param, "array_size")] [NativeName(NativeNameType.Type, "size_t")] nuint arraySize, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = CompilerGetDeclaredStructSizeRuntimeArrayNative(compiler, structType, arraySize, (nuint*)psize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_member_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerGetDeclaredStructMemberSizeNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, uint, nuint*, SpvcResult>)funcTable[123])(compiler, type, index, size);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, uint, nint, SpvcResult>)funcTable[123])(compiler, type, index, (nint)size);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_member_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredStructMemberSize([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size)
		{
			SpvcResult ret = CompilerGetDeclaredStructMemberSizeNative(compiler, type, index, size);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_get_declared_struct_member_size")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerGetDeclaredStructMemberSize([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = CompilerGetDeclaredStructMemberSizeNative(compiler, type, index, (nuint*)psize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_offset")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerTypeStructMemberOffsetNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* offset)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, uint, uint*, SpvcResult>)funcTable[124])(compiler, type, index, offset);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, uint, nint, SpvcResult>)funcTable[124])(compiler, type, index, (nint)offset);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_offset")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerTypeStructMemberOffset([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* offset)
		{
			SpvcResult ret = CompilerTypeStructMemberOffsetNative(compiler, type, index, offset);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_offset")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerTypeStructMemberOffset([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "unsigned int *")] ref uint offset)
		{
			fixed (uint* poffset = &offset)
			{
				SpvcResult ret = CompilerTypeStructMemberOffsetNative(compiler, type, index, (uint*)poffset);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_array_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SpvcResult CompilerTypeStructMemberArrayStrideNative([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* stride)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, uint, uint*, SpvcResult>)funcTable[125])(compiler, type, index, stride);
			#else
			return (SpvcResult)((delegate* unmanaged[Cdecl]<SpvcCompiler, SpvcType, uint, nint, SpvcResult>)funcTable[125])(compiler, type, index, (nint)stride);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "spvc_compiler_type_struct_member_array_stride")]
		[return: NativeName(NativeNameType.Type, "spvc_result")]
		public static SpvcResult CompilerTypeStructMemberArrayStride([NativeName(NativeNameType.Param, "compiler")] [NativeName(NativeNameType.Type, "spvc_compiler")] SpvcCompiler compiler, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "spvc_type")] SpvcType type, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "unsigned int")] uint index, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "unsigned int *")] uint* stride)
		{
			SpvcResult ret = CompilerTypeStructMemberArrayStrideNative(compiler, type, index, stride);
			return ret;
		}
	}
}
