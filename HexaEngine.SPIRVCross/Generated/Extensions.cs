// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace HexaEngine.SPIRVCross
{
	public static unsafe class Extensions
	{
		/// <summary>
		/// Frees all memory allocations and objects associated with the context and its child objects. 
		/// </summary>
		public static void Destroy(this SpvcContext context)
		{
			SPIRV.SpvcContextDestroy(context);
		}

		/// <summary>
		/// Frees all memory allocations and objects associated with the context and its child objects, but keeps the context alive. 
		/// </summary>
		public static void ReleaseAllocations(this SpvcContext context)
		{
			SPIRV.SpvcContextReleaseAllocations(context);
		}

		/// <summary>
		/// Get the string for the last error which was logged. 
		/// </summary>
		public static string GetLastErrorStringS(this SpvcContext context)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcContextGetLastErrorString(context));
			return ret;
		}

		/// <summary>
		/// Get the string for the last error which was logged. 
		/// </summary>
		public static byte* GetLastErrorString(this SpvcContext context)
		{
			byte* ret = SPIRV.SpvcContextGetLastErrorString(context);
			return ret;
		}

		public static void SetErrorCallback(this SpvcContext context, SpvcErrorCallback cb, void* userdata)
		{
			SPIRV.SpvcContextSetErrorCallback(context, cb, userdata);
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. 
		/// </summary>
		public static SpvcResult ParseSpirv(this SpvcContext context, ref SpvId spirv, nuint wordCount, SpvcParsedIr* parsedIr)
		{
			fixed (SpvId* pspirv = &spirv)
			{
				SpvcResult ret = SPIRV.SpvcContextParseSpirv(context, pspirv, wordCount, parsedIr);
				return ret;
			}
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. 
		/// </summary>
		public static SpvcResult ParseSpirv(this SpvcContext context, SpvId* spirv, nuint wordCount, ref SpvcParsedIr parsedIr)
		{
			fixed (SpvcParsedIr* pparsedIr = &parsedIr)
			{
				SpvcResult ret = SPIRV.SpvcContextParseSpirv(context, spirv, wordCount, pparsedIr);
				return ret;
			}
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. 
		/// </summary>
		public static SpvcResult ParseSpirv(this SpvcContext context, ref SpvId spirv, nuint wordCount, ref SpvcParsedIr parsedIr)
		{
			fixed (SpvId* pspirv = &spirv)
			{
				fixed (SpvcParsedIr* pparsedIr = &parsedIr)
				{
					SpvcResult ret = SPIRV.SpvcContextParseSpirv(context, pspirv, wordCount, pparsedIr);
					return ret;
				}
			}
		}

		/// <summary>
		/// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle. 
		/// </summary>
		public static SpvcResult ParseSpirv(this SpvcContext context, SpvId* spirv, nuint wordCount, SpvcParsedIr* parsedIr)
		{
			SpvcResult ret = SPIRV.SpvcContextParseSpirv(context, spirv, wordCount, parsedIr);
			return ret;
		}

		/// <summary>
		/// Create a compiler backend. Capture mode controls if we construct by copy or move semantics.
		/// It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.
		/// </summary>
		public static SpvcResult CreateCompiler(this SpvcContext context, SpvcBackend backend, SpvcParsedIr parsedIr, SpvcCaptureMode mode, ref SpvcCompiler compiler)
		{
			fixed (SpvcCompiler* pcompiler = &compiler)
			{
				SpvcResult ret = SPIRV.SpvcContextCreateCompiler(context, backend, parsedIr, mode, pcompiler);
				return ret;
			}
		}

		/// <summary>
		/// Create a compiler backend. Capture mode controls if we construct by copy or move semantics.
		/// It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.
		/// </summary>
		public static SpvcResult CreateCompiler(this SpvcContext context, SpvcBackend backend, SpvcParsedIr parsedIr, SpvcCaptureMode mode, SpvcCompiler* compiler)
		{
			SpvcResult ret = SPIRV.SpvcContextCreateCompiler(context, backend, parsedIr, mode, compiler);
			return ret;
		}

		/// <summary>
		/// Maps directly to C++ API. 
		/// </summary>
		public static uint GetCurrentIdBound(this SpvcCompiler compiler)
		{
			uint ret = SPIRV.SpvcCompilerGetCurrentIdBound(compiler);
			return ret;
		}

		/// <summary>
		/// Create compiler options, which will initialize defaults. 
		/// </summary>
		public static SpvcResult CreateCompilerOptions(this SpvcCompiler compiler, ref SpvcCompilerOptions options)
		{
			fixed (SpvcCompilerOptions* poptions = &options)
			{
				SpvcResult ret = SPIRV.SpvcCompilerCreateCompilerOptions(compiler, poptions);
				return ret;
			}
		}

		/// <summary>
		/// Create compiler options, which will initialize defaults. 
		/// </summary>
		public static SpvcResult CreateCompilerOptions(this SpvcCompiler compiler, SpvcCompilerOptions* options)
		{
			SpvcResult ret = SPIRV.SpvcCompilerCreateCompilerOptions(compiler, options);
			return ret;
		}

		/// <summary>
		/// Override options. Will return error if e.g. MSL options are used for the HLSL backend, etc. 
		/// </summary>
		public static SpvcResult OptionsSetBool(this SpvcCompilerOptions options, SpvcCompilerOption option, bool value)
		{
			SpvcResult ret = SPIRV.SpvcCompilerOptionsSetBool(options, option, value);
			return ret;
		}

		public static SpvcResult OptionsSetUint(this SpvcCompilerOptions options, SpvcCompilerOption option, uint value)
		{
			SpvcResult ret = SPIRV.SpvcCompilerOptionsSetUint(options, option, value);
			return ret;
		}

		/// <summary>
		/// Set compiler options. 
		/// </summary>
		public static SpvcResult InstallCompilerOptions(this SpvcCompiler compiler, SpvcCompilerOptions options)
		{
			SpvcResult ret = SPIRV.SpvcCompilerInstallCompilerOptions(compiler, options);
			return ret;
		}

		/// <summary>
		/// Compile IR into a string. *source is owned by the context, and caller must not free it themselves. 
		/// </summary>
		public static SpvcResult Compile(this SpvcCompiler compiler, ref byte* source)
		{
			fixed (byte** psource = &source)
			{
				SpvcResult ret = SPIRV.SpvcCompilerCompile(compiler, psource);
				return ret;
			}
		}

		/// <summary>
		/// Compile IR into a string. *source is owned by the context, and caller must not free it themselves. 
		/// </summary>
		public static SpvcResult Compile(this SpvcCompiler compiler, byte** source)
		{
			SpvcResult ret = SPIRV.SpvcCompilerCompile(compiler, source);
			return ret;
		}

		/// <summary>
		/// Maps to C++ API. 
		/// </summary>
		public static SpvcResult AddHeaderLine(this SpvcCompiler compiler, ref byte line)
		{
			fixed (byte* pline = &line)
			{
				SpvcResult ret = SPIRV.SpvcCompilerAddHeaderLine(compiler, pline);
				return ret;
			}
		}

		/// <summary>
		/// Maps to C++ API. 
		/// </summary>
		public static SpvcResult AddHeaderLine(this SpvcCompiler compiler, string line)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(line);
			SpvcResult ret = SPIRV.SpvcCompilerAddHeaderLine(compiler, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		/// <summary>
		/// Maps to C++ API. 
		/// </summary>
		public static SpvcResult AddHeaderLine(this SpvcCompiler compiler, byte* line)
		{
			SpvcResult ret = SPIRV.SpvcCompilerAddHeaderLine(compiler, line);
			return ret;
		}

		public static SpvcResult RequireExtension(this SpvcCompiler compiler, ref byte ext)
		{
			fixed (byte* pext = &ext)
			{
				SpvcResult ret = SPIRV.SpvcCompilerRequireExtension(compiler, pext);
				return ret;
			}
		}

		public static SpvcResult RequireExtension(this SpvcCompiler compiler, string ext)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(ext);
			SpvcResult ret = SPIRV.SpvcCompilerRequireExtension(compiler, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static SpvcResult RequireExtension(this SpvcCompiler compiler, byte* ext)
		{
			SpvcResult ret = SPIRV.SpvcCompilerRequireExtension(compiler, ext);
			return ret;
		}

		public static SpvcResult FlattenBufferBlock(this SpvcCompiler compiler, uint id)
		{
			SpvcResult ret = SPIRV.SpvcCompilerFlattenBufferBlock(compiler, id);
			return ret;
		}

		public static bool VariableIsDepthOrCompare(this SpvcCompiler compiler, uint id)
		{
			bool ret = SPIRV.SpvcCompilerVariableIsDepthOrCompare(compiler, id);
			return ret;
		}

		public static SpvcResult MaskStageOutputByLocation(this SpvcCompiler compiler, uint location, uint component)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMaskStageOutputByLocation(compiler, location, component);
			return ret;
		}

		public static SpvcResult MaskStageOutputByBuiltin(this SpvcCompiler compiler, SpvBuiltIn builtin)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMaskStageOutputByBuiltin(compiler, builtin);
			return ret;
		}

		/// <summary>
		/// HLSL specifics.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult HlslSetRootConstantsLayout(this SpvcCompiler compiler, ref SpvcHlslRootConstants constantInfo, nuint count)
		{
			fixed (SpvcHlslRootConstants* pconstantInfo = &constantInfo)
			{
				SpvcResult ret = SPIRV.SpvcCompilerHlslSetRootConstantsLayout(compiler, pconstantInfo, count);
				return ret;
			}
		}

		/// <summary>
		/// HLSL specifics.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult HlslSetRootConstantsLayout(this SpvcCompiler compiler, SpvcHlslRootConstants* constantInfo, nuint count)
		{
			SpvcResult ret = SPIRV.SpvcCompilerHlslSetRootConstantsLayout(compiler, constantInfo, count);
			return ret;
		}

		public static SpvcResult HlslAddVertexAttributeRemap(this SpvcCompiler compiler, ref SpvcHlslVertexAttributeRemap remap, nuint remaps)
		{
			fixed (SpvcHlslVertexAttributeRemap* premap = &remap)
			{
				SpvcResult ret = SPIRV.SpvcCompilerHlslAddVertexAttributeRemap(compiler, premap, remaps);
				return ret;
			}
		}

		public static SpvcResult HlslAddVertexAttributeRemap(this SpvcCompiler compiler, SpvcHlslVertexAttributeRemap* remap, nuint remaps)
		{
			SpvcResult ret = SPIRV.SpvcCompilerHlslAddVertexAttributeRemap(compiler, remap, remaps);
			return ret;
		}

		public static uint HlslRemapNumWorkgroupsBuiltin(this SpvcCompiler compiler)
		{
			uint ret = SPIRV.SpvcCompilerHlslRemapNumWorkgroupsBuiltin(compiler);
			return ret;
		}

		public static SpvcResult HlslSetResourceBindingFlags(this SpvcCompiler compiler, uint flags)
		{
			SpvcResult ret = SPIRV.SpvcCompilerHlslSetResourceBindingFlags(compiler, flags);
			return ret;
		}

		public static SpvcResult HlslAddResourceBinding(this SpvcCompiler compiler, ref SpvcHlslResourceBinding binding)
		{
			fixed (SpvcHlslResourceBinding* pbinding = &binding)
			{
				SpvcResult ret = SPIRV.SpvcCompilerHlslAddResourceBinding(compiler, pbinding);
				return ret;
			}
		}

		public static SpvcResult HlslAddResourceBinding(this SpvcCompiler compiler, SpvcHlslResourceBinding* binding)
		{
			SpvcResult ret = SPIRV.SpvcCompilerHlslAddResourceBinding(compiler, binding);
			return ret;
		}

		public static bool HlslIsResourceUsed(this SpvcCompiler compiler, SpvExecutionModel model, uint set, uint binding)
		{
			bool ret = SPIRV.SpvcCompilerHlslIsResourceUsed(compiler, model, set, binding);
			return ret;
		}

		/// <summary>
		/// MSL specifics.
		/// Maps to C++ API.
		/// </summary>
		public static bool MslIsRasterizationDisabled(this SpvcCompiler compiler)
		{
			bool ret = SPIRV.SpvcCompilerMslIsRasterizationDisabled(compiler);
			return ret;
		}

		/// <summary>
		/// Obsolete. Renamed to needs_swizzle_buffer. 
		/// </summary>
		public static bool MslNeedsAuxBuffer(this SpvcCompiler compiler)
		{
			bool ret = SPIRV.SpvcCompilerMslNeedsAuxBuffer(compiler);
			return ret;
		}

		public static bool MslNeedsSwizzleBuffer(this SpvcCompiler compiler)
		{
			bool ret = SPIRV.SpvcCompilerMslNeedsSwizzleBuffer(compiler);
			return ret;
		}

		public static bool MslNeedsBufferSizeBuffer(this SpvcCompiler compiler)
		{
			bool ret = SPIRV.SpvcCompilerMslNeedsBufferSizeBuffer(compiler);
			return ret;
		}

		public static bool MslNeedsOutputBuffer(this SpvcCompiler compiler)
		{
			bool ret = SPIRV.SpvcCompilerMslNeedsOutputBuffer(compiler);
			return ret;
		}

		public static bool MslNeedsPatchOutputBuffer(this SpvcCompiler compiler)
		{
			bool ret = SPIRV.SpvcCompilerMslNeedsPatchOutputBuffer(compiler);
			return ret;
		}

		public static bool MslNeedsInputThreadgroupMem(this SpvcCompiler compiler)
		{
			bool ret = SPIRV.SpvcCompilerMslNeedsInputThreadgroupMem(compiler);
			return ret;
		}

		public static SpvcResult MslAddVertexAttribute(this SpvcCompiler compiler, ref SpvcMslVertexAttribute attrs)
		{
			fixed (SpvcMslVertexAttribute* pattrs = &attrs)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslAddVertexAttribute(compiler, pattrs);
				return ret;
			}
		}

		public static SpvcResult MslAddVertexAttribute(this SpvcCompiler compiler, SpvcMslVertexAttribute* attrs)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslAddVertexAttribute(compiler, attrs);
			return ret;
		}

		public static SpvcResult MslAddResourceBinding(this SpvcCompiler compiler, ref SpvcMslResourceBinding binding)
		{
			fixed (SpvcMslResourceBinding* pbinding = &binding)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslAddResourceBinding(compiler, pbinding);
				return ret;
			}
		}

		public static SpvcResult MslAddResourceBinding(this SpvcCompiler compiler, SpvcMslResourceBinding* binding)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslAddResourceBinding(compiler, binding);
			return ret;
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_input_2(). 
		/// </summary>
		public static SpvcResult MslAddShaderInput(this SpvcCompiler compiler, ref SpvcMslShaderInterfaceVar input)
		{
			fixed (SpvcMslShaderInterfaceVar* pinput = &input)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslAddShaderInput(compiler, pinput);
				return ret;
			}
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_input_2(). 
		/// </summary>
		public static SpvcResult MslAddShaderInput(this SpvcCompiler compiler, SpvcMslShaderInterfaceVar* input)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslAddShaderInput(compiler, input);
			return ret;
		}

		public static SpvcResult MslAddShaderInput2(this SpvcCompiler compiler, ref SpvcMslShaderInterfaceVar2 input)
		{
			fixed (SpvcMslShaderInterfaceVar2* pinput = &input)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslAddShaderInput2(compiler, pinput);
				return ret;
			}
		}

		public static SpvcResult MslAddShaderInput2(this SpvcCompiler compiler, SpvcMslShaderInterfaceVar2* input)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslAddShaderInput2(compiler, input);
			return ret;
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_output_2(). 
		/// </summary>
		public static SpvcResult MslAddShaderOutput(this SpvcCompiler compiler, ref SpvcMslShaderInterfaceVar output)
		{
			fixed (SpvcMslShaderInterfaceVar* poutput = &output)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslAddShaderOutput(compiler, poutput);
				return ret;
			}
		}

		/// <summary>
		/// Deprecated; use spvc_compiler_msl_add_shader_output_2(). 
		/// </summary>
		public static SpvcResult MslAddShaderOutput(this SpvcCompiler compiler, SpvcMslShaderInterfaceVar* output)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslAddShaderOutput(compiler, output);
			return ret;
		}

		public static SpvcResult MslAddShaderOutput2(this SpvcCompiler compiler, ref SpvcMslShaderInterfaceVar2 output)
		{
			fixed (SpvcMslShaderInterfaceVar2* poutput = &output)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslAddShaderOutput2(compiler, poutput);
				return ret;
			}
		}

		public static SpvcResult MslAddShaderOutput2(this SpvcCompiler compiler, SpvcMslShaderInterfaceVar2* output)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslAddShaderOutput2(compiler, output);
			return ret;
		}

		public static SpvcResult MslAddDiscreteDescriptorSet(this SpvcCompiler compiler, uint descSet)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslAddDiscreteDescriptorSet(compiler, descSet);
			return ret;
		}

		public static SpvcResult MslSetArgumentBufferDeviceAddressSpace(this SpvcCompiler compiler, uint descSet, bool deviceAddress)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslSetArgumentBufferDeviceAddressSpace(compiler, descSet, deviceAddress);
			return ret;
		}

		/// <summary>
		/// Obsolete, use is_shader_input_used. 
		/// </summary>
		public static bool MslIsVertexAttributeUsed(this SpvcCompiler compiler, uint location)
		{
			bool ret = SPIRV.SpvcCompilerMslIsVertexAttributeUsed(compiler, location);
			return ret;
		}

		public static bool MslIsShaderInputUsed(this SpvcCompiler compiler, uint location)
		{
			bool ret = SPIRV.SpvcCompilerMslIsShaderInputUsed(compiler, location);
			return ret;
		}

		public static bool MslIsShaderOutputUsed(this SpvcCompiler compiler, uint location)
		{
			bool ret = SPIRV.SpvcCompilerMslIsShaderOutputUsed(compiler, location);
			return ret;
		}

		public static bool MslIsResourceUsed(this SpvcCompiler compiler, SpvExecutionModel model, uint set, uint binding)
		{
			bool ret = SPIRV.SpvcCompilerMslIsResourceUsed(compiler, model, set, binding);
			return ret;
		}

		public static SpvcResult MslRemapConstexprSampler(this SpvcCompiler compiler, uint id, ref SpvcMslConstexprSampler sampler)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSampler(compiler, id, psampler);
				return ret;
			}
		}

		public static SpvcResult MslRemapConstexprSampler(this SpvcCompiler compiler, uint id, SpvcMslConstexprSampler* sampler)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSampler(compiler, id, sampler);
			return ret;
		}

		public static SpvcResult MslRemapConstexprSamplerByBinding(this SpvcCompiler compiler, uint descSet, uint binding, ref SpvcMslConstexprSampler sampler)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerByBinding(compiler, descSet, binding, psampler);
				return ret;
			}
		}

		public static SpvcResult MslRemapConstexprSamplerByBinding(this SpvcCompiler compiler, uint descSet, uint binding, SpvcMslConstexprSampler* sampler)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerByBinding(compiler, descSet, binding, sampler);
			return ret;
		}

		public static SpvcResult MslRemapConstexprSamplerYcbcr(this SpvcCompiler compiler, uint id, ref SpvcMslConstexprSampler sampler, SpvcMslSamplerYcbcrConversion* conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerYcbcr(compiler, id, psampler, conv);
				return ret;
			}
		}

		public static SpvcResult MslRemapConstexprSamplerYcbcr(this SpvcCompiler compiler, uint id, SpvcMslConstexprSampler* sampler, ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerYcbcr(compiler, id, sampler, pconv);
				return ret;
			}
		}

		public static SpvcResult MslRemapConstexprSamplerYcbcr(this SpvcCompiler compiler, uint id, ref SpvcMslConstexprSampler sampler, ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
				{
					SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerYcbcr(compiler, id, psampler, pconv);
					return ret;
				}
			}
		}

		public static SpvcResult MslRemapConstexprSamplerYcbcr(this SpvcCompiler compiler, uint id, SpvcMslConstexprSampler* sampler, SpvcMslSamplerYcbcrConversion* conv)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerYcbcr(compiler, id, sampler, conv);
			return ret;
		}

		public static SpvcResult MslRemapConstexprSamplerByBindingYcbcr(this SpvcCompiler compiler, uint descSet, uint binding, ref SpvcMslConstexprSampler sampler, SpvcMslSamplerYcbcrConversion* conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerByBindingYcbcr(compiler, descSet, binding, psampler, conv);
				return ret;
			}
		}

		public static SpvcResult MslRemapConstexprSamplerByBindingYcbcr(this SpvcCompiler compiler, uint descSet, uint binding, SpvcMslConstexprSampler* sampler, ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerByBindingYcbcr(compiler, descSet, binding, sampler, pconv);
				return ret;
			}
		}

		public static SpvcResult MslRemapConstexprSamplerByBindingYcbcr(this SpvcCompiler compiler, uint descSet, uint binding, ref SpvcMslConstexprSampler sampler, ref SpvcMslSamplerYcbcrConversion conv)
		{
			fixed (SpvcMslConstexprSampler* psampler = &sampler)
			{
				fixed (SpvcMslSamplerYcbcrConversion* pconv = &conv)
				{
					SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerByBindingYcbcr(compiler, descSet, binding, psampler, pconv);
					return ret;
				}
			}
		}

		public static SpvcResult MslRemapConstexprSamplerByBindingYcbcr(this SpvcCompiler compiler, uint descSet, uint binding, SpvcMslConstexprSampler* sampler, SpvcMslSamplerYcbcrConversion* conv)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslRemapConstexprSamplerByBindingYcbcr(compiler, descSet, binding, sampler, conv);
			return ret;
		}

		public static SpvcResult MslSetFragmentOutputComponents(this SpvcCompiler compiler, uint location, uint components)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslSetFragmentOutputComponents(compiler, location, components);
			return ret;
		}

		public static uint MslGetAutomaticResourceBinding(this SpvcCompiler compiler, uint id)
		{
			uint ret = SPIRV.SpvcCompilerMslGetAutomaticResourceBinding(compiler, id);
			return ret;
		}

		public static uint MslGetAutomaticResourceBindingSecondary(this SpvcCompiler compiler, uint id)
		{
			uint ret = SPIRV.SpvcCompilerMslGetAutomaticResourceBindingSecondary(compiler, id);
			return ret;
		}

		public static SpvcResult MslAddDynamicBuffer(this SpvcCompiler compiler, uint descSet, uint binding, uint index)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslAddDynamicBuffer(compiler, descSet, binding, index);
			return ret;
		}

		public static SpvcResult MslAddInlineUniformBlock(this SpvcCompiler compiler, uint descSet, uint binding)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslAddInlineUniformBlock(compiler, descSet, binding);
			return ret;
		}

		public static SpvcResult MslSetCombinedSamplerSuffix(this SpvcCompiler compiler, ref byte suffix)
		{
			fixed (byte* psuffix = &suffix)
			{
				SpvcResult ret = SPIRV.SpvcCompilerMslSetCombinedSamplerSuffix(compiler, psuffix);
				return ret;
			}
		}

		public static SpvcResult MslSetCombinedSamplerSuffix(this SpvcCompiler compiler, string suffix)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(suffix);
			SpvcResult ret = SPIRV.SpvcCompilerMslSetCombinedSamplerSuffix(compiler, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static SpvcResult MslSetCombinedSamplerSuffix(this SpvcCompiler compiler, byte* suffix)
		{
			SpvcResult ret = SPIRV.SpvcCompilerMslSetCombinedSamplerSuffix(compiler, suffix);
			return ret;
		}

		public static string MslGetCombinedSamplerSuffixS(this SpvcCompiler compiler)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcCompilerMslGetCombinedSamplerSuffix(compiler));
			return ret;
		}

		public static byte* MslGetCombinedSamplerSuffix(this SpvcCompiler compiler)
		{
			byte* ret = SPIRV.SpvcCompilerMslGetCombinedSamplerSuffix(compiler);
			return ret;
		}

		/// <summary>
		/// Reflect resources.
		/// Maps almost 1:1 to C++ API.
		/// </summary>
		public static SpvcResult GetActiveInterfaceVariables(this SpvcCompiler compiler, ref SpvcSet set)
		{
			fixed (SpvcSet* pset = &set)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetActiveInterfaceVariables(compiler, pset);
				return ret;
			}
		}

		/// <summary>
		/// Reflect resources.
		/// Maps almost 1:1 to C++ API.
		/// </summary>
		public static SpvcResult GetActiveInterfaceVariables(this SpvcCompiler compiler, SpvcSet* set)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetActiveInterfaceVariables(compiler, set);
			return ret;
		}

		public static SpvcResult SetEnabledInterfaceVariables(this SpvcCompiler compiler, SpvcSet set)
		{
			SpvcResult ret = SPIRV.SpvcCompilerSetEnabledInterfaceVariables(compiler, set);
			return ret;
		}

		public static SpvcResult CreateShaderResources(this SpvcCompiler compiler, ref SpvcResources resources)
		{
			fixed (SpvcResources* presources = &resources)
			{
				SpvcResult ret = SPIRV.SpvcCompilerCreateShaderResources(compiler, presources);
				return ret;
			}
		}

		public static SpvcResult CreateShaderResources(this SpvcCompiler compiler, SpvcResources* resources)
		{
			SpvcResult ret = SPIRV.SpvcCompilerCreateShaderResources(compiler, resources);
			return ret;
		}

		public static SpvcResult CreateShaderResourcesForActiveVariables(this SpvcCompiler compiler, ref SpvcResources resources, SpvcSet active)
		{
			fixed (SpvcResources* presources = &resources)
			{
				SpvcResult ret = SPIRV.SpvcCompilerCreateShaderResourcesForActiveVariables(compiler, presources, active);
				return ret;
			}
		}

		public static SpvcResult CreateShaderResourcesForActiveVariables(this SpvcCompiler compiler, SpvcResources* resources, SpvcSet active)
		{
			SpvcResult ret = SPIRV.SpvcCompilerCreateShaderResourcesForActiveVariables(compiler, resources, active);
			return ret;
		}

		/// <summary>
		/// Decorations.
		/// Maps to C++ API.
		/// </summary>
		public static void SetDecoration(this SpvcCompiler compiler, SpvId id, SpvDecoration decoration, uint argument)
		{
			SPIRV.SpvcCompilerSetDecoration(compiler, id, decoration, argument);
		}

		public static void SetDecorationString(this SpvcCompiler compiler, SpvId id, SpvDecoration decoration, ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				SPIRV.SpvcCompilerSetDecorationString(compiler, id, decoration, pargument);
			}
		}

		public static void SetDecorationString(this SpvcCompiler compiler, SpvId id, SpvDecoration decoration, string argument)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(argument);
			SPIRV.SpvcCompilerSetDecorationString(compiler, id, decoration, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		public static void SetDecorationString(this SpvcCompiler compiler, SpvId id, SpvDecoration decoration, byte* argument)
		{
			SPIRV.SpvcCompilerSetDecorationString(compiler, id, decoration, argument);
		}

		public static void SetName(this SpvcCompiler compiler, SpvId id, ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				SPIRV.SpvcCompilerSetName(compiler, id, pargument);
			}
		}

		public static void SetName(this SpvcCompiler compiler, SpvId id, string argument)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(argument);
			SPIRV.SpvcCompilerSetName(compiler, id, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		public static void SetName(this SpvcCompiler compiler, SpvId id, byte* argument)
		{
			SPIRV.SpvcCompilerSetName(compiler, id, argument);
		}

		public static void SetMemberDecoration(this SpvcCompiler compiler, uint id, uint memberIndex, SpvDecoration decoration, uint argument)
		{
			SPIRV.SpvcCompilerSetMemberDecoration(compiler, id, memberIndex, decoration, argument);
		}

		public static void SetMemberDecorationString(this SpvcCompiler compiler, uint id, uint memberIndex, SpvDecoration decoration, ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				SPIRV.SpvcCompilerSetMemberDecorationString(compiler, id, memberIndex, decoration, pargument);
			}
		}

		public static void SetMemberDecorationString(this SpvcCompiler compiler, uint id, uint memberIndex, SpvDecoration decoration, string argument)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(argument);
			SPIRV.SpvcCompilerSetMemberDecorationString(compiler, id, memberIndex, decoration, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		public static void SetMemberDecorationString(this SpvcCompiler compiler, uint id, uint memberIndex, SpvDecoration decoration, byte* argument)
		{
			SPIRV.SpvcCompilerSetMemberDecorationString(compiler, id, memberIndex, decoration, argument);
		}

		public static void SetMemberName(this SpvcCompiler compiler, uint id, uint memberIndex, ref byte argument)
		{
			fixed (byte* pargument = &argument)
			{
				SPIRV.SpvcCompilerSetMemberName(compiler, id, memberIndex, pargument);
			}
		}

		public static void SetMemberName(this SpvcCompiler compiler, uint id, uint memberIndex, string argument)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(argument);
			SPIRV.SpvcCompilerSetMemberName(compiler, id, memberIndex, pStr0);
			Marshal.FreeHGlobal((nint)pStr0);
		}

		public static void SetMemberName(this SpvcCompiler compiler, uint id, uint memberIndex, byte* argument)
		{
			SPIRV.SpvcCompilerSetMemberName(compiler, id, memberIndex, argument);
		}

		public static void UnsetDecoration(this SpvcCompiler compiler, SpvId id, SpvDecoration decoration)
		{
			SPIRV.SpvcCompilerUnsetDecoration(compiler, id, decoration);
		}

		public static void UnsetMemberDecoration(this SpvcCompiler compiler, uint id, uint memberIndex, SpvDecoration decoration)
		{
			SPIRV.SpvcCompilerUnsetMemberDecoration(compiler, id, memberIndex, decoration);
		}

		public static bool HasDecoration(this SpvcCompiler compiler, SpvId id, SpvDecoration decoration)
		{
			bool ret = SPIRV.SpvcCompilerHasDecoration(compiler, id, decoration);
			return ret;
		}

		public static bool HasMemberDecoration(this SpvcCompiler compiler, uint id, uint memberIndex, SpvDecoration decoration)
		{
			bool ret = SPIRV.SpvcCompilerHasMemberDecoration(compiler, id, memberIndex, decoration);
			return ret;
		}

		public static string GetNameS(this SpvcCompiler compiler, SpvId id)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcCompilerGetName(compiler, id));
			return ret;
		}

		public static byte* GetName(this SpvcCompiler compiler, SpvId id)
		{
			byte* ret = SPIRV.SpvcCompilerGetName(compiler, id);
			return ret;
		}

		public static uint GetDecoration(this SpvcCompiler compiler, SpvId id, SpvDecoration decoration)
		{
			uint ret = SPIRV.SpvcCompilerGetDecoration(compiler, id, decoration);
			return ret;
		}

		public static string GetDecorationStringS(this SpvcCompiler compiler, SpvId id, SpvDecoration decoration)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcCompilerGetDecorationString(compiler, id, decoration));
			return ret;
		}

		public static byte* GetDecorationString(this SpvcCompiler compiler, SpvId id, SpvDecoration decoration)
		{
			byte* ret = SPIRV.SpvcCompilerGetDecorationString(compiler, id, decoration);
			return ret;
		}

		public static uint GetMemberDecoration(this SpvcCompiler compiler, uint id, uint memberIndex, SpvDecoration decoration)
		{
			uint ret = SPIRV.SpvcCompilerGetMemberDecoration(compiler, id, memberIndex, decoration);
			return ret;
		}

		public static string GetMemberDecorationStringS(this SpvcCompiler compiler, uint id, uint memberIndex, SpvDecoration decoration)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcCompilerGetMemberDecorationString(compiler, id, memberIndex, decoration));
			return ret;
		}

		public static byte* GetMemberDecorationString(this SpvcCompiler compiler, uint id, uint memberIndex, SpvDecoration decoration)
		{
			byte* ret = SPIRV.SpvcCompilerGetMemberDecorationString(compiler, id, memberIndex, decoration);
			return ret;
		}

		public static string GetMemberNameS(this SpvcCompiler compiler, uint id, uint memberIndex)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcCompilerGetMemberName(compiler, id, memberIndex));
			return ret;
		}

		public static byte* GetMemberName(this SpvcCompiler compiler, uint id, uint memberIndex)
		{
			byte* ret = SPIRV.SpvcCompilerGetMemberName(compiler, id, memberIndex);
			return ret;
		}

		/// <summary>
		/// Entry points.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetEntryPoints(this SpvcCompiler compiler, ref SpvcEntryPoint* entryPoints, nuint* numEntryPoints)
		{
			fixed (SpvcEntryPoint** pentryPoints = &entryPoints)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetEntryPoints(compiler, pentryPoints, numEntryPoints);
				return ret;
			}
		}

		/// <summary>
		/// Entry points.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetEntryPoints(this SpvcCompiler compiler, SpvcEntryPoint** entryPoints, ref nuint numEntryPoints)
		{
			fixed (nuint* pnumEntryPoints = &numEntryPoints)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetEntryPoints(compiler, entryPoints, pnumEntryPoints);
				return ret;
			}
		}

		/// <summary>
		/// Entry points.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetEntryPoints(this SpvcCompiler compiler, ref SpvcEntryPoint* entryPoints, ref nuint numEntryPoints)
		{
			fixed (SpvcEntryPoint** pentryPoints = &entryPoints)
			{
				fixed (nuint* pnumEntryPoints = &numEntryPoints)
				{
					SpvcResult ret = SPIRV.SpvcCompilerGetEntryPoints(compiler, pentryPoints, pnumEntryPoints);
					return ret;
				}
			}
		}

		/// <summary>
		/// Entry points.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetEntryPoints(this SpvcCompiler compiler, SpvcEntryPoint** entryPoints, nuint* numEntryPoints)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetEntryPoints(compiler, entryPoints, numEntryPoints);
			return ret;
		}

		public static SpvcResult SetEntryPoint(this SpvcCompiler compiler, ref byte name, SpvExecutionModel model)
		{
			fixed (byte* pname = &name)
			{
				SpvcResult ret = SPIRV.SpvcCompilerSetEntryPoint(compiler, pname, model);
				return ret;
			}
		}

		public static SpvcResult SetEntryPoint(this SpvcCompiler compiler, string name, SpvExecutionModel model)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(name);
			SpvcResult ret = SPIRV.SpvcCompilerSetEntryPoint(compiler, pStr0, model);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static SpvcResult SetEntryPoint(this SpvcCompiler compiler, byte* name, SpvExecutionModel model)
		{
			SpvcResult ret = SPIRV.SpvcCompilerSetEntryPoint(compiler, name, model);
			return ret;
		}

		public static SpvcResult RenameEntryPoint(this SpvcCompiler compiler, ref byte oldName, byte* newName, SpvExecutionModel model)
		{
			fixed (byte* poldName = &oldName)
			{
				SpvcResult ret = SPIRV.SpvcCompilerRenameEntryPoint(compiler, poldName, newName, model);
				return ret;
			}
		}

		public static SpvcResult RenameEntryPoint(this SpvcCompiler compiler, string oldName, byte* newName, SpvExecutionModel model)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(oldName);
			SpvcResult ret = SPIRV.SpvcCompilerRenameEntryPoint(compiler, pStr0, newName, model);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static SpvcResult RenameEntryPoint(this SpvcCompiler compiler, byte* oldName, ref byte newName, SpvExecutionModel model)
		{
			fixed (byte* pnewName = &newName)
			{
				SpvcResult ret = SPIRV.SpvcCompilerRenameEntryPoint(compiler, oldName, pnewName, model);
				return ret;
			}
		}

		public static SpvcResult RenameEntryPoint(this SpvcCompiler compiler, byte* oldName, string newName, SpvExecutionModel model)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(newName);
			SpvcResult ret = SPIRV.SpvcCompilerRenameEntryPoint(compiler, oldName, pStr0, model);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static SpvcResult RenameEntryPoint(this SpvcCompiler compiler, ref byte oldName, ref byte newName, SpvExecutionModel model)
		{
			fixed (byte* poldName = &oldName)
			{
				fixed (byte* pnewName = &newName)
				{
					SpvcResult ret = SPIRV.SpvcCompilerRenameEntryPoint(compiler, poldName, pnewName, model);
					return ret;
				}
			}
		}

		public static SpvcResult RenameEntryPoint(this SpvcCompiler compiler, string oldName, string newName, SpvExecutionModel model)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(oldName);
			byte* pStr1 = (byte*)Marshal.StringToHGlobalAnsi(newName);
			SpvcResult ret = SPIRV.SpvcCompilerRenameEntryPoint(compiler, pStr0, pStr1, model);
			Marshal.FreeHGlobal((nint)pStr1);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static SpvcResult RenameEntryPoint(this SpvcCompiler compiler, byte* oldName, byte* newName, SpvExecutionModel model)
		{
			SpvcResult ret = SPIRV.SpvcCompilerRenameEntryPoint(compiler, oldName, newName, model);
			return ret;
		}

		public static string GetCleansedEntryPointNameS(this SpvcCompiler compiler, ref byte name, SpvExecutionModel model)
		{
			fixed (byte* pname = &name)
			{
				string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcCompilerGetCleansedEntryPointName(compiler, pname, model));
				return ret;
			}
		}

		public static byte* GetCleansedEntryPointName(this SpvcCompiler compiler, ref byte name, SpvExecutionModel model)
		{
			fixed (byte* pname = &name)
			{
				byte* ret = SPIRV.SpvcCompilerGetCleansedEntryPointName(compiler, pname, model);
				return ret;
			}
		}

		public static string GetCleansedEntryPointNameS(this SpvcCompiler compiler, string name, SpvExecutionModel model)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(name);
			string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcCompilerGetCleansedEntryPointName(compiler, pStr0, model));
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static byte* GetCleansedEntryPointName(this SpvcCompiler compiler, string name, SpvExecutionModel model)
		{
			byte* pStr0 = (byte*)Marshal.StringToHGlobalAnsi(name);
			byte* ret = SPIRV.SpvcCompilerGetCleansedEntryPointName(compiler, pStr0, model);
			Marshal.FreeHGlobal((nint)pStr0);
			return ret;
		}

		public static string GetCleansedEntryPointNameS(this SpvcCompiler compiler, byte* name, SpvExecutionModel model)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcCompilerGetCleansedEntryPointName(compiler, name, model));
			return ret;
		}

		public static byte* GetCleansedEntryPointName(this SpvcCompiler compiler, byte* name, SpvExecutionModel model)
		{
			byte* ret = SPIRV.SpvcCompilerGetCleansedEntryPointName(compiler, name, model);
			return ret;
		}

		public static void SetExecutionMode(this SpvcCompiler compiler, SpvExecutionMode mode)
		{
			SPIRV.SpvcCompilerSetExecutionMode(compiler, mode);
		}

		public static void UnsetExecutionMode(this SpvcCompiler compiler, SpvExecutionMode mode)
		{
			SPIRV.SpvcCompilerUnsetExecutionMode(compiler, mode);
		}

		public static void SetExecutionModeWithArguments(this SpvcCompiler compiler, SpvExecutionMode mode, uint arg0, uint arg1, uint arg2)
		{
			SPIRV.SpvcCompilerSetExecutionModeWithArguments(compiler, mode, arg0, arg1, arg2);
		}

		public static SpvcResult GetExecutionModes(this SpvcCompiler compiler, ref SpvExecutionMode* modes, nuint* numModes)
		{
			fixed (SpvExecutionMode** pmodes = &modes)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetExecutionModes(compiler, pmodes, numModes);
				return ret;
			}
		}

		public static SpvcResult GetExecutionModes(this SpvcCompiler compiler, SpvExecutionMode** modes, ref nuint numModes)
		{
			fixed (nuint* pnumModes = &numModes)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetExecutionModes(compiler, modes, pnumModes);
				return ret;
			}
		}

		public static SpvcResult GetExecutionModes(this SpvcCompiler compiler, ref SpvExecutionMode* modes, ref nuint numModes)
		{
			fixed (SpvExecutionMode** pmodes = &modes)
			{
				fixed (nuint* pnumModes = &numModes)
				{
					SpvcResult ret = SPIRV.SpvcCompilerGetExecutionModes(compiler, pmodes, pnumModes);
					return ret;
				}
			}
		}

		public static SpvcResult GetExecutionModes(this SpvcCompiler compiler, SpvExecutionMode** modes, nuint* numModes)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetExecutionModes(compiler, modes, numModes);
			return ret;
		}

		public static uint GetExecutionModeArgument(this SpvcCompiler compiler, SpvExecutionMode mode)
		{
			uint ret = SPIRV.SpvcCompilerGetExecutionModeArgument(compiler, mode);
			return ret;
		}

		public static uint GetExecutionModeArgumentByIndex(this SpvcCompiler compiler, SpvExecutionMode mode, uint index)
		{
			uint ret = SPIRV.SpvcCompilerGetExecutionModeArgumentByIndex(compiler, mode, index);
			return ret;
		}

		public static SpvExecutionModel GetExecutionModel(this SpvcCompiler compiler)
		{
			SpvExecutionModel ret = SPIRV.SpvcCompilerGetExecutionModel(compiler);
			return ret;
		}

		public static void UpdateActiveBuiltins(this SpvcCompiler compiler)
		{
			SPIRV.SpvcCompilerUpdateActiveBuiltins(compiler);
		}

		public static bool HasActiveBuiltin(this SpvcCompiler compiler, SpvBuiltIn builtin, SpvStorageClass storage)
		{
			bool ret = SPIRV.SpvcCompilerHasActiveBuiltin(compiler, builtin, storage);
			return ret;
		}

		/// <summary>
		/// Type query interface.
		/// Maps to C++ API, except it's read-only.
		/// </summary>
		public static SpvcType GetTypeHandle(this SpvcCompiler compiler, uint id)
		{
			SpvcType ret = SPIRV.SpvcCompilerGetTypeHandle(compiler, id);
			return ret;
		}

		/// <summary>
		/// Buffer layout query.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetDeclaredStructSize(this SpvcCompiler compiler, SpvcType structType, ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredStructSize(compiler, structType, psize);
				return ret;
			}
		}

		/// <summary>
		/// Buffer layout query.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetDeclaredStructSize(this SpvcCompiler compiler, SpvcType structType, nuint* size)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredStructSize(compiler, structType, size);
			return ret;
		}

		public static SpvcResult GetDeclaredStructSizeRuntimeArray(this SpvcCompiler compiler, SpvcType structType, nuint arraySize, ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredStructSizeRuntimeArray(compiler, structType, arraySize, psize);
				return ret;
			}
		}

		public static SpvcResult GetDeclaredStructSizeRuntimeArray(this SpvcCompiler compiler, SpvcType structType, nuint arraySize, nuint* size)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredStructSizeRuntimeArray(compiler, structType, arraySize, size);
			return ret;
		}

		public static SpvcResult GetDeclaredStructMemberSize(this SpvcCompiler compiler, SpvcType type, uint index, ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredStructMemberSize(compiler, type, index, psize);
				return ret;
			}
		}

		public static SpvcResult GetDeclaredStructMemberSize(this SpvcCompiler compiler, SpvcType type, uint index, nuint* size)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredStructMemberSize(compiler, type, index, size);
			return ret;
		}

		public static SpvcResult TypeStructMemberOffset(this SpvcCompiler compiler, SpvcType type, uint index, ref uint offset)
		{
			fixed (uint* poffset = &offset)
			{
				SpvcResult ret = SPIRV.SpvcCompilerTypeStructMemberOffset(compiler, type, index, poffset);
				return ret;
			}
		}

		public static SpvcResult TypeStructMemberOffset(this SpvcCompiler compiler, SpvcType type, uint index, uint* offset)
		{
			SpvcResult ret = SPIRV.SpvcCompilerTypeStructMemberOffset(compiler, type, index, offset);
			return ret;
		}

		public static SpvcResult TypeStructMemberArrayStride(this SpvcCompiler compiler, SpvcType type, uint index, ref uint stride)
		{
			fixed (uint* pstride = &stride)
			{
				SpvcResult ret = SPIRV.SpvcCompilerTypeStructMemberArrayStride(compiler, type, index, pstride);
				return ret;
			}
		}

		public static SpvcResult TypeStructMemberArrayStride(this SpvcCompiler compiler, SpvcType type, uint index, uint* stride)
		{
			SpvcResult ret = SPIRV.SpvcCompilerTypeStructMemberArrayStride(compiler, type, index, stride);
			return ret;
		}

		public static SpvcResult TypeStructMemberMatrixStride(this SpvcCompiler compiler, SpvcType type, uint index, ref uint stride)
		{
			fixed (uint* pstride = &stride)
			{
				SpvcResult ret = SPIRV.SpvcCompilerTypeStructMemberMatrixStride(compiler, type, index, pstride);
				return ret;
			}
		}

		public static SpvcResult TypeStructMemberMatrixStride(this SpvcCompiler compiler, SpvcType type, uint index, uint* stride)
		{
			SpvcResult ret = SPIRV.SpvcCompilerTypeStructMemberMatrixStride(compiler, type, index, stride);
			return ret;
		}

		/// <summary>
		/// Workaround helper functions.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult BuildDummySamplerForCombinedImages(this SpvcCompiler compiler, ref uint id)
		{
			fixed (uint* pid = &id)
			{
				SpvcResult ret = SPIRV.SpvcCompilerBuildDummySamplerForCombinedImages(compiler, pid);
				return ret;
			}
		}

		/// <summary>
		/// Workaround helper functions.
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult BuildDummySamplerForCombinedImages(this SpvcCompiler compiler, uint* id)
		{
			SpvcResult ret = SPIRV.SpvcCompilerBuildDummySamplerForCombinedImages(compiler, id);
			return ret;
		}

		public static SpvcResult BuildCombinedImageSamplers(this SpvcCompiler compiler)
		{
			SpvcResult ret = SPIRV.SpvcCompilerBuildCombinedImageSamplers(compiler);
			return ret;
		}

		public static SpvcResult GetCombinedImageSamplers(this SpvcCompiler compiler, ref SpvcCombinedImageSampler* samplers, nuint* numSamplers)
		{
			fixed (SpvcCombinedImageSampler** psamplers = &samplers)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetCombinedImageSamplers(compiler, psamplers, numSamplers);
				return ret;
			}
		}

		public static SpvcResult GetCombinedImageSamplers(this SpvcCompiler compiler, SpvcCombinedImageSampler** samplers, ref nuint numSamplers)
		{
			fixed (nuint* pnumSamplers = &numSamplers)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetCombinedImageSamplers(compiler, samplers, pnumSamplers);
				return ret;
			}
		}

		public static SpvcResult GetCombinedImageSamplers(this SpvcCompiler compiler, ref SpvcCombinedImageSampler* samplers, ref nuint numSamplers)
		{
			fixed (SpvcCombinedImageSampler** psamplers = &samplers)
			{
				fixed (nuint* pnumSamplers = &numSamplers)
				{
					SpvcResult ret = SPIRV.SpvcCompilerGetCombinedImageSamplers(compiler, psamplers, pnumSamplers);
					return ret;
				}
			}
		}

		public static SpvcResult GetCombinedImageSamplers(this SpvcCompiler compiler, SpvcCombinedImageSampler** samplers, nuint* numSamplers)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetCombinedImageSamplers(compiler, samplers, numSamplers);
			return ret;
		}

		/// <summary>
		/// Constants
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetSpecializationConstants(this SpvcCompiler compiler, ref SpvcSpecializationConstant* constants, nuint* numConstants)
		{
			fixed (SpvcSpecializationConstant** pconstants = &constants)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetSpecializationConstants(compiler, pconstants, numConstants);
				return ret;
			}
		}

		/// <summary>
		/// Constants
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetSpecializationConstants(this SpvcCompiler compiler, SpvcSpecializationConstant** constants, ref nuint numConstants)
		{
			fixed (nuint* pnumConstants = &numConstants)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetSpecializationConstants(compiler, constants, pnumConstants);
				return ret;
			}
		}

		/// <summary>
		/// Constants
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetSpecializationConstants(this SpvcCompiler compiler, ref SpvcSpecializationConstant* constants, ref nuint numConstants)
		{
			fixed (SpvcSpecializationConstant** pconstants = &constants)
			{
				fixed (nuint* pnumConstants = &numConstants)
				{
					SpvcResult ret = SPIRV.SpvcCompilerGetSpecializationConstants(compiler, pconstants, pnumConstants);
					return ret;
				}
			}
		}

		/// <summary>
		/// Constants
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetSpecializationConstants(this SpvcCompiler compiler, SpvcSpecializationConstant** constants, nuint* numConstants)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetSpecializationConstants(compiler, constants, numConstants);
			return ret;
		}

		public static SpvcConstant GetConstantHandle(this SpvcCompiler compiler, uint id)
		{
			SpvcConstant ret = SPIRV.SpvcCompilerGetConstantHandle(compiler, id);
			return ret;
		}

		public static uint GetWorkGroupSizeSpecializationConstants(this SpvcCompiler compiler, ref SpvcSpecializationConstant x, SpvcSpecializationConstant* y, SpvcSpecializationConstant* z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				uint ret = SPIRV.SpvcCompilerGetWorkGroupSizeSpecializationConstants(compiler, px, y, z);
				return ret;
			}
		}

		public static uint GetWorkGroupSizeSpecializationConstants(this SpvcCompiler compiler, SpvcSpecializationConstant* x, ref SpvcSpecializationConstant y, SpvcSpecializationConstant* z)
		{
			fixed (SpvcSpecializationConstant* py = &y)
			{
				uint ret = SPIRV.SpvcCompilerGetWorkGroupSizeSpecializationConstants(compiler, x, py, z);
				return ret;
			}
		}

		public static uint GetWorkGroupSizeSpecializationConstants(this SpvcCompiler compiler, ref SpvcSpecializationConstant x, ref SpvcSpecializationConstant y, SpvcSpecializationConstant* z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				fixed (SpvcSpecializationConstant* py = &y)
				{
					uint ret = SPIRV.SpvcCompilerGetWorkGroupSizeSpecializationConstants(compiler, px, py, z);
					return ret;
				}
			}
		}

		public static uint GetWorkGroupSizeSpecializationConstants(this SpvcCompiler compiler, SpvcSpecializationConstant* x, SpvcSpecializationConstant* y, ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* pz = &z)
			{
				uint ret = SPIRV.SpvcCompilerGetWorkGroupSizeSpecializationConstants(compiler, x, y, pz);
				return ret;
			}
		}

		public static uint GetWorkGroupSizeSpecializationConstants(this SpvcCompiler compiler, ref SpvcSpecializationConstant x, SpvcSpecializationConstant* y, ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				fixed (SpvcSpecializationConstant* pz = &z)
				{
					uint ret = SPIRV.SpvcCompilerGetWorkGroupSizeSpecializationConstants(compiler, px, y, pz);
					return ret;
				}
			}
		}

		public static uint GetWorkGroupSizeSpecializationConstants(this SpvcCompiler compiler, SpvcSpecializationConstant* x, ref SpvcSpecializationConstant y, ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* py = &y)
			{
				fixed (SpvcSpecializationConstant* pz = &z)
				{
					uint ret = SPIRV.SpvcCompilerGetWorkGroupSizeSpecializationConstants(compiler, x, py, pz);
					return ret;
				}
			}
		}

		public static uint GetWorkGroupSizeSpecializationConstants(this SpvcCompiler compiler, ref SpvcSpecializationConstant x, ref SpvcSpecializationConstant y, ref SpvcSpecializationConstant z)
		{
			fixed (SpvcSpecializationConstant* px = &x)
			{
				fixed (SpvcSpecializationConstant* py = &y)
				{
					fixed (SpvcSpecializationConstant* pz = &z)
					{
						uint ret = SPIRV.SpvcCompilerGetWorkGroupSizeSpecializationConstants(compiler, px, py, pz);
						return ret;
					}
				}
			}
		}

		public static uint GetWorkGroupSizeSpecializationConstants(this SpvcCompiler compiler, SpvcSpecializationConstant* x, SpvcSpecializationConstant* y, SpvcSpecializationConstant* z)
		{
			uint ret = SPIRV.SpvcCompilerGetWorkGroupSizeSpecializationConstants(compiler, x, y, z);
			return ret;
		}

		/// <summary>
		/// Buffer ranges
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetActiveBufferRanges(this SpvcCompiler compiler, uint id, ref SpvcBufferRange* ranges, nuint* numRanges)
		{
			fixed (SpvcBufferRange** pranges = &ranges)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetActiveBufferRanges(compiler, id, pranges, numRanges);
				return ret;
			}
		}

		/// <summary>
		/// Buffer ranges
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetActiveBufferRanges(this SpvcCompiler compiler, uint id, SpvcBufferRange** ranges, ref nuint numRanges)
		{
			fixed (nuint* pnumRanges = &numRanges)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetActiveBufferRanges(compiler, id, ranges, pnumRanges);
				return ret;
			}
		}

		/// <summary>
		/// Buffer ranges
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetActiveBufferRanges(this SpvcCompiler compiler, uint id, ref SpvcBufferRange* ranges, ref nuint numRanges)
		{
			fixed (SpvcBufferRange** pranges = &ranges)
			{
				fixed (nuint* pnumRanges = &numRanges)
				{
					SpvcResult ret = SPIRV.SpvcCompilerGetActiveBufferRanges(compiler, id, pranges, pnumRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Buffer ranges
		/// Maps to C++ API.
		/// </summary>
		public static SpvcResult GetActiveBufferRanges(this SpvcCompiler compiler, uint id, SpvcBufferRange** ranges, nuint* numRanges)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetActiveBufferRanges(compiler, id, ranges, numRanges);
			return ret;
		}

		/// <summary>
		/// Misc reflection
		/// Maps to C++ API.
		/// </summary>
		public static bool GetBinaryOffsetForDecoration(this SpvcCompiler compiler, uint id, SpvDecoration decoration, ref uint wordOffset)
		{
			fixed (uint* pwordOffset = &wordOffset)
			{
				bool ret = SPIRV.SpvcCompilerGetBinaryOffsetForDecoration(compiler, id, decoration, pwordOffset);
				return ret;
			}
		}

		/// <summary>
		/// Misc reflection
		/// Maps to C++ API.
		/// </summary>
		public static bool GetBinaryOffsetForDecoration(this SpvcCompiler compiler, uint id, SpvDecoration decoration, uint* wordOffset)
		{
			bool ret = SPIRV.SpvcCompilerGetBinaryOffsetForDecoration(compiler, id, decoration, wordOffset);
			return ret;
		}

		public static bool BufferIsHlslCounterBuffer(this SpvcCompiler compiler, uint id)
		{
			bool ret = SPIRV.SpvcCompilerBufferIsHlslCounterBuffer(compiler, id);
			return ret;
		}

		public static bool BufferGetHlslCounterBuffer(this SpvcCompiler compiler, uint id, ref uint counterId)
		{
			fixed (uint* pcounterId = &counterId)
			{
				bool ret = SPIRV.SpvcCompilerBufferGetHlslCounterBuffer(compiler, id, pcounterId);
				return ret;
			}
		}

		public static bool BufferGetHlslCounterBuffer(this SpvcCompiler compiler, uint id, uint* counterId)
		{
			bool ret = SPIRV.SpvcCompilerBufferGetHlslCounterBuffer(compiler, id, counterId);
			return ret;
		}

		public static SpvcResult GetDeclaredCapabilities(this SpvcCompiler compiler, ref SpvCapability* capabilities, nuint* numCapabilities)
		{
			fixed (SpvCapability** pcapabilities = &capabilities)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredCapabilities(compiler, pcapabilities, numCapabilities);
				return ret;
			}
		}

		public static SpvcResult GetDeclaredCapabilities(this SpvcCompiler compiler, SpvCapability** capabilities, ref nuint numCapabilities)
		{
			fixed (nuint* pnumCapabilities = &numCapabilities)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredCapabilities(compiler, capabilities, pnumCapabilities);
				return ret;
			}
		}

		public static SpvcResult GetDeclaredCapabilities(this SpvcCompiler compiler, ref SpvCapability* capabilities, ref nuint numCapabilities)
		{
			fixed (SpvCapability** pcapabilities = &capabilities)
			{
				fixed (nuint* pnumCapabilities = &numCapabilities)
				{
					SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredCapabilities(compiler, pcapabilities, pnumCapabilities);
					return ret;
				}
			}
		}

		public static SpvcResult GetDeclaredCapabilities(this SpvcCompiler compiler, SpvCapability** capabilities, nuint* numCapabilities)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredCapabilities(compiler, capabilities, numCapabilities);
			return ret;
		}

		public static SpvcResult GetDeclaredExtensions(this SpvcCompiler compiler, ref byte** extensions, nuint* numExtensions)
		{
			fixed (byte*** pextensions = &extensions)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredExtensions(compiler, pextensions, numExtensions);
				return ret;
			}
		}

		public static SpvcResult GetDeclaredExtensions(this SpvcCompiler compiler, byte*** extensions, ref nuint numExtensions)
		{
			fixed (nuint* pnumExtensions = &numExtensions)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredExtensions(compiler, extensions, pnumExtensions);
				return ret;
			}
		}

		public static SpvcResult GetDeclaredExtensions(this SpvcCompiler compiler, ref byte** extensions, ref nuint numExtensions)
		{
			fixed (byte*** pextensions = &extensions)
			{
				fixed (nuint* pnumExtensions = &numExtensions)
				{
					SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredExtensions(compiler, pextensions, pnumExtensions);
					return ret;
				}
			}
		}

		public static SpvcResult GetDeclaredExtensions(this SpvcCompiler compiler, byte*** extensions, nuint* numExtensions)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetDeclaredExtensions(compiler, extensions, numExtensions);
			return ret;
		}

		public static string GetRemappedDeclaredBlockNameS(this SpvcCompiler compiler, uint id)
		{
			string ret = Marshal.PtrToStringAnsi((nint)SPIRV.SpvcCompilerGetRemappedDeclaredBlockName(compiler, id));
			return ret;
		}

		public static byte* GetRemappedDeclaredBlockName(this SpvcCompiler compiler, uint id)
		{
			byte* ret = SPIRV.SpvcCompilerGetRemappedDeclaredBlockName(compiler, id);
			return ret;
		}

		public static SpvcResult GetBufferBlockDecorations(this SpvcCompiler compiler, uint id, ref SpvDecoration* decorations, nuint* numDecorations)
		{
			fixed (SpvDecoration** pdecorations = &decorations)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetBufferBlockDecorations(compiler, id, pdecorations, numDecorations);
				return ret;
			}
		}

		public static SpvcResult GetBufferBlockDecorations(this SpvcCompiler compiler, uint id, SpvDecoration** decorations, ref nuint numDecorations)
		{
			fixed (nuint* pnumDecorations = &numDecorations)
			{
				SpvcResult ret = SPIRV.SpvcCompilerGetBufferBlockDecorations(compiler, id, decorations, pnumDecorations);
				return ret;
			}
		}

		public static SpvcResult GetBufferBlockDecorations(this SpvcCompiler compiler, uint id, ref SpvDecoration* decorations, ref nuint numDecorations)
		{
			fixed (SpvDecoration** pdecorations = &decorations)
			{
				fixed (nuint* pnumDecorations = &numDecorations)
				{
					SpvcResult ret = SPIRV.SpvcCompilerGetBufferBlockDecorations(compiler, id, pdecorations, pnumDecorations);
					return ret;
				}
			}
		}

		public static SpvcResult GetBufferBlockDecorations(this SpvcCompiler compiler, uint id, SpvDecoration** decorations, nuint* numDecorations)
		{
			SpvcResult ret = SPIRV.SpvcCompilerGetBufferBlockDecorations(compiler, id, decorations, numDecorations);
			return ret;
		}

		/// <summary>
		/// Override options. Will return error if e.g. MSL options are used for the HLSL backend, etc. 
		/// </summary>
		public static SpvcResult SetBool(this SpvcCompilerOptions options, SpvcCompilerOption option, bool value)
		{
			SpvcResult ret = SPIRV.SpvcCompilerOptionsSetBool(options, option, value);
			return ret;
		}

		public static SpvcResult SetUint(this SpvcCompilerOptions options, SpvcCompilerOption option, uint value)
		{
			SpvcResult ret = SPIRV.SpvcCompilerOptionsSetUint(options, option, value);
			return ret;
		}

		public static SpvcResult GetResourceListForType(this SpvcResources resources, SpvcResourceType type, ref SpvcReflectedResource* resourceList, nuint* resourceSize)
		{
			fixed (SpvcReflectedResource** presourceList = &resourceList)
			{
				SpvcResult ret = SPIRV.SpvcResourcesGetResourceListForType(resources, type, presourceList, resourceSize);
				return ret;
			}
		}

		public static SpvcResult GetResourceListForType(this SpvcResources resources, SpvcResourceType type, SpvcReflectedResource** resourceList, ref nuint resourceSize)
		{
			fixed (nuint* presourceSize = &resourceSize)
			{
				SpvcResult ret = SPIRV.SpvcResourcesGetResourceListForType(resources, type, resourceList, presourceSize);
				return ret;
			}
		}

		public static SpvcResult GetResourceListForType(this SpvcResources resources, SpvcResourceType type, ref SpvcReflectedResource* resourceList, ref nuint resourceSize)
		{
			fixed (SpvcReflectedResource** presourceList = &resourceList)
			{
				fixed (nuint* presourceSize = &resourceSize)
				{
					SpvcResult ret = SPIRV.SpvcResourcesGetResourceListForType(resources, type, presourceList, presourceSize);
					return ret;
				}
			}
		}

		public static SpvcResult GetResourceListForType(this SpvcResources resources, SpvcResourceType type, SpvcReflectedResource** resourceList, nuint* resourceSize)
		{
			SpvcResult ret = SPIRV.SpvcResourcesGetResourceListForType(resources, type, resourceList, resourceSize);
			return ret;
		}

		public static SpvcResult GetBuiltinResourceListForType(this SpvcResources resources, SpvcBuiltinResourceType type, ref SpvcReflectedBuiltinResource* resourceList, nuint* resourceSize)
		{
			fixed (SpvcReflectedBuiltinResource** presourceList = &resourceList)
			{
				SpvcResult ret = SPIRV.SpvcResourcesGetBuiltinResourceListForType(resources, type, presourceList, resourceSize);
				return ret;
			}
		}

		public static SpvcResult GetBuiltinResourceListForType(this SpvcResources resources, SpvcBuiltinResourceType type, SpvcReflectedBuiltinResource** resourceList, ref nuint resourceSize)
		{
			fixed (nuint* presourceSize = &resourceSize)
			{
				SpvcResult ret = SPIRV.SpvcResourcesGetBuiltinResourceListForType(resources, type, resourceList, presourceSize);
				return ret;
			}
		}

		public static SpvcResult GetBuiltinResourceListForType(this SpvcResources resources, SpvcBuiltinResourceType type, ref SpvcReflectedBuiltinResource* resourceList, ref nuint resourceSize)
		{
			fixed (SpvcReflectedBuiltinResource** presourceList = &resourceList)
			{
				fixed (nuint* presourceSize = &resourceSize)
				{
					SpvcResult ret = SPIRV.SpvcResourcesGetBuiltinResourceListForType(resources, type, presourceList, presourceSize);
					return ret;
				}
			}
		}

		public static SpvcResult GetBuiltinResourceListForType(this SpvcResources resources, SpvcBuiltinResourceType type, SpvcReflectedBuiltinResource** resourceList, nuint* resourceSize)
		{
			SpvcResult ret = SPIRV.SpvcResourcesGetBuiltinResourceListForType(resources, type, resourceList, resourceSize);
			return ret;
		}

		/// <summary>
		/// Pulls out SPIRType::self. This effectively gives the type ID without array or pointer qualifiers.
		/// This is necessary when reflecting decoration/name information on members of a struct,
		/// which are placed in the base type, not the qualified type.
		/// This is similar to spvc_reflected_resource::base_type_id. 
		/// </summary>
		public static uint GetBaseTypeId(this SpvcType type)
		{
			uint ret = SPIRV.SpvcTypeGetBaseTypeId(type);
			return ret;
		}

		public static SpvcBasetype GetBasetype(this SpvcType type)
		{
			SpvcBasetype ret = SPIRV.SpvcTypeGetBasetype(type);
			return ret;
		}

		public static uint GetBitWidth(this SpvcType type)
		{
			uint ret = SPIRV.SpvcTypeGetBitWidth(type);
			return ret;
		}

		public static uint GetVectorSize(this SpvcType type)
		{
			uint ret = SPIRV.SpvcTypeGetVectorSize(type);
			return ret;
		}

		public static uint GetColumns(this SpvcType type)
		{
			uint ret = SPIRV.SpvcTypeGetColumns(type);
			return ret;
		}

		public static uint GetNumArrayDimensions(this SpvcType type)
		{
			uint ret = SPIRV.SpvcTypeGetNumArrayDimensions(type);
			return ret;
		}

		public static bool ArrayDimensionIsLiteral(this SpvcType type, uint dimension)
		{
			bool ret = SPIRV.SpvcTypeArrayDimensionIsLiteral(type, dimension);
			return ret;
		}

		public static SpvId GetArrayDimension(this SpvcType type, uint dimension)
		{
			SpvId ret = SPIRV.SpvcTypeGetArrayDimension(type, dimension);
			return ret;
		}

		public static uint GetNumMemberTypes(this SpvcType type)
		{
			uint ret = SPIRV.SpvcTypeGetNumMemberTypes(type);
			return ret;
		}

		public static uint GetMemberType(this SpvcType type, uint index)
		{
			uint ret = SPIRV.SpvcTypeGetMemberType(type, index);
			return ret;
		}

		public static SpvStorageClass GetStorageClass(this SpvcType type)
		{
			SpvStorageClass ret = SPIRV.SpvcTypeGetStorageClass(type);
			return ret;
		}

		/// <summary>
		/// Image type query. 
		/// </summary>
		public static uint GetImageSampledType(this SpvcType type)
		{
			uint ret = SPIRV.SpvcTypeGetImageSampledType(type);
			return ret;
		}

		public static SpvDim GetImageDimension(this SpvcType type)
		{
			SpvDim ret = SPIRV.SpvcTypeGetImageDimension(type);
			return ret;
		}

		public static bool GetImageIsDepth(this SpvcType type)
		{
			bool ret = SPIRV.SpvcTypeGetImageIsDepth(type);
			return ret;
		}

		public static bool GetImageArrayed(this SpvcType type)
		{
			bool ret = SPIRV.SpvcTypeGetImageArrayed(type);
			return ret;
		}

		public static bool GetImageMultisampled(this SpvcType type)
		{
			bool ret = SPIRV.SpvcTypeGetImageMultisampled(type);
			return ret;
		}

		public static bool GetImageIsStorage(this SpvcType type)
		{
			bool ret = SPIRV.SpvcTypeGetImageIsStorage(type);
			return ret;
		}

		public static SpvImageFormat GetImageStorageFormat(this SpvcType type)
		{
			SpvImageFormat ret = SPIRV.SpvcTypeGetImageStorageFormat(type);
			return ret;
		}

		public static SpvAccessQualifier GetImageAccessQualifier(this SpvcType type)
		{
			SpvAccessQualifier ret = SPIRV.SpvcTypeGetImageAccessQualifier(type);
			return ret;
		}

		/// <summary>
		/// No stdint.h until C99, sigh :(
		/// For smaller types, the result is sign or zero-extended as appropriate.
		/// Maps to C++ API.
		/// TODO: The SPIRConstant query interface and modification interface is not quite complete.
		/// </summary>
		public static float GetScalarFp16(this SpvcConstant constant, uint column, uint row)
		{
			float ret = SPIRV.SpvcConstantGetScalarFp16(constant, column, row);
			return ret;
		}

		public static float GetScalarFp32(this SpvcConstant constant, uint column, uint row)
		{
			float ret = SPIRV.SpvcConstantGetScalarFp32(constant, column, row);
			return ret;
		}

		public static double GetScalarFp64(this SpvcConstant constant, uint column, uint row)
		{
			double ret = SPIRV.SpvcConstantGetScalarFp64(constant, column, row);
			return ret;
		}

		public static uint GetScalarU32(this SpvcConstant constant, uint column, uint row)
		{
			uint ret = SPIRV.SpvcConstantGetScalarU32(constant, column, row);
			return ret;
		}

		public static int GetScalarI32(this SpvcConstant constant, uint column, uint row)
		{
			int ret = SPIRV.SpvcConstantGetScalarI32(constant, column, row);
			return ret;
		}

		public static uint GetScalarU16(this SpvcConstant constant, uint column, uint row)
		{
			uint ret = SPIRV.SpvcConstantGetScalarU16(constant, column, row);
			return ret;
		}

		public static int GetScalarI16(this SpvcConstant constant, uint column, uint row)
		{
			int ret = SPIRV.SpvcConstantGetScalarI16(constant, column, row);
			return ret;
		}

		public static uint GetScalarU8(this SpvcConstant constant, uint column, uint row)
		{
			uint ret = SPIRV.SpvcConstantGetScalarU8(constant, column, row);
			return ret;
		}

		public static int GetScalarI8(this SpvcConstant constant, uint column, uint row)
		{
			int ret = SPIRV.SpvcConstantGetScalarI8(constant, column, row);
			return ret;
		}

		public static void GetSubconstants(this SpvcConstant constant, ref uint* constituents, nuint* count)
		{
			fixed (uint** pconstituents = &constituents)
			{
				SPIRV.SpvcConstantGetSubconstants(constant, pconstituents, count);
			}
		}

		public static void GetSubconstants(this SpvcConstant constant, uint** constituents, ref nuint count)
		{
			fixed (nuint* pcount = &count)
			{
				SPIRV.SpvcConstantGetSubconstants(constant, constituents, pcount);
			}
		}

		public static void GetSubconstants(this SpvcConstant constant, ref uint* constituents, ref nuint count)
		{
			fixed (uint** pconstituents = &constituents)
			{
				fixed (nuint* pcount = &count)
				{
					SPIRV.SpvcConstantGetSubconstants(constant, pconstituents, pcount);
				}
			}
		}

		public static void GetSubconstants(this SpvcConstant constant, uint** constituents, nuint* count)
		{
			SPIRV.SpvcConstantGetSubconstants(constant, constituents, count);
		}

		public static uint GetType(this SpvcConstant constant)
		{
			uint ret = SPIRV.SpvcConstantGetType(constant);
			return ret;
		}

		/// <summary>
		/// C implementation of the C++ api.
		/// </summary>
		public static void SetScalarFp16(this SpvcConstant constant, uint column, uint row, ushort value)
		{
			SPIRV.SpvcConstantSetScalarFp16(constant, column, row, value);
		}

		public static void SetScalarFp32(this SpvcConstant constant, uint column, uint row, float value)
		{
			SPIRV.SpvcConstantSetScalarFp32(constant, column, row, value);
		}

		public static void SetScalarFp64(this SpvcConstant constant, uint column, uint row, double value)
		{
			SPIRV.SpvcConstantSetScalarFp64(constant, column, row, value);
		}

		public static void SetScalarU32(this SpvcConstant constant, uint column, uint row, uint value)
		{
			SPIRV.SpvcConstantSetScalarU32(constant, column, row, value);
		}

		public static void SetScalarI32(this SpvcConstant constant, uint column, uint row, int value)
		{
			SPIRV.SpvcConstantSetScalarI32(constant, column, row, value);
		}

		public static void SetScalarU16(this SpvcConstant constant, uint column, uint row, ushort value)
		{
			SPIRV.SpvcConstantSetScalarU16(constant, column, row, value);
		}

		public static void SetScalarI16(this SpvcConstant constant, uint column, uint row, short value)
		{
			SPIRV.SpvcConstantSetScalarI16(constant, column, row, value);
		}

		public static void SetScalarU8(this SpvcConstant constant, uint column, uint row, byte value)
		{
			SPIRV.SpvcConstantSetScalarU8(constant, column, row, value);
		}

		public static void SetScalarI8(this SpvcConstant constant, uint column, uint row, byte value)
		{
			SPIRV.SpvcConstantSetScalarI8(constant, column, row, value);
		}

	}
}
